{"/home/travis/build/npmtest/node-npmtest-elasticsearch/test.js":"/* istanbul instrument in package npmtest_elasticsearch */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/lib.npmtest_elasticsearch.js":"/* istanbul instrument in package npmtest_elasticsearch */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_elasticsearch = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_elasticsearch = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-elasticsearch && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_elasticsearch */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_elasticsearch\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_elasticsearch.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_elasticsearch.rollup.js'] =\n            local.assetsDict['/assets.npmtest_elasticsearch.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_elasticsearch.__dirname +\n                    '/lib.npmtest_elasticsearch.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/elasticsearch.js":"// In order to help people who were accidentally upgraded to this ES client,\n// throw an error when they try to instanciate the exported function.\n// previous \"elasticsearch\" module -> https://github.com/ncb000gt/node-es\nfunction es() {\n  throw new Error('Looks like you are expecting the previous \"elasticsearch\" module. ' +\n    'It is now the \"es\" module. To create a client with this module use ' +\n    '`new es.Client(params)`.');\n}\n\nes.Client = require('./lib/client');\nes.ConnectionPool = require('./lib/connection_pool');\nes.Transport = require('./lib/transport');\nes.errors = require('./lib/errors');\n\nmodule.exports = es;\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/client.js":"/**\n * A client that makes requests to Elasticsearch via a {{#crossLink \"Transport\"}}Transport{{/crossLink}}\n *\n * Initializing a client might look something like:\n *\n * ```\n * var client = new es.Client({\n *   hosts: [\n *     'es1.net:9200',\n *     {\n *       host: 'es2.net',\n *       port: 9200\n *     }\n *   ],\n *   sniffOnStart: true,\n *   log: {\n *     type: 'file',\n *     level: 'warning'\n *   }\n * });\n * ```\n *\n * @class Client\n * @constructor\n */\n\nmodule.exports = Client;\n\nvar Transport = require('./transport');\nvar clientAction = require('./client_action');\nvar _ = require('./utils');\n\nfunction Client(config) {\n  config = config || {};\n\n  if (config.__reused) {\n    throw new Error('Do not reuse objects to configure the elasticsearch Client class: ' +\n      'https://github.com/elasticsearch/elasticsearch-js/issues/33');\n  } else {\n    config.__reused = true;\n  }\n\n  function EsApiClient() {\n    // our client will log minimally by default\n    if (!config.hasOwnProperty('log')) {\n      config.log = 'warning';\n    }\n\n    if (!config.hosts && !config.host) {\n      config.host = 'http://localhost:9200';\n    }\n\n    this.close = function () {\n      this.transport.close();\n    };\n\n    this.transport = new Transport(config);\n\n    _.each(EsApiClient.prototype, _.bind(function (Fn, prop) {\n      if (Fn.prototype instanceof clientAction.ApiNamespace) {\n        this[prop] = new Fn(this.transport, this);\n      }\n    }, this));\n\n    delete this._namespaces;\n  }\n\n\n  EsApiClient.prototype = _.funcEnum(config, 'apiVersion', Client.apis, '_default');\n  if (!config.sniffEndpoint && EsApiClient.prototype === Client.apis['0.90']) {\n    config.sniffEndpoint = '/_cluster/nodes';\n  }\n\n  var Constructor = EsApiClient;\n\n  if (config.plugins) {\n    Constructor.prototype = _.cloneDeep(Constructor.prototype);\n\n    _.each(config.plugins, function (setup) {\n      Constructor = setup(Constructor, config, {\n        apis: require('./apis'),\n        connectors: require('./connectors'),\n        loggers: require('./loggers'),\n        selectors: require('./selectors'),\n        serializers: require('./serializers'),\n        Client: require('./client'),\n        clientAction: clientAction,\n        Connection: require('./connection'),\n        ConnectionPool: require('./connection_pool'),\n        Errors: require('./errors'),\n        Host: require('./host'),\n        Log: require('./log'),\n        Logger: require('./logger'),\n        NodesToHost: require('./nodes_to_host'),\n        Transport: require('./transport'),\n        utils: require('./utils')\n      }) || Constructor;\n    });\n  }\n\n  return new Constructor();\n}\n\nClient.apis = require('./apis');\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/transport.js":"/**\n * Class that manages making request, called by all of the API methods.\n * @type {[type]}\n */\nmodule.exports = Transport;\n\nvar _ = require('./utils');\nvar errors = require('./errors');\nvar Host = require('./host');\nvar Promise = require('promise/lib/es6-extensions');\nvar patchSniffOnConnectionFault = require('./transport/sniff_on_connection_fault');\nvar findCommonProtocol = require('./transport/find_common_protocol');\n\nfunction Transport(config) {\n  var self = this;\n  config = self._config = config || {};\n\n  var LogClass = (typeof config.log === 'function') ? config.log : require('./log');\n  config.log = self.log = new LogClass(config);\n\n  // setup the connection pool\n  var ConnectionPool = _.funcEnum(config, 'connectionPool', Transport.connectionPools, 'main');\n  self.connectionPool = new ConnectionPool(config);\n\n  // setup the serializer\n  var Serializer = _.funcEnum(config, 'serializer', Transport.serializers, 'json');\n  self.serializer = new Serializer(config);\n\n  // setup the nodesToHostCallback\n  self.nodesToHostCallback = _.funcEnum(config, 'nodesToHostCallback', Transport.nodesToHostCallbacks, 'main');\n\n  // setup max retries\n  self.maxRetries = config.hasOwnProperty('maxRetries') ? config.maxRetries : 3;\n\n  // setup endpoint to use for sniffing\n  self.sniffEndpoint = config.hasOwnProperty('sniffEndpoint') ? config.sniffEndpoint : '/_nodes/_all/clear';\n\n  // setup requestTimeout default\n  self.requestTimeout = config.hasOwnProperty('requestTimeout') ? config.requestTimeout : 30000;\n\n  if (config.hasOwnProperty('defer')) {\n    self.defer = config.defer;\n  }\n\n  // randomizeHosts option\n  var randomizeHosts = config.hasOwnProperty('randomizeHosts') ? !!config.randomizeHosts : true;\n\n  if (config.host) {\n    config.hosts = config.host;\n  }\n\n  if (config.hosts) {\n    var hostsConfig = _.createArray(config.hosts, function (val) {\n      if (_.isPlainObject(val) || _.isString(val) || val instanceof Host) {\n        return val;\n      }\n    });\n\n    if (!hostsConfig) {\n      throw new TypeError('Invalid hosts config. Expected a URL, an array of urls, a host config object, ' +\n        'or an array of host config objects.');\n    }\n\n    if (randomizeHosts) {\n      hostsConfig = _.shuffle(hostsConfig);\n    }\n\n    self.setHosts(hostsConfig);\n  }\n\n  if (config.hasOwnProperty('sniffedNodesProtocol')) {\n    self.sniffedNodesProtocol = config.sniffedNodesProtocol || null;\n  } else {\n    self.sniffedNodesProtocol = findCommonProtocol(self.connectionPool.getAllHosts()) || null;\n  }\n\n  if (config.sniffOnStart) {\n    self.sniff();\n  }\n\n  if (config.sniffInterval) {\n    self._timeout(function doSniff() {\n      self.sniff();\n      self._timeout(doSniff, config.sniffInterval);\n    }, config.sniffInterval);\n  }\n\n  if (config.sniffOnConnectionFault) {\n    patchSniffOnConnectionFault(self);\n  }\n}\n\nTransport.connectionPools = {\n  main: require('./connection_pool')\n};\n\nTransport.serializers = require('./serializers');\n\nTransport.nodesToHostCallbacks = {\n  main: require('./nodes_to_host')\n};\n\nTransport.prototype.defer = function () {\n  var defer = {};\n  defer.promise = new Promise(function (resolve, reject) {\n    defer.resolve = resolve;\n    defer.reject = reject;\n  });\n  return defer;\n};\n\n/**\n * Perform a request with the client's transport\n *\n * @method request\n * @todo async body writing\n * @todo abort\n * @todo access to custom headers, modifying of request in general\n * @param {object} params\n * @param {Number} params.requestTimeout - timeout for the entire request (inculding all retries)\n * @param {Number} params.maxRetries - number of times to re-run request if the\n *   original node chosen can not be connected to.\n * @param {string} [params.path=\"/\"] - URL pathname. Do not include query string.\n * @param {string|object} [params.query] - Query string.\n * @param {String} params.method - The HTTP method for the request\n * @param {String} params.body - The body of the HTTP request\n * @param {Function} cb - A function to call back with (error, responseBody, responseStatus)\n */\nTransport.prototype.request = function (params, cb) {\n  var self = this;\n  var remainingRetries = this.maxRetries;\n  var requestTimeout = this.requestTimeout;\n\n  var connection; // set in sendReqWithConnection\n  var aborted = false; // several connector will respond with an error when the request is aborted\n  var requestAborter; // an abort function, returned by connection#request()\n  var requestTimeoutId; // the id of the ^timeout\n  var ret; // the object returned to the user, might be a promise\n  var defer; // the defer object, will be set when we are using promises.\n\n  var body = params.body;\n  var headers = !params.headers ? {} : _.transform(params.headers, function (headers, val, name) {\n    headers[String(name).toLowerCase()] = val;\n  });\n\n  self.log.debug('starting request', params);\n\n  // determine the response based on the presense of a callback\n  if (typeof cb === 'function') {\n    // handle callbacks within a domain\n    if (process.domain) {\n      cb = process.domain.bind(cb);\n    }\n    ret = {\n      abort: abortRequest\n    };\n  } else {\n    defer = this.defer();\n    ret = defer.promise;\n    ret.abort = abortRequest;\n  }\n\n  if (body && params.method === 'GET') {\n    _.nextTick(respond, new TypeError('Body can not be sent with method \"GET\"'));\n    return ret;\n  }\n\n  // serialize the body\n  if (body) {\n    var serializer = self.serializer;\n    var serializeFn = serializer[params.bulkBody ? 'bulkBody' : 'serialize'];\n\n    body = serializeFn.call(serializer, body);\n    if (!headers['content-type']) {\n      headers['content-type'] = serializeFn.contentType;\n    }\n  }\n\n  if (params.hasOwnProperty('maxRetries')) {\n    remainingRetries = params.maxRetries;\n  }\n\n  if (params.hasOwnProperty('requestTimeout')) {\n    requestTimeout = params.requestTimeout;\n  }\n\n  params.req = {\n    method: params.method,\n    path: params.path || '/',\n    query: params.query,\n    body: body,\n    headers: headers\n  };\n\n  function sendReqWithConnection(err, _connection) {\n    if (aborted) {\n      return;\n    }\n\n    if (err) {\n      respond(err);\n    } else if (_connection) {\n      connection = _connection;\n      requestAborter = connection.request(params.req, checkRespForFailure);\n    } else {\n      self.log.warning('No living connections');\n      respond(new errors.NoConnections());\n    }\n  }\n\n  function checkRespForFailure(err, body, status, headers) {\n    if (aborted) {\n      return;\n    }\n\n    requestAborter = void 0;\n\n    if (err instanceof errors.RequestTypeError) {\n      self.log.error('Connection refused to execute the request', err);\n      respond(err, body, status, headers);\n      return;\n    }\n\n    if (err) {\n      connection.setStatus('dead');\n\n      var errMsg = err.message || '';\n\n      errMsg =\n        '\\n' +\n        params.req.method +\n        ' ' +\n        connection.host.makeUrl(params.req) +\n        (errMsg.length ? ' => ' : '') +\n        errMsg\n      ;\n\n      if (remainingRetries) {\n        remainingRetries--;\n        self.log.error('Request error, retrying' + errMsg);\n        self.connectionPool.select(sendReqWithConnection);\n      } else {\n        self.log.error('Request complete with error' + errMsg);\n        respond(new errors.ConnectionFault(err));\n      }\n    } else {\n      self.log.debug('Request complete');\n      respond(void 0, body, status, headers);\n    }\n  }\n\n  function respond(err, body, status, headers) {\n    if (aborted) {\n      return;\n    }\n\n    self._timeout(requestTimeoutId);\n    var parsedBody;\n    var isJson = !headers || (headers['content-type'] && ~headers['content-type'].indexOf('application/json'));\n\n    if (!err && body) {\n      if (isJson) {\n        parsedBody = self.serializer.deserialize(body);\n        if (parsedBody == null) {\n          err = new errors.Serialization();\n          parsedBody = body;\n        }\n      } else {\n        parsedBody = body;\n      }\n    }\n\n    // does the response represent an error?\n    if (\n      (!err || err instanceof errors.Serialization)\n      && (status < 200 || status >= 300)\n      && (!params.ignore || !_.includes(params.ignore, status))\n    ) {\n\n      var errorMetadata = _.pick(params.req, ['path', 'query', 'body']);\n      errorMetadata.statusCode = status;\n      errorMetadata.response = body;\n\n      if (status === 401 && headers && headers['www-authenticate']) {\n        errorMetadata.wwwAuthenticateDirective = headers['www-authenticate'];\n      }\n\n      if (errors[status]) {\n        err = new errors[status](parsedBody && parsedBody.error, errorMetadata);\n      } else {\n        err = new errors.Generic('unknown error', errorMetadata);\n      }\n    }\n\n    // can we cast notfound to false?\n    if (params.castExists) {\n      if (err && err instanceof errors.NotFound) {\n        parsedBody = false;\n        err = void 0;\n      } else {\n        parsedBody = !err;\n      }\n    }\n\n    // how do we send the response?\n    if (typeof cb === 'function') {\n      if (err) {\n        cb(err, parsedBody, status);\n      } else {\n        cb(void 0, parsedBody, status);\n      }\n    } else if (err) {\n      err.body = parsedBody;\n      err.status = status;\n      defer.reject(err);\n    } else {\n      defer.resolve(parsedBody);\n    }\n  }\n\n  function abortRequest() {\n    if (aborted) {\n      return;\n    }\n\n    aborted = true;\n    remainingRetries = 0;\n    self._timeout(requestTimeoutId);\n    if (typeof requestAborter === 'function') {\n      requestAborter();\n    }\n  }\n\n  if (requestTimeout && requestTimeout !== Infinity) {\n    requestTimeoutId = this._timeout(function () {\n      respond(new errors.RequestTimeout('Request Timeout after ' + requestTimeout + 'ms'));\n      abortRequest();\n    }, requestTimeout);\n  }\n\n  if (connection) {\n    sendReqWithConnection(void 0, connection);\n  } else {\n    self.connectionPool.select(sendReqWithConnection);\n  }\n\n  return ret;\n};\n\nTransport.prototype._timeout = function (cb, delay) {\n  if (this.closed) return;\n\n  var id;\n  var timers = this._timers || (this._timers = []);\n\n  if ('function' !== typeof cb) {\n    id = cb;\n    cb = void 0;\n  }\n\n  if (cb) {\n    // set the timer\n    id = setTimeout(function () {\n      _.pull(timers, id);\n      cb();\n    }, delay);\n\n    timers.push(id);\n    return id;\n  }\n\n  if (id) {\n    clearTimeout(id);\n\n    var i = this._timers.indexOf(id);\n    if (i !== -1) {\n      this._timers.splice(i, 1);\n    }\n  }\n};\n\n/**\n * Ask an ES node for a list of all the nodes, add/remove nodes from the connection\n * pool as appropriate\n *\n * @param  {Function} cb - Function to call back once complete\n */\nTransport.prototype.sniff = function (cb) {\n  var self = this;\n  var nodesToHostCallback = this.nodesToHostCallback;\n  var log = this.log;\n  var sniffedNodesProtocol = this.sniffedNodesProtocol;\n\n  // make cb a function if it isn't\n  cb = typeof cb === 'function' ? cb : _.noop;\n\n  this.request({\n    path: this.sniffEndpoint,\n    method: 'GET'\n  }, function (err, resp, status) {\n    if (!err && resp && resp.nodes) {\n      var hostsConfigs;\n\n      try {\n        hostsConfigs = nodesToHostCallback(resp.nodes);\n      } catch (e) {\n        log.error(new Error('Unable to convert node list from ' + this.sniffEndpoint +\n          ' to hosts durring sniff. Encountered error:\\n' + (e.stack || e.message)));\n        return;\n      }\n\n      _.forEach(hostsConfigs, function (hostConfig) {\n        if (sniffedNodesProtocol) hostConfig.protocol = sniffedNodesProtocol;\n      });\n\n      self.setHosts(hostsConfigs);\n    }\n    cb(err, resp, status);\n  });\n};\n\n/**\n * Set the host list that the transport should use.\n *\n * @param {Array<HostConfig>} hostsConfigs - an array of Hosts, or configuration objects\n *                                         that will be used to create Host objects.\n */\nTransport.prototype.setHosts = function (hostsConfigs) {\n  var globalConfig = this._config;\n  this.connectionPool.setHosts(_.map(hostsConfigs, function (conf) {\n    return (conf instanceof Host) ? conf : new Host(conf, globalConfig);\n  }));\n};\n\n/**\n * Close the Transport, which closes the logs and connection pool\n * @return {[type]} [description]\n */\nTransport.prototype.close = function () {\n  this.log.close();\n  this.closed = true;\n  _.each(this._timers, clearTimeout);\n  this._timers = null;\n  this.connectionPool.close();\n};\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/utils.js":"var path = require('path');\nvar nodeUtils = require('util');\n\n/**\n * Custom utils library, basically a modified version of [lodash](http://lodash.com/docs) +\n * [node.utils](http://nodejs.org/api/util.html#util_util) that doesn't use mixins to prevent\n * confusion when requiring lodash itself.\n *\n * @class utils\n * @static\n */\nvar _ = require('lodash').assign({}, require('lodash'), nodeUtils);\n\n/**\n * Link to [path.join](http://nodejs.org/api/path.html#path_path_join_path1_path2)\n *\n * @method _.joinPath\n * @type {function}\n */\n_.joinPath = path.join;\n\n/**\n * Recursively merge two objects, walking into each object and concating arrays. If both to and from have a value at a\n * key, but the values' types don't match to's value is left unmodified. Only Array and Object values are merged - that\n * it to say values with a typeof \"object\"\n *\n * @param  {Object} to - Object to merge into (no cloning, the original object\n *   is modified)\n * @param  {Object} from - Object to pull changed from\n * @return {Object} - returns the modified to value\n */\n_.deepMerge = function (to, from) {\n  _.each(from, function (fromVal, key) {\n    switch (typeof to[key]) {\n      case 'undefined':\n        to[key] = from[key];\n        break;\n      case 'object':\n        if (_.isArray(to[key]) && _.isArray(from[key])) {\n          to[key] = to[key].concat(from[key]);\n        }\n        else if (_.isPlainObject(to[key]) && _.isPlainObject(from[key])) {\n          _.deepMerge(to[key], from[key]);\n        }\n    }\n  });\n  return to;\n};\n\n/**\n * Test if a value is an array and it's contents are of a specific type\n *\n * @method isArrayOf<Strings|Object|Array|Finite|Function|RegExp>s\n * @param  {Array} arr - An array to check\n * @return {Boolean}\n */\n_.each([\n  'String',\n  'Object',\n  'PlainObject',\n  'Array',\n  'Finite',\n  'Function',\n  'RegExp'\n], function (type) {\n  var check = _['is' + type];\n\n  _['isArrayOf' + type + 's'] = function (arr) {\n    // quick shallow check of arrays\n    return _.isArray(arr) && _.every(arr.slice(0, 10), check);\n  };\n});\n\n\n/**\n * Capitalize the first letter of a word\n *\n * @method  ucfirst\n * @param  {string} word - The word to transform\n * @return {string}\n */\n_.ucfirst = function (word) {\n  return word[0].toUpperCase() + word.substring(1).toLowerCase();\n};\n\n/**\n * Base algo for studlyCase and camelCase\n * @param  {boolean} firstWordCap - Should the first character of the first word be capitalized\n * @return {Function}\n */\nfunction adjustWordCase(firstWordCap, otherWordsCap, sep) {\n  return function (string) {\n    var i = 0;\n    var words = [];\n    var word = '';\n    var code, c, upper, lower;\n\n    for (; i < string.length; i++) {\n      code = string.charCodeAt(i);\n      c = string.charAt(i);\n      lower = (code >= 97 && code <= 122) || (code >= 48 && code <= 57);\n      upper = code >= 65 && code <= 90;\n\n      if (upper || !lower) {\n        // new word\n        if (word.length) {\n          words.push(word);\n        }\n        word = '';\n      }\n\n      if (upper || lower) {\n        if (lower && word.length) {\n          word += c;\n        } else {\n          if ((!words.length && firstWordCap) || (words.length && otherWordsCap)) {\n            word = c.toUpperCase();\n          }\n          else {\n            word = c.toLowerCase();\n          }\n        }\n      }\n    }\n    if (word.length) {\n      words.push(word);\n    }\n    // add the leading underscore back to strings the had it originally\n    if (words.length && string.charAt(0) === '_') {\n      words[0] = '_' + words[0];\n    }\n    return words.join(sep);\n  };\n}\n\n/**\n * Transform a string into StudlyCase\n *\n * @method studlyCase\n * @param  {String} string\n * @return {String}\n */\n_.studlyCase = adjustWordCase(true, true, '');\n\n/**\n * Transform a string into camelCase\n *\n * @method camelCase\n * @param  {String} string\n * @return {String}\n */\n_.camelCase = adjustWordCase(false, true, '');\n\n/**\n * Transform a string into snakeCase\n *\n * @method snakeCase\n * @param  {String} string\n * @return {String}\n */\n_.snakeCase = adjustWordCase(false, false, '_');\n\n/**\n * Lower-case a string, and return an empty string if any is not a string\n *\n * @param any {*} - Something or nothing\n * @returns {string}\n */\n_.toLowerString = function (any) {\n  if (any) {\n    if (typeof any !== 'string') {\n      any = any.toString();\n    }\n  } else {\n    any = '';\n  }\n  return any.toLowerCase();\n};\n\n/**\n * Upper-case the string, return an empty string if any is not a string\n *\n * @param any {*} - Something or nothing\n * @returns {string}\n */\n_.toUpperString = function (any) {\n  if (any) {\n    if (typeof any !== 'string') {\n      any = any.toString();\n    }\n  } else {\n    any = '';\n  }\n  return any.toUpperCase();\n};\n\n/**\n * Test if a value is \"numeric\" meaning that it can be transformed into something besides NaN\n *\n * @method isNumeric\n * @param  {*} val\n * @return {Boolean}\n */\n_.isNumeric = function (val) {\n  return typeof val !== 'object' && val - parseFloat(val) >= 0;\n};\n\n// regexp to test for intervals\nvar intervalRE = /^(\\d+(?:\\.\\d+)?)(M|w|d|h|m|s|y|ms)$/;\n\n/**\n * Test if a string represents an interval (eg. 1m, 2Y)\n *\n * @method isInterval\n * @param {String} val\n * @return {Boolean}\n */\n_.isInterval = function (val) {\n  return !!(val.match && val.match(intervalRE));\n};\n\n/**\n * Repeat a string n times\n *\n * @todo TestPerformance\n * @method repeat\n * @param {String} what - The string to repeat\n * @param {Number} times - Times the string should be repeated\n * @return {String}\n */\n_.repeat = function (what, times) {\n  return (new Array(times + 1)).join(what);\n};\n\n/**\n * Call a function, applying the arguments object to it in an optimized way, rather than always turning it into an array\n *\n * @param func {Function} - The function to execute\n * @param context {*} - The context the function will be executed with\n * @param args {Arguments} - The arguments to send to func\n * @param [sliceIndex=0] {Integer} - The index that args should be sliced at, before feeding args to func\n * @returns {*} - the return value of func\n */\n_.applyArgs = function (func, context, args, sliceIndex) {\n  sliceIndex = sliceIndex || 0;\n  switch (args.length - sliceIndex) {\n    case 0:\n      return func.call(context);\n    case 1:\n      return func.call(context, args[0 + sliceIndex]);\n    case 2:\n      return func.call(context, args[0 + sliceIndex], args[1 + sliceIndex]);\n    case 3:\n      return func.call(context, args[0 + sliceIndex], args[1 + sliceIndex], args[2 + sliceIndex]);\n    case 4:\n      return func.call(context, args[0 + sliceIndex], args[1 + sliceIndex], args[2 + sliceIndex], args[3 + sliceIndex]);\n    case 5:\n      return func.call(context, args[0 + sliceIndex], args[1 + sliceIndex],\n      args[2 + sliceIndex], args[3 + sliceIndex], args[4 + sliceIndex]);\n    default:\n      return func.apply(context, Array.prototype.slice.call(args, sliceIndex));\n  }\n};\n\n/**\n * Schedule a function to be called on the next tick, and supply it with these arguments\n * when it is called.\n * @return {[type]} [description]\n */\n_.nextTick = function (cb) {\n  // bind the function and schedule it\n  process.nextTick(_.bindKey(_, 'applyArgs', cb, null, arguments, 1));\n};\n\n/**\n * Marks a method as a handler. Currently this just makes a property on the method\n * flagging it to be bound to the object at object creation when \"makeBoundMethods\" is called\n *\n * ```\n * ClassName.prototype.methodName = _.handler(function () {\n *   // this will always be bound when called via classInstance.bound.methodName\n *   this === classInstance\n * });\n * ```\n *\n * @alias _.scheduled\n * @param  {Function} func - The method that is being defined\n * @return {Function}\n */\n_.handler = function (func) {\n  func._provideBound = true;\n  return func;\n};\n_.scheduled = _.handler;\n\n/**\n * Creates an \"bound\" property on an object, which all or a subset of methods from\n * the object which are bound to the original object.\n *\n * ```\n * var obj = {\n *   onEvent: function () {}\n * };\n *\n * _.makeBoundMethods(obj);\n *\n * obj.bound.onEvent() // is bound to obj, and can safely be used as an event handler.\n * ```\n *\n * @param {Object} obj - The object to bind the methods to\n */\n_.makeBoundMethods = function (obj) {\n  obj.bound = {};\n  for (var prop in obj) {\n    // dearest maintainer, we want to look through the prototype\n    if (typeof obj[prop] === 'function' && obj[prop]._provideBound === true) {\n      obj.bound[prop] = _.bind(obj[prop], obj);\n    }\n  }\n};\n\n_.noop = function () {};\n\n/**\n * Implements the standard \"string or constructor\" check that I was copy/pasting everywhere\n * @param  {String|Function} val - the value that the user passed in\n * @param  {Object} opts - a map of the options\n * @return {Function|undefined} - If a valid option was specified, then the constructor is returned\n */\n_.funcEnum = function (config, name, opts, def) {\n  var val = config[name];\n  switch (typeof val) {\n    case 'undefined':\n      return opts[def];\n    case 'function':\n      return val;\n    case 'string':\n      if (opts.hasOwnProperty(val)) {\n        return opts[val];\n      }\n    /* falls through */\n    default:\n      var err = 'Invalid ' + name + ' \"' + val + '\", expected a function';\n      switch (_.size(opts)) {\n        case 0:\n          break;\n        case 1:\n          err += ' or ' + _.keys(opts)[0];\n          break;\n        default:\n          err += ' or one of ' + _.keys(opts).join(', ');\n          break;\n      }\n      throw new TypeError(err);\n  }\n};\n\n/**\n * Accepts any object and attempts to convert it into an array. If the object passed in is not\n * an array it will be wrapped in one. Then the transform/map function will be called for each element\n * and create a new array that is returned. If the map function fails to return something, the loop is\n * halted and false is returned instead of an array.\n *\n * @param  {*} input - The value to convert\n * @param  {Function} transform - A function called for each element of the resulting array\n * @return {Array|false} - an array on success, or false on failure.\n */\n_.createArray = function (input, transform) {\n  transform = typeof transform === 'function' ? transform : _.identity;\n  var output = [];\n  var item;\n  var i;\n\n  if (!_.isArray(input)) {\n    input = [input];\n  }\n\n  for (i = 0; i < input.length; i++) {\n    item = transform(input[i]);\n    if (item === void 0) {\n      return false;\n    } else {\n      output.push(item);\n    }\n  }\n  return output;\n};\n\n/**\n * Takes a WritableStream, and returns the chunks that have not successfully written, returning them as a string.\n *\n * ONLY WORKS FOR TEXT STREAMS\n *\n * @param  {WritableStream} stream - an instance of stream.Writable\n * @return {string} - the remaining test to be written to the stream\n */\n_.getUnwrittenFromStream = function (stream) {\n  var writeBuffer = _.getStreamWriteBuffer(stream);\n  if (!writeBuffer) return;\n\n  // flush the write buffer\n  var out = '';\n  if (!writeBuffer.length) return out;\n\n  _.each(writeBuffer, function (writeReq) {\n    if (writeReq.chunk) {\n      // 0.9.12+ uses WriteReq objects with a chunk prop\n      out += '' + writeReq.chunk;\n    } else if (_.isArray(writeReq) && (typeof writeReq[0] === 'string' || Buffer.isBuffer(writeReq[0]))) {\n      // 0.9.4 - 0.9.9 buffers are arrays of arrays like [[chunk, cb], [chunk, undef], ...].\n      out += '' + writeReq[0];\n    } else {\n      return false;\n    }\n  });\n  return out;\n};\n\n_.getStreamWriteBuffer = function (stream) {\n  if (!stream || !stream._writableState) return;\n\n  var writeState = stream._writableState;\n\n  if (writeState.getBuffer) {\n    return writeState.getBuffer();\n  } else if (writeState.buffer) {\n    return writeState.buffer;\n  }\n};\n\n_.clearWriteStreamBuffer = function (stream) {\n  var buffer = _.getStreamWriteBuffer(stream);\n  return buffer && buffer.splice(0);\n};\n\n/**\n * return the current time in milliseconds since epoch\n */\n_.now = function () {\n  return (typeof Date.now === 'function') ? Date.now() : (new Date()).getTime();\n};\n\nmodule.exports = _;\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/errors.js":"var _ = require('./utils');\nvar errors = module.exports;\n\nvar canCapture = (typeof Error.captureStackTrace === 'function');\nvar canStack = !!(new Error()).stack;\n\nfunction ErrorAbstract(msg, constructor, metadata) {\n  this.message = msg;\n\n  Error.call(this, this.message);\n\n  if (canCapture) {\n    Error.captureStackTrace(this, constructor);\n  }\n  else if (canStack) {\n    this.stack = (new Error()).stack;\n  }\n  else {\n    this.stack = '';\n  }\n\n  if (metadata) {\n    _.assign(this, metadata);\n\n    this.toString = function () {\n      return msg + ' :: ' + JSON.stringify(metadata);\n    };\n\n    this.toJSON = function () {\n      return _.assign({\n        msg: msg\n      }, metadata);\n    };\n  }\n}\nerrors._Abstract = ErrorAbstract;\n_.inherits(ErrorAbstract, Error);\n\n/**\n * Connection Error\n * @param {String} [msg] - An error message that will probably end up in a log.\n */\nerrors.ConnectionFault = function ConnectionFault(msg) {\n  ErrorAbstract.call(this, msg || 'Connection Failure', errors.ConnectionFault);\n};\n_.inherits(errors.ConnectionFault, ErrorAbstract);\n\n/**\n * No Living Connections\n * @param {String} [msg] - An error message that will probably end up in a log.\n */\nerrors.NoConnections = function NoConnections(msg) {\n  ErrorAbstract.call(this, msg || 'No Living connections', errors.NoConnections);\n};\n_.inherits(errors.NoConnections, ErrorAbstract);\n\n/**\n * Generic Error\n * @param {String} [msg] - An error message that will probably end up in a log.\n */\nerrors.Generic = function Generic(msg, metadata) {\n  ErrorAbstract.call(this, msg || 'Generic Error', errors.Generic, metadata);\n};\n_.inherits(errors.Generic, ErrorAbstract);\n\n/**\n * Request Timeout Error\n * @param {String} [msg] - An error message that will probably end up in a log.\n */\nerrors.RequestTimeout = function RequestTimeout(msg) {\n  ErrorAbstract.call(this, msg || 'Request Timeout', errors.RequestTimeout);\n};\n_.inherits(errors.RequestTimeout, ErrorAbstract);\n\n\n/**\n * Request Body could not be parsed\n * @param {String} [msg] - An error message that will probably end up in a log.\n */\nerrors.Serialization = function Serialization(msg) {\n  ErrorAbstract.call(this, msg || 'Unable to parse/serialize body', errors.Serialization);\n};\n_.inherits(errors.Serialization, ErrorAbstract);\n\n\n/**\n * Thrown when a browser compatability issue is detected (cough, IE, cough)\n */\nerrors.RequestTypeError = function RequestTypeError(feature) {\n  ErrorAbstract.call(this, 'Cross-domain AJAX requests ' + feature + ' are not supported', errors.RequestTypeError);\n};\n_.inherits(errors.RequestTypeError, ErrorAbstract);\n\nvar statusCodes = [\n  [300, 'Multiple Choices'],\n  [301, 'Moved Permanently'],\n  [302, 'Found'],\n  [303, 'See Other'],\n  [304, 'Not Modified'],\n  [305, 'Use Proxy'],\n  [307, 'Temporary Redirect'],\n  [308, 'Permanent Redirect'],\n  [400, 'Bad Request'],\n  [401, 'Authentication Exception'],\n  [402, 'Payment Required'],\n  [403, ['Authorization Exception', 'Forbidden']],\n  [404, 'Not Found'],\n  [405, 'Method Not Allowed'],\n  [406, 'Not Acceptable'],\n  [407, 'Proxy Authentication Required'],\n  [408, 'Request Timeout'],\n  [409, 'Conflict'],\n  [410, 'Gone'],\n  [411, 'Length Required'],\n  [412, 'Precondition Failed'],\n  [413, 'Request Entity Too Large'],\n  [414, 'Request URIToo Long'],\n  [415, 'Unsupported Media Type'],\n  [416, 'Requested Range Not Satisfiable'],\n  [417, 'Expectation Failed'],\n  [418, 'Im ATeapot'],\n  [421, 'Too Many Connections From This IP'],\n  [426, 'Upgrade Required'],\n  [429, 'Too Many Requests'],\n  [450, 'Blocked By Windows Parental Controls'],\n  [494, 'Request Header Too Large'],\n  [497, 'HTTPTo HTTPS'],\n  [499, 'Client Closed Request'],\n  [500, 'Internal Server Error'],\n  [501, 'Not Implemented'],\n  [502, 'Bad Gateway'],\n  [503, 'Service Unavailable'],\n  [504, 'Gateway Timeout'],\n  [505, 'HTTPVersion Not Supported'],\n  [506, 'Variant Also Negotiates'],\n  [510, 'Not Extended']\n];\n\n_.each(statusCodes, function createStatusCodeError(tuple) {\n  var status = tuple[0];\n  var names = tuple[1];\n  var allNames = [].concat(names, status);\n  var primaryName = allNames[0];\n  var className = _.studlyCase(primaryName);\n  allNames = _.uniq(allNames.concat(className));\n\n  function StatusCodeError(msg, metadata) {\n    this.status = status;\n    this.displayName = className;\n\n    var esErrObject = null;\n    if (_.isPlainObject(msg)) {\n      esErrObject = msg;\n      msg = null;\n    }\n\n    if (!esErrObject) {\n      // errors from es now come in two forms, an error string < 2.0 and\n      // an object >= 2.0\n      // TODO: remove after dropping support for < 2.0\n      ErrorAbstract.call(this, msg || primaryName, StatusCodeError, metadata);\n      return this;\n    }\n\n    msg = [].concat(esErrObject.root_cause || []).reduce(function (memo, cause) {\n      if (memo) memo += ' (and) ';\n\n      memo += '[' + cause.type + '] ' + cause.reason;\n\n      var extraData = _.omit(cause, ['type', 'reason']);\n      if (_.size(extraData)) {\n        memo += ', with ' + prettyPrint(extraData);\n      }\n\n      return memo;\n    }, '');\n\n    if (!msg) {\n      if (esErrObject.type) msg += '[' + esErrObject.type + '] ';\n      if (esErrObject.reason) msg += esErrObject.reason;\n    }\n\n    ErrorAbstract.call(this, msg || primaryName, StatusCodeError, metadata);\n    return this;\n  }\n  _.inherits(StatusCodeError, ErrorAbstract);\n\n  allNames.forEach(function (name) {\n    errors[name] = StatusCodeError;\n  });\n});\n\n\nfunction prettyPrint(data) {\n  const path = []\n  return (function print(v) {\n    if (typeof v === 'object') {\n      if (path.indexOf(v) > -1) return '[circular]'\n      path.push(v)\n      try {\n        return '{ ' + _.map(v, function (subv, name) {\n          return name + '=' + print(subv)\n        }).join(' & ') + ' }'\n      } finally {\n        path.pop()\n      }\n    } else {\n      return JSON.stringify(v)\n    }\n  }(data))\n}\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/host.js":"/**\n * Class to wrap URLS, formatting them and maintaining their separate details\n * @type {[type]}\n */\nmodule.exports = Host;\n\nvar url = require('url');\nvar qs = require('querystring');\nvar _ = require('./utils');\n\nvar startsWithProtocolRE = /^([a-z]+:)?\\/\\//;\nvar defaultProto = 'http:';\nvar btoa;\n\nif (typeof window !== 'undefined' && typeof window.location !== 'undefined') {\n  defaultProto = window.location.protocol;\n  btoa = window.btoa;\n}\n\nbtoa = btoa || function (data) {\n  return (new Buffer(data, 'utf8')).toString('base64');\n};\n\nvar urlParseFields = [\n  'protocol', 'hostname', 'pathname', 'port', 'auth', 'query'\n];\n\nvar simplify = ['host', 'path'];\n\nvar sslDefaults = {\n  pfx: null,\n  key: null,\n  passphrase: null,\n  cert: null,\n  ca: null,\n  ciphers: null,\n  rejectUnauthorized: false,\n  secureProtocol: null\n};\n\n// simple reference used when formatting as a url\n// and defines when parsing from a string\nHost.defaultPorts = {\n  http: 80,\n  https: 443\n};\n\nfunction Host(config, globalConfig) {\n  config = _.clone(config || {});\n  globalConfig = globalConfig || {};\n\n  // defaults\n  this.protocol = 'http';\n  this.host = 'localhost';\n  this.path = '';\n  this.port = 9200;\n  this.query = null;\n  this.headers = null;\n  this.suggestCompression = !!globalConfig.suggestCompression;\n\n  this.ssl = _.defaults({}, config.ssl || {}, globalConfig.ssl || {}, sslDefaults);\n\n  if (typeof config === 'string') {\n    var firstColon = config.indexOf(':');\n    var firstSlash = config.indexOf('/');\n    var noSlash = firstSlash === -1;\n    var portNoPath = firstColon > -1 && noSlash;\n    var portWithPath = !portNoPath && firstColon < firstSlash;\n    if ((noSlash || portNoPath || portWithPath) && !startsWithProtocolRE.test(config)) {\n      config = defaultProto + '//' + config;\n    }\n    config = _.pick(url.parse(config, false, true), urlParseFields);\n    // default logic for the port is to use 9200 for the default. When a string is specified though,\n    // we will use the default from the protocol of the string.\n    if (!config.port) {\n      var proto = config.protocol || 'http';\n      if (proto.charAt(proto.length - 1) === ':') {\n        proto = proto.substring(0, proto.length - 1);\n      }\n      if (Host.defaultPorts[proto]) {\n        config.port = Host.defaultPorts[proto];\n      }\n    }\n  }\n\n  if (_.isObject(config)) {\n    // move hostname/portname to host/port semi-intelligently.\n    _.each(simplify, function (to) {\n      var from = to + 'name';\n      if (config[from] && config[to]) {\n        if (config[to].indexOf(config[from]) === 0) {\n          config[to] = config[from];\n        }\n      } else if (config[from]) {\n        config[to] = config[from];\n      }\n      delete config[from];\n    });\n  } else {\n    config = {};\n  }\n\n  if (!config.auth && globalConfig.httpAuth) {\n    config.auth = globalConfig.httpAuth\n  }\n\n  if (config.auth) {\n    config.headers = config.headers || {};\n    config.headers.Authorization = 'Basic ' + btoa(config.auth);\n    delete config.auth;\n  }\n\n  _.forOwn(config, _.bind(function (val, prop) {\n    if (val != null) this[prop] = _.clone(val);\n  }, this));\n\n  // make sure the query string is parsed\n  if (this.query === null) {\n    // majority case\n    this.query = {};\n  } else if (!_.isPlainObject(this.query)) {\n    this.query = qs.parse(this.query);\n  }\n\n  // make sure that the port is a number\n  if (_.isNumeric(this.port)) {\n    this.port = parseInt(this.port, 10);\n  } else {\n    this.port = 9200;\n  }\n\n  // make sure the path starts with a leading slash\n  if (this.path === '/') {\n    this.path = '';\n  } else if (this.path && this.path.charAt(0) !== '/') {\n    this.path = '/' + (this.path || '');\n  }\n\n  // strip trailing ':' on the protocol (when config comes from url.parse)\n  if (this.protocol.substr(-1) === ':') {\n    this.protocol = this.protocol.substring(0, this.protocol.length - 1);\n  }\n}\n\nHost.prototype.makeUrl = function (params) {\n  params = params || {};\n  // build the port\n  var port = '';\n  if (this.port !== Host.defaultPorts[this.protocol]) {\n    // add an actual port\n    port = ':' + this.port;\n  }\n\n  // build the path\n  var path = '' + (this.path || '') + (params.path || '');\n\n  // if path doesn't start with '/' add it.\n  if (path.charAt(0) !== '/') {\n    path = '/' + path;\n  }\n\n  // build the query string\n  var query = qs.stringify(this.getQuery(params.query));\n\n  if (this.host) {\n    return this.protocol + '://' + this.host + port + path + (query ? '?' + query : '');\n  } else {\n    return path + (query ? '?' + query : '');\n  }\n};\n\nfunction objectPropertyGetter(prop, preOverride) {\n  return function (overrides) {\n    if (preOverride) {\n      overrides = preOverride.call(this, overrides);\n    }\n\n    var obj = this[prop];\n    if (!obj && !overrides) {\n      return null;\n    }\n\n    if (overrides) {\n      obj = _.assign({}, obj, overrides);\n    }\n\n    return _.size(obj) ? obj : null;\n  };\n}\n\nHost.prototype.getHeaders = objectPropertyGetter('headers', function (overrides) {\n  if (!this.suggestCompression) {\n    return overrides;\n  }\n\n  return _.defaults(overrides || {}, {\n    'Accept-Encoding': 'gzip,deflate'\n  });\n});\n\nHost.prototype.getQuery = objectPropertyGetter('query', function (query) {\n  return typeof query === 'string' ? qs.parse(query) : query;\n});\n\nHost.prototype.toString = function () {\n  return this.makeUrl();\n};\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/transport/sniff_on_connection_fault.js":"var _ = require('../utils');\n\n\n/**\n * Patch the transport's connection pool to schedule a sniff after a connection fails.\n * When a connection fails for the first time it will schedule a sniff 1 second in the\n * future, and increase the timeout based on the deadTimeout algorithm chosen by the\n * connectionPool, and the number of times the sniff has failed.\n *\n * @param  {Transport} transport - the transport that will be using this behavior\n * @return {undefined}\n */\nmodule.exports = function setupSniffOnConnectionFault(transport) {\n  var failures = 0;\n  var pool = transport.connectionPool;\n  var originalOnDied = pool._onConnectionDied;\n\n  // do the actual sniff, if the sniff is unable to\n  // connect to a node this function will be called again by the connectionPool\n  var work = function () {\n    work.timerId = transport._timeout(work.timerId);\n    transport.sniff();\n  };\n\n  // create a function that will count down to a\n  // point n milliseconds into the future\n  var countdownTo = function (ms) {\n    var start = _.now();\n    return function () {\n      return start - ms;\n    };\n  };\n\n  // overwrite the function, but still call it\n  pool._onConnectionDied = function (connection, wasAlreadyDead) {\n    var ret = originalOnDied.call(pool, connection, wasAlreadyDead);\n\n    // clear the failures if this is the first failure we have seen\n    failures = work.timerId ? failures + 1 : 0;\n\n    var ms = pool.calcDeadTimeout(failures, 1000);\n\n    if (work.timerId && ms < work.timerId && work.countdown()) {\n      // clear the timer\n      work.timerId = transport._timeout(work.timerId);\n    }\n\n    if (!work.timerId) {\n      work.timerId = transport._timeout(work, ms);\n      work.countdown = countdownTo(ms);\n    }\n\n    return ret;\n  };\n\n  pool._onConnectionDied.restore = function () {\n    pool._onConnectionDied = originalOnDied;\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/transport/find_common_protocol.js":"var isEmpty = require('lodash').isEmpty;\n\nmodule.exports = function (hosts) {\n  if (isEmpty(hosts)) return false;\n\n  var commonProtocol = hosts.shift().protocol;\n  for (var i = 0; i < hosts.length; i++) {\n    if (commonProtocol !== hosts[i].protocol) {\n      return false;\n    }\n  }\n\n  return commonProtocol;\n}\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/connection_pool.js":"/**\n * Manager of connections to a node(s), capable of ensuring that connections are clear and living\n * before providing them to the application\n *\n * @class ConnectionPool\n * @constructor\n * @param {Object} config - The config object passed to the transport.\n */\n\nmodule.exports = ConnectionPool;\n\nvar _ = require('./utils');\nvar Log = require('./log');\n\nfunction ConnectionPool(config) {\n  config = config || {};\n  _.makeBoundMethods(this);\n\n  if (!config.log) {\n    this.log = new Log();\n    config.log = this.log;\n  } else {\n    this.log = config.log;\n  }\n\n  // we will need this when we create connections down the road\n  this._config = config;\n\n  // get the selector config var\n  this.selector = _.funcEnum(config, 'selector', ConnectionPool.selectors, ConnectionPool.defaultSelector);\n\n  // get the connection class\n  this.Connection = _.funcEnum(config, 'connectionClass', ConnectionPool.connectionClasses,\n    ConnectionPool.defaultConnectionClass);\n\n  // time that connections will wait before being revived\n  this.deadTimeout = config.hasOwnProperty('deadTimeout') ? config.deadTimeout : 60000;\n  this.maxDeadTimeout = config.hasOwnProperty('maxDeadTimeout') ? config.maxDeadTimeout : 18e5;\n  this.calcDeadTimeout = _.funcEnum(config, 'calcDeadTimeout', ConnectionPool.calcDeadTimeoutOptions, 'exponential');\n\n  // a map of connections to their \"id\" property, used when sniffing\n  this.index = {};\n\n  this._conns = {\n    alive: [],\n    dead: []\n  };\n\n  // information about timeouts for dead connections\n  this._timeouts = [];\n}\n\n// selector options\nConnectionPool.selectors = require('./selectors');\nConnectionPool.defaultSelector = 'roundRobin';\n\n// get the connection options\nConnectionPool.connectionClasses = require('./connectors');\nConnectionPool.defaultConnectionClass = ConnectionPool.connectionClasses._default;\ndelete ConnectionPool.connectionClasses._default;\n\n// the function that calculates timeouts based on attempts\nConnectionPool.calcDeadTimeoutOptions = {\n  flat: function (attempt, baseTimeout) {\n    return baseTimeout;\n  },\n  exponential: function (attempt, baseTimeout) {\n    return Math.min(baseTimeout * 2 * Math.pow(2, (attempt * 0.5 - 1)), this.maxDeadTimeout);\n  }\n};\n\n/**\n * Selects a connection from the list using the this.selector\n * Features:\n *  - detects if the selector is async or not\n *  - sync selectors should still return asynchronously\n *  - catches errors in sync selectors\n *  - automatically selects the first dead connection when there no living connections\n *\n * @param  {Function} cb [description]\n * @return {[type]}      [description]\n */\nConnectionPool.prototype.select = function (cb) {\n  if (this._conns.alive.length) {\n    if (this.selector.length > 1) {\n      this.selector(this._conns.alive, cb);\n    } else {\n      try {\n        _.nextTick(cb, void 0, this.selector(this._conns.alive));\n      } catch (e) {\n        cb(e);\n      }\n    }\n  } else if (this._timeouts.length) {\n    this._selectDeadConnection(cb);\n  } else {\n    _.nextTick(cb, void 0);\n  }\n};\n\n/**\n * Handler for the \"set status\" event emitted but the connections. It will move\n * the connection to it's proper connection list (unless it was closed).\n *\n * @param  {String} status - the connection's new status\n * @param  {String} oldStatus - the connection's old status\n * @param  {ConnectionAbstract} connection - the connection object itself\n */\nConnectionPool.prototype.onStatusSet = _.handler(function (status, oldStatus, connection) {\n  var index;\n\n  var died = (status === 'dead');\n  var wasAlreadyDead = (died && oldStatus === 'dead');\n  var revived = (!died && oldStatus === 'dead');\n  var noChange = (oldStatus === status);\n  var from = this._conns[oldStatus];\n  var to = this._conns[status];\n\n  if (noChange && !died) {\n    return true;\n  }\n\n  if (from !== to) {\n    if (_.isArray(from)) {\n      index = from.indexOf(connection);\n      if (index !== -1) {\n        from.splice(index, 1);\n      }\n    }\n\n    if (_.isArray(to)) {\n      index = to.indexOf(connection);\n      if (index === -1) {\n        to.push(connection);\n      }\n    }\n  }\n\n  if (died) {\n    this._onConnectionDied(connection, wasAlreadyDead);\n  }\n\n  if (revived) {\n    this._onConnectionRevived(connection);\n  }\n});\n\n/**\n * Handler used to clear the times created when a connection dies\n * @param  {ConnectionAbstract} connection\n */\nConnectionPool.prototype._onConnectionRevived = function (connection) {\n  var timeout;\n  for (var i = 0; i < this._timeouts.length; i++) {\n    if (this._timeouts[i].conn === connection) {\n      timeout = this._timeouts[i];\n      if (timeout.id) {\n        clearTimeout(timeout.id);\n      }\n      this._timeouts.splice(i, 1);\n      break;\n    }\n  }\n};\n\n/**\n * Handler used to update or create a timeout for the connection which has died\n * @param  {ConnectionAbstract} connection\n * @param  {Boolean} alreadyWasDead - If the connection was preivously dead this must be set to true\n */\nConnectionPool.prototype._onConnectionDied = function (connection, alreadyWasDead) {\n  var timeout;\n  if (alreadyWasDead) {\n    for (var i = 0; i < this._timeouts.length; i++) {\n      if (this._timeouts[i].conn === connection) {\n        timeout = this._timeouts[i];\n        break;\n      }\n    }\n  } else {\n    timeout = {\n      conn: connection,\n      attempt: 0,\n      revive: function (cb) {\n        timeout.attempt++;\n        connection.ping(function (err) {\n          connection.setStatus(err ? 'dead' : 'alive');\n          if (cb && typeof cb === 'function') {\n            cb(err);\n          }\n        });\n      }\n    };\n    this._timeouts.push(timeout);\n  }\n\n  if (timeout.id) {\n    clearTimeout(timeout.id);\n  }\n\n  var ms = this.calcDeadTimeout(timeout.attempt, this.deadTimeout);\n  timeout.id = setTimeout(timeout.revive, ms);\n  timeout.runAt = _.now() + ms;\n};\n\nConnectionPool.prototype._selectDeadConnection = function (cb) {\n  var orderedTimeouts = _.sortBy(this._timeouts, 'runAt');\n  var log = this.log;\n\n  process.nextTick(function next() {\n    var timeout = orderedTimeouts.shift();\n    if (!timeout) {\n      cb(void 0);\n      return;\n    }\n\n    if (!timeout.conn) {\n      next();\n      return;\n    }\n\n    if (timeout.conn.status === 'dead') {\n      timeout.revive(function (err) {\n        if (err) {\n          log.warning('Unable to revive connection: ' + timeout.conn.id);\n          process.nextTick(next);\n        } else {\n          cb(void 0, timeout.conn);\n        }\n      });\n    } else {\n      cb(void 0, timeout.conn);\n    }\n  });\n};\n\n/**\n * Returns a random list of nodes from the living connections up to the limit.\n * If there are no living connections it will fall back to the dead connections.\n * If there are no dead connections it will return nothing.\n *\n * This is used for testing (when we just want the one existing node)\n * and sniffing, where using the selector to get all of the living connections\n * is not reasonable.\n *\n * @param {string} [status] - optional status of the connection to fetch\n * @param {Number} [limit] - optional limit on the number of connections to return\n */\nConnectionPool.prototype.getConnections = function (status, limit) {\n  var list;\n  if (status) {\n    list = this._conns[status];\n  } else {\n    list = this._conns[this._conns.alive.length ? 'alive' : 'dead'];\n  }\n\n  if (limit == null) {\n    return list.slice(0);\n  } else {\n    return _.shuffle(list).slice(0, limit);\n  }\n};\n\n/**\n * Add a single connection to the pool and change it's status to \"alive\".\n * The connection should inherit from ConnectionAbstract\n *\n * @param {ConnectionAbstract} connection - The connection to add\n */\nConnectionPool.prototype.addConnection = function (connection) {\n  if (!connection.id) {\n    connection.id = connection.host.toString();\n  }\n\n  if (!this.index[connection.id]) {\n    this.log.info('Adding connection to', connection.id);\n    this.index[connection.id] = connection;\n    connection.on('status set', this.bound.onStatusSet);\n    connection.setStatus('alive');\n  }\n};\n\n/**\n * Remove a connection from the pool, and set it's status to \"closed\".\n *\n * @param  {ConnectionAbstract} connection - The connection to remove/close\n */\nConnectionPool.prototype.removeConnection = function (connection) {\n  if (!connection.id) {\n    connection.id = connection.host.toString();\n  }\n\n  if (this.index[connection.id]) {\n    delete this.index[connection.id];\n    connection.setStatus('closed');\n    connection.removeListener('status set', this.bound.onStatusSet);\n  }\n};\n\n/**\n * Override the internal node list. All connections that are not in the new host\n * list are closed and removed. Non-unique hosts are ignored.\n *\n * @param {Host[]} hosts - An array of Host instances.\n */\nConnectionPool.prototype.setHosts = function (hosts) {\n  var connection;\n  var i;\n  var id;\n  var host;\n  var toRemove = _.clone(this.index);\n\n  for (i = 0; i < hosts.length; i++) {\n    host = hosts[i];\n    id = host.toString();\n    if (this.index[id]) {\n      delete toRemove[id];\n    } else {\n      connection = new this.Connection(host, this._config);\n      connection.id = id;\n      this.addConnection(connection);\n    }\n  }\n\n  var removeIds = _.keys(toRemove);\n  for (i = 0; i < removeIds.length; i++) {\n    this.removeConnection(this.index[removeIds[i]]);\n  }\n};\n\nConnectionPool.prototype.getAllHosts = function () {\n  return _.values(this.index).map(function (connection) {\n    return connection.host;\n  });\n};\n\n/**\n * Close the conncetion pool, as well as all of it's connections\n */\nConnectionPool.prototype.close = function () {\n  this.setHosts([]);\n};\nConnectionPool.prototype.empty = ConnectionPool.prototype.close;\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/log.js":"var _ = require('./utils');\nvar url = require('url');\nvar EventEmitter = require('events').EventEmitter;\n\n/**\n * Log bridge, which is an [EventEmitter](http://nodejs.org/api/events.html#events_class_events_eventemitter)\n * that sends events to one or more outputs/loggers. Setup these loggers by\n * specifying their config as the first argument, or by passing it to addOutput().\n *\n * @class Log\n * @uses Loggers.Stdio\n * @constructor\n * @param {object} config\n * @param {string|Object|ArrayOfStrings|ArrayOfObjects} config.log - Either the level\n *  to setup a single logger, a full config object for a logger, or an array of\n *  config objects to use for creating log outputs.\n * @param {string|array} config.log.level|config.log.levels - One or more keys in Log.levels (error, warning, etc.)\n * @param {string} config.log.type - The name of the logger to use for this output\n */\nfunction Log(config) {\n  config = config || {};\n  if (!config.log) return;\n\n  var i;\n  var outputs;\n\n  if (_.isArrayOfStrings(config.log)) {\n    outputs = [{\n      levels: config.log\n    }];\n  } else {\n    outputs = _.createArray(config.log, function (val) {\n      if (_.isPlainObject(val)) {\n        return val;\n      }\n      if (typeof val === 'string') {\n        return {\n          level: val\n        };\n      }\n    });\n  }\n\n  if (!outputs) {\n    throw new TypeError('Invalid logging output config. Expected either a log level, array of log levels, ' +\n      'a logger config object, or an array of logger config objects.');\n  }\n\n  for (i = 0; i < outputs.length; i++) {\n    this.addOutput(outputs[i]);\n  }\n}\n_.inherits(Log, EventEmitter);\n\nLog.loggers = require('./loggers');\n\nLog.prototype.close = function () {\n  this.emit('closing');\n  if (this.listenerCount()) {\n    console.error('Something is still listening for log events, but the logger is closing.'); // eslint-disable-line no-console\n    this.clearAllListeners();\n  }\n};\n\nif (EventEmitter.prototype.listenerCount) {\n  // If the event emitter implements it's own listenerCount method\n  // we don't need to (newer nodes do this).\n  Log.prototype.listenerCount = EventEmitter.prototype.listenerCount;\n}\nelse if (EventEmitter.listenerCount) {\n  // some versions of node expose EventEmitter::listenerCount\n  // which is more efficient the getting all listeners of a\n  // specific type\n  Log.prototype.listenerCount = function (event) {\n    return EventEmitter.listenerCount(this, event);\n  };\n}\nelse {\n  // all other versions of node expose a #listeners() method, which returns\n  // and array we have to count\n  Log.prototype.listenerCount = function (event) {\n    return this.listeners(event).length;\n  };\n}\n\n/**\n * Levels observed by the loggers, ordered by rank\n *\n * @property levels\n * @type Array\n * @static\n */\nLog.levels = [\n  /**\n   * Event fired for error level log entries\n   * @event error\n   * @param {Error} error - The error object to log\n   */\n  'error',\n  /**\n   * Event fired for \"warning\" level log entries, which usually represent things\n   * like correctly formatted error responses from ES (400, ...) and recoverable\n   * errors (one node unresponsive)\n   *\n   * @event warning\n   * @param {String} message - A message to be logged\n   */\n  'warning',\n  /**\n   * Event fired for \"info\" level log entries, which usually describe what a\n   * client is doing (sniffing etc)\n   *\n   * @event info\n   * @param {String} message - A message to be logged\n   */\n  'info',\n  /**\n   * Event fired for \"debug\" level log entries, which will describe requests sent,\n   * including their url (no data, response codes, or exec times)\n   *\n   * @event debug\n   * @param {String} message - A message to be logged\n   */\n  'debug',\n  /**\n   * Event fired for \"trace\" level log entries, which provide detailed information\n   * about each request made from a client, including reponse codes, execution times,\n   * and a full curl command that can be copied and pasted into a terminal\n   *\n   * @event trace\n   * @param {String} method method, , body, responseStatus, responseBody\n   * @param {String} url - The url the request was made to\n   * @param {String} body - The body of the request\n   * @param {Integer} responseStatus - The status code returned from the response\n   * @param {String} responseBody - The body of the response\n   */\n  'trace'\n];\n\n/**\n * Converts a log config value (string or array) to an array of level names which\n * it represents\n *\n * @method parseLevels\n * @static\n * @private\n * @param  {String|ArrayOfStrings} input - Cound be a string to specify the max\n *   level, or an array of exact levels\n * @return {Array} -\n */\nLog.parseLevels = function (input) {\n  switch (typeof input) {\n    case 'string':\n      var i = _.indexOf(Log.levels, input);\n      if (i >= 0) {\n        return Log.levels.slice(0, i + 1);\n      }\n    /* fall through */\n    case 'object':\n      if (_.isArray(input)) {\n        var valid = _.intersection(input, Log.levels);\n        if (valid.length === input.length) {\n          return valid;\n        }\n      }\n    /* fall through */\n    default:\n      throw new TypeError('invalid logging level ' + input + '. Expected zero or more of these options: ' +\n      Log.levels.join(', '));\n  }\n};\n\n/**\n * Combine the array-like param into a simple string\n *\n * @method join\n * @static\n * @private\n * @param  {*} arrayish - An array like object that can be itterated by _.each\n * @return {String} - The final string.\n */\nLog.join = function (arrayish) {\n  return _.map(arrayish, function (item) {\n    if (_.isPlainObject(item)) {\n      return JSON.stringify(item, null, 2) + '\\n';\n    } else {\n      return item.toString();\n    }\n  }).join(' ');\n};\n\n/**\n * Create a new logger, based on the config.\n *\n * @method addOutput\n * @param {object} config - An object with config options for the logger.\n * @param {String} [config.type=stdio] - The name of an output/logger. Options\n *   can be found in the `src/loggers` directory.\n * @param {String|ArrayOfStrings} [config.level|config.levels=warning] - The levels to output\n *   to this logger, when an array is specified no levels other than the ones\n *   specified will be listened to. When a string is specified, that and all lower\n *   levels will be logged.\n * @return {Logger}\n */\nLog.prototype.addOutput = function (config) {\n  config = config || {};\n\n  // force \"levels\" key\n  config.levels = Log.parseLevels(config.levels || config.level || 'warning');\n  delete config.level;\n\n  var Logger = _.funcEnum(config, 'type', Log.loggers, process.browser ? 'console' : 'stdio');\n  return new Logger(this, config);\n};\n\n/**\n * Log an error\n *\n * @method error\n * @param  {Error|String} error  The Error to log\n * @return {Boolean} - True if any outputs accepted the message\n */\nLog.prototype.error = function (e) {\n  if (this.listenerCount('error')) {\n    return this.emit('error', e instanceof Error ? e : new Error(e));\n  }\n};\n\n\n/**\n * Log a warning message\n *\n * @method warning\n * @param  {*} msg* - Any amount of messages that will be joined before logged\n * @return {Boolean} - True if any outputs accepted the message\n */\nLog.prototype.warning = function (/* ...msg */) {\n  if (this.listenerCount('warning')) {\n    return this.emit('warning', Log.join(arguments));\n  }\n};\n\n\n/**\n * Log useful info about what's going on\n *\n * @method info\n * @param  {*} msg* - Any amount of messages that will be joined before logged\n * @return {Boolean} - True if any outputs accepted the message\n */\nLog.prototype.info = function (/* ...msg */) {\n  if (this.listenerCount('info')) {\n    return this.emit('info', Log.join(arguments));\n  }\n};\n\n/**\n * Log a debug level message\n *\n * @method debug\n * @param  {*} msg* - Any amount of messages that will be joined before logged\n * @return {Boolean} - True if any outputs accepted the message\n */\nLog.prototype.debug = function (/* ...msg */) {\n  if (this.listenerCount('debug')) {\n    return this.emit('debug', Log.join(arguments));\n  }\n};\n\n/**\n * Log a trace level message\n *\n * @method trace\n * @param {String} method - HTTP request method\n * @param {String|Object} requestUrl - URL requested. If the value is an object,\n *   it is expected to be the return value of Node's url.parse()\n * @param {String} body - The request's body\n * @param {String} responseBody - body returned from ES\n * @param {String} responseStatus - HTTP status code\n * @return {Boolean} - True if any outputs accepted the message\n */\nLog.prototype.trace = function (method, requestUrl, body, responseBody, responseStatus) {\n  if (this.listenerCount('trace')) {\n    return this.emit('trace', Log.normalizeTraceArgs(method, requestUrl, body, responseBody, responseStatus));\n  }\n};\n\nLog.normalizeTraceArgs = function (method, requestUrl, body, responseBody, responseStatus) {\n  if (typeof requestUrl === 'string') {\n    requestUrl = url.parse(requestUrl, true, true);\n  } else {\n    requestUrl = _.clone(requestUrl);\n    if (requestUrl.path) {\n      requestUrl.query = url.parse(requestUrl.path, true, false).query;\n    }\n    if (!requestUrl.pathname && requestUrl.path) {\n      requestUrl.pathname = requestUrl.path.split('?').shift();\n    }\n  }\n\n  delete requestUrl.auth;\n\n  return {\n    method: method,\n    url: url.format(requestUrl),\n    body: body,\n    status: responseStatus,\n    response: responseBody\n  };\n};\n\nmodule.exports = Log;\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/loggers/index.js":"module.exports = {\n  file: require('./file'),\n  stream: require('./stream'),\n  stdio: require('./stdio'),\n  tracer: require('./tracer')\n};\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/loggers/file.js":"/**\n * Logger that writes to a file\n *\n * @class Loggers.File\n * @extends StreamLogger\n * @constructor\n * @param {Object} config - The configuration for the Logger (See LoggerAbstract for generic options)\n * @param {String} config.path - The location to write\n * @param {Log} bridge - The object that triggers logging events, which we will record\n */\n\nmodule.exports = File;\n\nvar StreamLogger = require('./stream');\nvar _ = require('../utils');\nvar fs = require('fs');\n\nfunction File(log, config) {\n  config = config || {};\n\n  // we should probably through an error if they don't support a path\n  this.path = config.path || 'elasticsearch.log';\n\n  // yahoo!\n  config.stream = fs.createWriteStream(this.path, {\n    flags: 'a',\n    encoding: 'utf8'\n  });\n\n  StreamLogger.call(this, log, config);\n}\n_.inherits(File, StreamLogger);\n\nFile.prototype.onProcessExit = _.handler(function () {\n  var toWrite = _.getUnwrittenFromStream(this.stream);\n  if (toWrite) {\n    fs.appendFileSync(this.path, toWrite);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/loggers/stream.js":"/**\n * Logger that writes to a file\n *\n * @class Loggers.Stream\n * @extends LoggerAbstract\n * @constructor\n * @see LoggerAbstract\n * @param {Object} config - The configuration for the Logger (See LoggerAbstract for generic options)\n * @param {String} config.path - The location to write\n * @param {Log} bridge - The object that triggers logging events, which we will record\n */\n\nmodule.exports = Stream;\n\nvar LoggerAbstract = require('../logger');\nvar _ = require('../utils');\n\nfunction Stream(log, config) {\n  LoggerAbstract.call(this, log, config);\n\n  if (config.stream && config.stream.write && config.stream.end) {\n    this.stream = config.stream;\n  } else {\n    throw new TypeError('Invalid stream, use an instance of stream.Writable');\n  }\n\n  process.once('exit', this.bound.onProcessExit);\n}\n_.inherits(Stream, LoggerAbstract);\n\nStream.prototype.cleanUpListeners = _.handler(function () {\n  process.removeListener('exit', this.bound.onProcessExit);\n  LoggerAbstract.prototype.cleanUpListeners.call(this);\n});\n\n// flush the write buffer to stderr synchronously\nStream.prototype.onProcessExit = _.handler(function () {\n  // process is dying, lets manually flush the buffer synchronously to stderr.\n  var unwritten = _.getUnwrittenFromStream(this.stream);\n  if (unwritten) {\n    console.error('Log stream did not get to finish writing. Flushing to stderr');\n    console.error(unwritten);\n  }\n});\n\nStream.prototype.write = function (label, message) {\n  this.stream.write(this.format(label, message), 'utf8');\n};\n\nStream.prototype.close = function () {\n  this.stream.end();\n};\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/logger.js":"var _ = require('./utils');\n\n/**\n * Abstract class providing common functionality to loggers\n * @param {[type]} log [description]\n * @param {[type]} config [description]\n */\nfunction LoggerAbstract(log, config) {\n  this.log = log;\n  this.listeningLevels = [];\n\n  _.makeBoundMethods(this);\n\n  // when the log closes, remove our event listeners\n  this.log.once('closing', this.bound.cleanUpListeners);\n\n  this.setupListeners(config.levels);\n}\n\nfunction padNumToTen(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n/**\n * Create a timestamp string used in the format function. Defers to Log.timestamp if it is defined,\n * Also, feel free to override this at the logger level.\n * @return {String} - Timestamp in ISO 8601 UTC\n */\nLoggerAbstract.prototype.timestamp = function () {\n  var d = new Date();\n  return d.getUTCFullYear() + '-' +\n    padNumToTen(d.getUTCMonth() + 1) + '-' +\n    padNumToTen(d.getUTCDate()) + 'T' +\n    padNumToTen(d.getUTCHours()) + ':' +\n    padNumToTen(d.getUTCMinutes()) + ':' +\n    padNumToTen(d.getUTCSeconds()) + 'Z';\n};\n\nfunction indent(text, spaces) {\n  var space = _.repeat(' ', spaces || 2);\n  return (text || '').split(/\\r?\\n/).map(function (line) {\n    return space + line;\n  }).join('\\n');\n}\n\nLoggerAbstract.prototype.format = function (label, message) {\n  return label + ': ' + this.timestamp() + '\\n' + indent(message) + '\\n\\n';\n};\n\nLoggerAbstract.prototype.write = function () {\n  throw new Error('This should be overwritten by the logger');\n};\n\n/**\n * Clear the current event listeners and then re-listen for events based on the level specified\n *\n * @method setupListeners\n * @private\n * @param  {Integer} level - The max log level that this logger should listen to\n * @return {undefined}\n */\nLoggerAbstract.prototype.setupListeners = function (levels) {\n  this.cleanUpListeners();\n\n  this.listeningLevels = [];\n\n  _.each(levels, _.bind(function (level) {\n    var fnName = 'on' + _.ucfirst(level);\n    if (this.bound[fnName]) {\n      this.listeningLevels.push(level);\n      this.log.on(level, this.bound[fnName]);\n    } else {\n      throw new Error('Unable to listen for level \"' + level + '\"');\n    }\n  }, this));\n};\n\n/**\n * Clear the current event listeners\n *\n * @method cleanUpListeners\n * @private\n * @return {undefined}\n */\nLoggerAbstract.prototype.cleanUpListeners = _.handler(function () {\n  _.each(this.listeningLevels, _.bind(function (level) {\n    this.log.removeListener(level, this.bound['on' + _.ucfirst(level)]);\n  }, this));\n});\n\n/**\n * Handler for the logs \"error\" event\n *\n * @method onError\n * @private\n * @param  {Error} e - The Error object to log\n * @return {undefined}\n */\nLoggerAbstract.prototype.onError = _.handler(function (e) {\n  this.write((e.name === 'Error' ? 'ERROR' : e.name), e.stack);\n});\n\n/**\n * Handler for the logs \"warning\" event\n *\n * @method onWarning\n * @private\n * @param  {String} msg - The message to be logged\n * @return {undefined}\n */\nLoggerAbstract.prototype.onWarning = _.handler(function (msg) {\n  this.write('WARNING', msg);\n});\n\n/**\n * Handler for the logs \"info\" event\n *\n * @method onInfo\n * @private\n * @param  {String} msg - The message to be logged\n * @return {undefined}\n */\nLoggerAbstract.prototype.onInfo = _.handler(function (msg) {\n  this.write('INFO', msg);\n});\n\n/**\n * Handler for the logs \"debug\" event\n *\n * @method onDebug\n * @private\n * @param  {String} msg - The message to be logged\n * @return {undefined}\n */\nLoggerAbstract.prototype.onDebug = _.handler(function (msg) {\n  this.write('DEBUG', msg);\n});\n\n/**\n * Handler for the logs \"trace\" event\n *\n * @method onTrace\n * @private\n * @param  {String} msg - The message to be logged\n * @return {undefined}\n */\nLoggerAbstract.prototype.onTrace = _.handler(function (requestDetails) {\n  this.write('TRACE', this._formatTraceMessage(requestDetails));\n});\n\nLoggerAbstract.prototype._formatTraceMessage = function (req) {\n  return '-> ' + req.method + ' ' + req.url + '\\n' +\n    this._prettyJson(req.body) + '\\n' +\n    '<- ' + req.status + '\\n' +\n    this._prettyJson(req.response);\n/*\n-> GET https://sldfkjsdlfksjdf:9200/slsdkfjlxckvxhclks?sdlkj=sdlfkje\n{\n  asdflksjdf\n}\n\n<- 502\n{\n  sldfksjdlf\n}\n*/\n};\n\nLoggerAbstract.prototype._prettyJson = function (body) {\n  try {\n    if (typeof body === 'string') {\n      body = JSON.parse(body);\n    }\n    return JSON.stringify(body, null, '  ').replace(/'/g, '\\\\u0027');\n  } catch (e) {\n    return typeof body === 'string' ? body : '';\n  }\n};\n\nmodule.exports = LoggerAbstract;\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/loggers/stdio.js":"/**\n * Special version of the Stream logger, which logs errors and warnings to stderr and all other\n * levels to stdout.\n *\n * @class Loggers.Stdio\n * @extends LoggerAbstract\n * @constructor\n * @param {Object} config - The configuration for the Logger\n * @param {string} config.level - The highest log level for this logger to output.\n * @param {Log} bridge - The object that triggers logging events, which we will record\n */\n\nmodule.exports = Stdio;\n\nvar chalk = require('chalk');\n// let the user define if they want color in the client config.\nchalk.enabled = true;\n\nvar LoggerAbstract = require('../logger');\nvar _ = require('../utils');\n\nvar defaultColors = {\n  error: chalk.red.bold,\n  warning: chalk.yellow.bold,\n  info: chalk.cyan.bold,\n  debug: chalk.magenta.bold,\n  trace: chalk.white.bold\n};\n\nfunction Stdio(log, config) {\n  LoggerAbstract.call(this, log, config);\n\n  // config/state\n  this.color = !!(_.has(config, 'color') ? config.color : chalk.supportsColor);\n\n  this.colors = _.defaults(config.colors || {}, defaultColors);\n}\n\n_.inherits(Stdio, LoggerAbstract);\n\n/**\n * Sends output to a stream, does some formatting first\n *\n * @method write\n * @private\n * @param  {WritableStream} to - The stream that should receive this message\n * @param  {String} label - The text that should be used at the beginning the message\n * @param  {function} colorize - A function that receives a string and returned a colored version of it\n * @param  {*} what - The message to log\n * @return {undefined}\n */\nStdio.prototype.write = function (label, message, to, colorize) {\n  label = 'Elasticsearch ' + label;\n  if (this.color) {\n    label = colorize(label);\n  }\n  to.write(this.format(label, message));\n};\n\n/**\n * Handler for the bridges \"error\" event\n *\n * @method onError\n * @private\n * @param  {Error} e - The Error object to log\n * @return {undefined}\n */\nStdio.prototype.onError = _.handler(function (e) {\n  this.write(e.name === 'Error' ? 'ERROR' : e.name, e.stack, process.stderr, this.colors.error);\n});\n\n/**\n * Handler for the bridges \"warning\" event\n *\n * @method onWarning\n * @private\n * @param  {String} msg - The message to be logged\n * @return {undefined}\n */\nStdio.prototype.onWarning = _.handler(function (msg) {\n  this.write('WARNING', msg, process.stderr, this.colors.warning);\n});\n\n/**\n * Handler for the bridges \"info\" event\n *\n * @method onInfo\n * @private\n * @param  {String} msg - The message to be logged\n * @return {undefined}\n */\nStdio.prototype.onInfo = _.handler(function (msg) {\n  this.write('INFO', msg, process.stdout, this.colors.info);\n});\n\n/**\n * Handler for the bridges \"debug\" event\n *\n * @method onDebug\n * @private\n * @param  {String} msg - The message to be logged\n * @return {undefined}\n */\nStdio.prototype.onDebug = _.handler(function (msg) {\n  this.write('DEBUG', msg, process.stdout, this.colors.debug);\n});\n\n/**\n * Handler for the bridges \"trace\" event\n *\n * @method onTrace\n * @private\n * @return {undefined}\n */\nStdio.prototype.onTrace = _.handler(function (message) {\n  this.write('TRACE', this._formatTraceMessage(message), process.stdout, this.colors.trace);\n});\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/loggers/tracer.js":"/**\n * Logger that writes to a file, but the file can be executed as a shell script,\n * meaning everything but the curl commands are commented out\n *\n * @class Loggers.Tracer\n * @extends StreamLogger\n * @constructor\n * @param {Object} config - The configuration for the Logger (See LoggerAbstract for generic options)\n * @param {String} config.path - The location to write\n * @param {Log} bridge - The object that triggers logging events, which we will record\n */\n\nmodule.exports = Tracer;\n\nvar StreamLogger = require('./stream');\nvar fs = require('fs');\nvar _ = require('../utils');\nvar url = require('url');\n\nfunction Tracer(log, config) {\n  if (config.path === false) {\n    config.stream = process.stderr;\n  } else {\n    config.stream = fs.createWriteStream(config.path || 'elasticsearch-tracer.log');\n  }\n\n  this.curlHost = config.curlHost || 'localhost';\n  this.curlPort = config.curlPort || 9200;\n\n  StreamLogger.call(this, log, config);\n}\n_.inherits(Tracer, StreamLogger);\n\nvar usefulUrlFields = ['protocol', 'slashes', 'port', 'hostname', 'pathname', 'query'];\n\nTracer.prototype._formatTraceMessage = function (req) {\n  var reqUrl = _.pick(url.parse(req.url, true, false), usefulUrlFields);\n\n  var originalHost = url.format(_.pick(reqUrl, 'protocol', 'hostname', 'port'));\n\n  reqUrl.port = this.curlPort;\n  reqUrl.hostname = this.curlHost;\n  reqUrl.query = _.defaults(reqUrl.query || {}, { pretty: true });\n\n  /* jshint quotmark: double */\n  var curlCall =\n    '# ' + originalHost + '\\n' +\n    \"curl '\" + url.format(reqUrl).replace(/'/g, \"\\\\'\") + \"' -X\" + req.method.toUpperCase() +\n    (req.body ? \" -d '\" + this._prettyJson(req.body) + \"'\" : '');\n  /* jshint quotmark: single */\n\n  return {\n    curl: curlCall,\n    msg: '-> ' + req.status + '\\n' + req.response\n  };\n};\n\nfunction comment(str) {\n  return _.map(str.split(/\\r?\\n/g), function (line) {\n    return '# ' + line;\n  }).join('\\n');\n}\n\nTracer.prototype.write = function (label, msg) {\n  var lead = comment(label + ': ' + this.timestamp()) + '\\n';\n  if (typeof msg === 'string') {\n    this.stream.write(lead + comment(msg) + '\\n\\n', 'utf8');\n  } else {\n    this.stream.write(lead + msg.curl + '\\n' + comment(msg.msg) + '\\n\\n', 'utf8');\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/selectors/index.js":"module.exports = {\n  random: require('./random'),\n  roundRobin: require('./round_robin')\n};\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/selectors/random.js":"/**\n * Selects a connection randomly\n *\n * @module selectors\n * @type {Function}\n * @param {Array} connection - The list of connections to choose from\n * @return {Connection} - The selected connection\n */\nmodule.exports = function RandomSelector(connections) {\n  return connections[Math.floor(Math.random() * connections.length)];\n};\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/selectors/round_robin.js":"/**\n * Selects a connection the simplest way possible, Round Robin\n *\n * @module selectors\n * @type {Function}\n * @param {Array} connections - The list of connections that this selector needs to choose from\n * @return {Connection} - The selected connection\n */\nmodule.exports = function (connections) {\n  var connection = connections[0];\n  connections.push(connections.shift());\n  return connection;\n};\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/connectors/index.js":"module.exports = {\n  http: require('./http'),\n  _default: 'http'\n};\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/connectors/http.js":"/**\n * A Connection that operates using Node's http module\n *\n * @param client {Client} - The Client that this class belongs to\n * @param config {Object} - Configuration options\n * @param [config.protocol=http:] {String} - The HTTP protocol that this connection will use, can be set to https:\n * @class HttpConnector\n */\nmodule.exports = HttpConnector;\n\nvar handles = {\n  http: require('http'),\n  https: require('https')\n};\nvar _ = require('../utils');\nvar qs = require('querystring');\nvar KeepAliveAgent = require('./_keep_alive_agent');\nvar ConnectionAbstract = require('../connection');\nvar zlib = require('zlib');\n\n/**\n * Connector used to talk to an elasticsearch node via HTTP\n *\n * @param {Host} host - The host object representing the elasticsearch node we will be talking to\n * @param {Object} [config] - Configuration options (extends the configuration options for ConnectionAbstract)\n * @param {Number} [config.concurrency=10] - the maximum number of sockets that will be opened to this node\n */\nfunction HttpConnector(host, config) {\n  ConnectionAbstract.call(this, host, config);\n\n  this.hand = handles[this.host.protocol];\n  if (!this.hand) {\n    throw new TypeError('Invalid protocol \"' + this.host.protocol +\n      '\", expected one of ' + _.keys(handles).join(', '));\n  }\n\n  this.useSsl = this.host.protocol === 'https';\n\n  config = _.defaults(config || {}, {\n    keepAlive: true,\n    minSockets: 10,\n    // 10 makes sense but 11 actually keeps 10 sockets around\n    // https://github.com/mikeal/forever-agent/issues/8\n    maxSockets: 11\n  });\n\n  this.agent = config.createNodeAgent ? config.createNodeAgent(this, config) : this.createAgent(config);\n}\n_.inherits(HttpConnector, ConnectionAbstract);\n\nHttpConnector.prototype.onStatusSet = _.handler(function (status) {\n  if (status === 'closed') {\n    var agent = this.agent;\n    var toRemove = [];\n    var collectSockets = function (sockets, host) {\n      _.each(sockets, function (s) {\n        if (s) toRemove.push([host, s]);\n      });\n    };\n\n    agent.minSockets = agent.maxSockets = 0;\n    agent.requests = {};\n\n    _.each(agent.sockets, collectSockets);\n    _.each(agent.freeSockets, collectSockets);\n    _.each(toRemove, function (args) {\n      var host = args[0], socket = args[1];\n      agent.removeSocket(socket, host);\n      socket.destroy();\n    });\n  }\n});\n\nHttpConnector.prototype.createAgent = function (config) {\n  var Agent = this.hand.Agent; // the class\n\n  if (config.forever) {\n    config.keepAlive = config.forever;\n  }\n\n  if (config.keepAlive) {\n    Agent = this.useSsl ? KeepAliveAgent.SSL : KeepAliveAgent;\n    this.on('status set', this.bound.onStatusSet);\n  }\n\n  return new Agent(this.makeAgentConfig(config));\n};\n\nHttpConnector.prototype.makeAgentConfig = function (config) {\n  var agentConfig = {\n    /*\n     * As HTTP/HTTPS Agent defaults keepAlive to false, in the case where we\n     * desire HTTP keep-alive, we need to set it appropriately. This could be\n     * done in the wrapper, but I don't see any good reason not to simply set\n     * it here. ¯\\_(ツ)_/¯\n     *\n     * https://github.com/elastic/elasticsearch-js/issues/107\n     */\n    keepAlive: config.keepAlive,\n    maxSockets: config.maxSockets,\n    minSockets: config.minSockets\n  };\n\n  if (this.useSsl) {\n    _.merge(agentConfig, this.host.ssl);\n  }\n\n  return agentConfig;\n};\n\nHttpConnector.prototype.makeReqParams = function (params) {\n  params = params || {};\n  var host = this.host;\n\n  var reqParams = {\n    method: params.method || 'GET',\n    protocol: host.protocol + ':',\n    hostname: host.host,\n    port: host.port,\n    path: (host.path || '') + (params.path || ''),\n    headers: host.getHeaders(params.headers),\n    agent: this.agent\n  };\n\n  if (!reqParams.path) {\n    reqParams.path = '/';\n  }\n\n  var query = host.getQuery(params.query);\n  if (query) {\n    reqParams.path = reqParams.path + '?' + qs.stringify(query);\n  }\n\n  return reqParams;\n};\n\nHttpConnector.prototype.request = function (params, cb) {\n  var incoming;\n  var timeoutId;\n  var request;\n  var status = 0;\n  var headers = {};\n  var log = this.log;\n  var response;\n\n  var reqParams = this.makeReqParams(params);\n\n  // general clean-up procedure to run after the request\n  // completes, has an error, or is aborted.\n  var cleanUp = _.bind(function (err) {\n    clearTimeout(timeoutId);\n\n    request && request.removeAllListeners();\n    incoming && incoming.removeAllListeners();\n\n    if ((err instanceof Error) === false) {\n      err = void 0;\n    }\n\n    log.trace(params.method, reqParams, params.body, response, status);\n    if (err) {\n      cb(err);\n    } else {\n      cb(err, response, status, headers);\n    }\n  }, this);\n\n  request = this.hand.request(reqParams, function (_incoming) {\n    incoming = _incoming;\n    status = incoming.statusCode;\n    headers = incoming.headers;\n    response = '';\n\n    var encoding = (headers['content-encoding'] || '').toLowerCase();\n    if (encoding === 'gzip' || encoding === 'deflate') {\n      incoming = incoming.pipe(zlib.createUnzip());\n    }\n\n    incoming.setEncoding('utf8');\n    incoming.on('data', function (d) {\n      response += d;\n    });\n\n    incoming.on('error', cleanUp);\n    incoming.on('end', cleanUp);\n  });\n\n  request.on('error', cleanUp);\n\n  request.setNoDelay(true);\n  request.setSocketKeepAlive(true);\n\n  if (params.body) {\n    request.setHeader('Content-Length', Buffer.byteLength(params.body, 'utf8'));\n    request.end(params.body);\n  } else {\n    request.setHeader('Content-Length', 0);\n    request.end();\n  }\n\n  return function () {\n    request.abort();\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/connectors/_keep_alive_agent.js":"var ForeverAgent = require('forever-agent');\nvar ForeverSSLAgent = require('forever-agent').SSL;\n\nvar NativeAgent = require('http').Agent;\nvar NativeSSLAgent = require('https').Agent;\n\nvar inherits = require('util').inherits;\nvar nativeKeepAlive = (function () {\n  var a = new NativeAgent();\n  return !!a.freeSockets;\n}());\n\nfunction WrapForeverAgent(opts) {\n  ForeverAgent.call(this, opts);\n  var _addRequest = this.addRequest;\n  this.addRequest = function (req, host, port) {\n    req.useChunkedEncodingByDefault = false;\n    _addRequest.call(this, req, host, port);\n  };\n}\ninherits(WrapForeverAgent, ForeverAgent);\n\nfunction WrapForeverSSLAgent(opts) {\n  ForeverSSLAgent.call(this, opts);\n  var _addRequest = this.addRequest;\n  this.addRequest = function (req, host, port) {\n    req.useChunkedEncodingByDefault = false;\n    _addRequest.call(this, req, host, port);\n  };\n}\ninherits(WrapForeverSSLAgent, ForeverSSLAgent);\n\nfunction WrapNativeAgent(opts) { NativeAgent.call(this, opts); }\ninherits(WrapNativeAgent, NativeAgent);\n\nfunction WrapNativeSSLAgent(opts) { NativeSSLAgent.call(this, opts); }\ninherits(WrapNativeSSLAgent, NativeSSLAgent);\n\n\nif (nativeKeepAlive) {\n  module.exports = WrapNativeAgent;\n  module.exports.SSL = WrapNativeSSLAgent;\n} else {\n  module.exports = WrapForeverAgent;\n  module.exports.SSL = WrapForeverSSLAgent;\n}\n\nmodule.exports.supportsNativeKeepAlive = nativeKeepAlive;\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/connection.js":"module.exports = ConnectionAbstract;\n\nvar _ = require('./utils');\nvar EventEmitter = require('events').EventEmitter;\nvar Log = require('./log');\nvar Host = require('./host');\nvar errors = require('./errors');\n\n/**\n * Abstract class used for Connection classes\n * @class ConnectionAbstract\n * @constructor\n */\nfunction ConnectionAbstract(host, config) {\n  config = config || {};\n  EventEmitter.call(this);\n\n  this.log = config.log || new Log();\n  this.pingTimeout = config.pingTimeout || 3000;\n\n  if (!host) {\n    throw new TypeError('Missing host');\n  } else if (host instanceof Host) {\n    this.host = host;\n  } else {\n    throw new TypeError('Invalid host');\n  }\n\n  _.makeBoundMethods(this);\n}\n_.inherits(ConnectionAbstract, EventEmitter);\n\n/**\n * Make a request using this connection. Must be overridden by Connection classes, which can add whatever keys to\n * params that they like. These are just the basics.\n *\n * @param [params] {Object} - The parameters for the request\n * @param params.path {String} - The path for which you are requesting\n * @param params.method {String} - The HTTP method for the request (GET, HEAD, etc.)\n * @param params.requestTimeout {Integer} - The amount of time in milliseconds that this request should be allowed to run for.\n * @param cb {Function} - A callback to be called once with `cb(err, responseBody, responseStatus)`\n */\nConnectionAbstract.prototype.request = function () {\n  throw new Error('Connection#request must be overwritten by the Connector');\n};\n\nConnectionAbstract.prototype.ping = function (params, cb) {\n  if (typeof params === 'function') {\n    cb = params;\n    params = null;\n  } else {\n    cb = typeof cb === 'function' ? cb : null;\n  }\n\n  var requestTimeout = this.pingTimeout;\n  var requestTimeoutId;\n  var aborted;\n  var abort;\n\n  if (params && params.hasOwnProperty('requestTimeout')) {\n    requestTimeout = params.requestTimeout;\n  }\n\n  abort = this.request(_.defaults(params || {}, {\n    path: '/',\n    method: 'HEAD'\n  }), function (err) {\n    if (aborted) {\n      return;\n    }\n    clearTimeout(requestTimeoutId);\n    if (cb) {\n      cb(err);\n    }\n  });\n\n  if (requestTimeout) {\n    requestTimeoutId = setTimeout(function () {\n      if (abort) {\n        abort();\n      }\n      aborted = true;\n      if (cb) {\n        cb(new errors.RequestTimeout('Ping Timeout after ' + requestTimeout + 'ms'));\n      }\n    }, requestTimeout);\n  }\n};\n\nConnectionAbstract.prototype.setStatus = function (status) {\n  var origStatus = this.status;\n  this.status = status;\n\n  this.emit('status set', status, origStatus, this);\n\n  if (status === 'closed') {\n    this.removeAllListeners();\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/serializers/index.js":"module.exports = {\n  angular: require('./angular'),\n  json: require('./json')\n};\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/serializers/angular.js":"/* global angular */\nvar _ = require('../utils');\nvar JsonSerializer = require('../serializers/json');\n\nfunction AngularSerializer() {}\n_.inherits(AngularSerializer, JsonSerializer);\n\n// mimic the JsonSerializer's encode method, but use angular's toJson instead\nAngularSerializer.prototype.encode = function (val) {\n  switch (typeof val) {\n    case 'string':\n      return val;\n    case 'object':\n      if (val) return angular.toJson(val);\n    /* falls through */\n    default:\n      return;\n  }\n};\n\nmodule.exports = AngularSerializer;\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/serializers/json.js":"/**\n * Simple JSON serializer\n * @type {[type]}\n */\nmodule.exports = Json;\n\nvar _ = require('../utils');\n\nfunction Json() {}\n\n/**\n * Converts a value into a string, or an error\n * @param  {*} val - Any value, methods are stripped and\n * see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify about other params\n * @return {String|Error} - A string is always returned, unless an error occured. then it will be that error.\n */\nJson.prototype.serialize = function (val, replacer, spaces) {\n  switch (typeof val) {\n    case 'string':\n      return val;\n    case 'object':\n      if (val) {\n        return JSON.stringify(val, replacer, spaces);\n      }\n    /* falls through */\n    default:\n      return;\n  }\n};\n\nJson.prototype.serialize.contentType = 'application/json';\n\n/**\n * Parse a JSON string, if it is already parsed it is ignored\n * @param  {String} str - the string to parse\n * @return {[type]}\n */\nJson.prototype.deserialize = function (str) {\n  if (typeof str === 'string') {\n    try {\n      return JSON.parse(str);\n    } catch (e) {}\n  }\n};\n\nJson.prototype.bulkBody = function (val) {\n  var body = '', i;\n\n  if (_.isArray(val)) {\n    for (i = 0; i < val.length; i++) {\n      body += this.serialize(val[i]) + '\\n';\n    }\n  } else if (typeof val === 'string') {\n    // make sure the string ends in a new line\n    body = val + (val[val.length - 1] === '\\n' ? '' : '\\n');\n  } else {\n    throw new TypeError('Bulk body should either be an Array of commands/string, or a String');\n  }\n\n  return body;\n};\n\nJson.prototype.bulkBody.contentType = 'application/x-ldjson';\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/nodes_to_host.js":"var _ = require('./utils');\n\nvar extractHostPartsRE1x = /\\[\\/*([^:]+):(\\d+)\\]/;\n\nfunction makeNodeParser(hostProp) {\n  return function (nodes) {\n    return _.transform(nodes, function (hosts, node, id) {\n      var address = node[hostProp]\n      if (!address) return;\n\n      var host = {\n        host: undefined,\n        port: undefined,\n        _meta: {\n          id: id,\n          name: node.name,\n          hostname: node.hostname,\n          version: node.version\n        }\n      };\n\n      var malformedError = new Error(\n        'Malformed ' + hostProp + '.' +\n        ' Got ' + JSON.stringify(node[hostProp]) +\n        ' and expected it to match \"{hostname?}/{ip}:{port}\".'\n      );\n\n      var matches1x = extractHostPartsRE1x.exec(address);\n      if (matches1x) {\n        host.host = matches1x[1];\n        host.port = parseInt(matches1x[2], 10);\n        hosts.push(host);\n        return;\n      }\n\n      if (address.indexOf('/') > -1) {\n        var withHostParts = address.split('/');\n        if (withHostParts.length !== 2) throw malformedError;\n\n        host.host = withHostParts.shift();\n        address = withHostParts.shift();\n      }\n\n      if (address.indexOf(':') < 0) {\n        throw malformedError;\n      }\n\n      var addressParts = address.split(':');\n      if (addressParts.length !== 2) {\n        throw malformedError;\n      }\n\n      host.host = host.host || addressParts[0];\n      host.port = parseInt(addressParts[1], 10);\n      hosts.push(host);\n    }, []);\n  };\n}\n\nmodule.exports = makeNodeParser('http_address');\nmodule.exports.thrift = makeNodeParser('transport_address');\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/client_action.js":"\nvar _ = require('./utils');\n\n/**\n * Constructs a client action factory that uses specific defaults\n * @type {Function}\n */\nexports.makeFactoryWithModifier = makeFactoryWithModifier;\n\n/**\n * Constructs a function that can be called to make a request to ES\n * @type {Function}\n */\nexports.factory = makeFactoryWithModifier();\n\n/**\n * Constructs a proxy to another api method\n * @type {Function}\n */\nexports.proxyFactory = exports.factory.proxy;\n\n// export so that we can test this\nexports._resolveUrl = resolveUrl;\n\nexports.ApiNamespace = function () {};\nexports.namespaceFactory = function () {\n  function ClientNamespace(transport, client) {\n    this.transport = transport;\n    this.client = client;\n  }\n\n  ClientNamespace.prototype = new exports.ApiNamespace();\n\n  return ClientNamespace;\n};\n\nfunction makeFactoryWithModifier(modifier) {\n  modifier = modifier || _.identity;\n\n  var factory = function (spec) {\n    spec = modifier(spec);\n\n    if (!_.isPlainObject(spec.params)) {\n      spec.params = {};\n    }\n\n    if (!spec.method) {\n      spec.method = 'GET';\n    }\n\n    function action(params, cb) {\n      if (typeof params === 'function') {\n        cb = params;\n        params = {};\n      } else {\n        params = params || {};\n        cb = typeof cb === 'function' ? cb : null;\n      }\n\n      try {\n        return exec(this.transport, spec, _.clone(params), cb);\n      } catch (e) {\n        if (typeof cb === 'function') {\n          _.nextTick(cb, e);\n        } else {\n          var def = this.transport.defer();\n          def.reject(e);\n          return def.promise;\n        }\n      }\n    }\n\n    action.spec = spec;\n\n    return action;\n  };\n\n  factory.proxy = function (fn, spec) {\n    return function (params, cb) {\n      if (typeof params === 'function') {\n        cb = params;\n        params = {};\n      } else {\n        params = params || {};\n        cb = typeof cb === 'function' ? cb : null;\n      }\n\n      if (spec.transform) {\n        spec.transform(params);\n      }\n\n      return fn.call(this, params, cb);\n    };\n  };\n\n  return factory;\n}\n\nvar castType = {\n  'enum': function validSelection(param, val, name) {\n    if (_.isString(val) && val.indexOf(',') > -1) {\n      val = commaSepList(val);\n    }\n\n    if (_.isArray(val)) {\n      return val.map(function (v) {\n        return validSelection(param, v, name);\n      }).join(',');\n    }\n\n    for (var i = 0; i < param.options.length; i++) {\n      if (param.options[i] === String(val)) {\n        return param.options[i];\n      }\n    }\n    throw new TypeError('Invalid ' + name + ': expected ' + (\n      param.options.length > 1\n      ? 'one of ' + param.options.join(',')\n      : param.options[0]\n    ));\n  },\n  duration: function (param, val, name) {\n    if (_.isNumeric(val) || _.isInterval(val)) {\n      return val;\n    } else {\n      throw new TypeError(\n        'Invalid ' + name + ': expected a number or interval ' +\n        '(an integer followed by one of M, w, d, h, m, s, y or ms).'\n      );\n    }\n  },\n  list: function (param, val, name) {\n    switch (typeof val) {\n      case 'number':\n      case 'boolean':\n        return '' + val;\n      case 'string':\n        val = commaSepList(val);\n      /* falls through */\n      case 'object':\n        if (_.isArray(val)) {\n          return val.join(',');\n        }\n      /* falls through */\n      default:\n        throw new TypeError('Invalid ' + name + ': expected be a comma separated list, array, number or string.');\n    }\n  },\n  'boolean': function (param, val) {\n    val = _.isString(val) ? val.toLowerCase() : val;\n    return (val === 'no' || val === 'off') ? false : !!val;\n  },\n  number: function (param, val, name) {\n    if (_.isNumeric(val)) {\n      return val * 1;\n    } else {\n      throw new TypeError('Invalid ' + name + ': expected a number.');\n    }\n  },\n  string: function (param, val, name) {\n    switch (typeof val) {\n      case 'number':\n      case 'string':\n        return '' + val;\n      default:\n        throw new TypeError('Invalid ' + name + ': expected a string.');\n    }\n  },\n  time: function (param, val, name) {\n    if (typeof val === 'string') {\n      return val;\n    }\n    else if (_.isNumeric(val)) {\n      return '' + val;\n    }\n    else if (val instanceof Date) {\n      return '' + val.getTime();\n    }\n    else {\n      throw new TypeError('Invalid ' + name + ': expected some sort of time.');\n    }\n  }\n};\n\nfunction resolveUrl(url, params) {\n  var vars = {}, i, key;\n\n  if (url.req) {\n    // url has required params\n    if (!url.reqParamKeys) {\n      // create cached key list on demand\n      url.reqParamKeys = _.keys(url.req);\n    }\n\n    for (i = 0; i < url.reqParamKeys.length; i ++) {\n      key = url.reqParamKeys[i];\n      if (!params.hasOwnProperty(key) || params[key] == null) {\n        // missing a required param\n        return false;\n      } else {\n        // cast of copy required param\n        if (castType[url.req[key].type]) {\n          vars[key] = castType[url.req[key].type](url.req[key], params[key], key);\n        } else {\n          vars[key] = params[key];\n        }\n      }\n    }\n  }\n\n  if (url.opt) {\n    // url has optional params\n    if (!url.optParamKeys) {\n      url.optParamKeys = _.keys(url.opt);\n    }\n\n    for (i = 0; i < url.optParamKeys.length; i ++) {\n      key = url.optParamKeys[i];\n      if (params[key]) {\n        if (castType[url.opt[key].type] || params[key] == null) {\n          vars[key] = castType[url.opt[key].type](url.opt[key], params[key], key);\n        } else {\n          vars[key] = params[key];\n        }\n      } else {\n        vars[key] = url.opt[key]['default'];\n      }\n    }\n  }\n\n  if (!url.template) {\n    // compile the template on demand\n    url.template = _.template(url.fmt);\n  }\n\n  return url.template(_.transform(vars, function (note, val, name) {\n    // encode each value\n    note[name] = encodeURIComponent(val);\n    // remove it from the params so that it isn't sent to the final request\n    delete params[name];\n  }, {}));\n}\n\n\nfunction exec(transport, spec, params, cb) {\n  var request = {\n    method: spec.method\n  };\n  var query = {};\n  var i;\n\n  // pass the timeout from the spec\n  if (spec.requestTimeout) {\n    request.requestTimeout = spec.requestTimeout;\n  }\n\n  if (!params.body && spec.paramAsBody) {\n    params.body = params[spec.paramAsBody];\n    delete params[spec.paramAsBody];\n  }\n\n  // verify that we have the body if needed\n  if (spec.needsBody && !params.body) {\n    throw new TypeError('A request body is required.');\n  }\n\n  // control params\n  if (spec.bulkBody) {\n    request.bulkBody = true;\n  }\n\n  if (spec.method === 'HEAD') {\n    request.castExists = true;\n  }\n\n  // pick the url\n  if (spec.url) {\n    // only one url option\n    request.path = resolveUrl(spec.url, params);\n  } else {\n    for (i = 0; i < spec.urls.length; i++) {\n      if (request.path = resolveUrl(spec.urls[i], params)) {\n        break;\n      }\n    }\n  }\n\n  if (!request.path) {\n    // there must have been some mimimun requirements that were not met\n    var minUrl = spec.url || spec.urls[spec.urls.length - 1];\n    throw new TypeError('Unable to build a path with those params. Supply at least ' + _.keys(minUrl.req).join(', '));\n  }\n\n  // build the query string\n  if (!spec.paramKeys) {\n    // build a key list on demand\n    spec.paramKeys = _.keys(spec.params);\n    spec.requireParamKeys = _.transform(spec.params, function (req, param, key) {\n      if (param.required) {\n        req.push(key);\n      }\n    }, []);\n  }\n\n  for (var key in params) {\n    if (params.hasOwnProperty(key) && params[key] != null) {\n      switch (key) {\n        case 'body':\n        case 'headers':\n        case 'requestTimeout':\n        case 'maxRetries':\n          request[key] = params[key];\n          break;\n        case 'ignore':\n          request.ignore = _.isArray(params[key]) ? params[key] : [params[key]];\n          break;\n        case 'method':\n          request.method = _.toUpperString(params[key]);\n          break;\n        default:\n          var paramSpec = spec.params[key];\n          if (paramSpec) {\n          // param keys don't always match the param name, in those cases it's stored in the param def as \"name\"\n            paramSpec.name = paramSpec.name || key;\n            if (params[key] != null) {\n              if (castType[paramSpec.type]) {\n                query[paramSpec.name] = castType[paramSpec.type](paramSpec, params[key], key);\n              } else {\n                query[paramSpec.name] = params[key];\n              }\n\n              if (paramSpec['default'] && query[paramSpec.name] === paramSpec['default']) {\n                delete query[paramSpec.name];\n              }\n            }\n          } else {\n            query[key] = params[key];\n          }\n      }\n    }\n  }\n\n  for (i = 0; i < spec.requireParamKeys.length; i ++) {\n    if (!query.hasOwnProperty(spec.requireParamKeys[i])) {\n      throw new TypeError('Missing required parameter ' + spec.requireParamKeys[i]);\n    }\n  }\n\n  request.query = query;\n\n  return transport.request(request, cb);\n}\n\nfunction commaSepList(str) {\n  return str.split(',').map(function (i) {\n    return i.trim();\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/apis/index.js":"module.exports = {\n  '_default': require('./5_0'),\n  '5.0': require('./5_0'),\n  '2.4': require('./2_4'),\n  '2.3': require('./2_3'),\n  '2.2': require('./2_2'),\n  '2.1': require('./2_1'),\n  '2.0': require('./2_0'),\n  '1.7': require('./1_7'),\n  '1.6': require('./1_6'),\n  '1.5': require('./1_5'),\n  '1.4': require('./1_4'),\n  '1.3': require('./1_3'),\n  '1.2': require('./1_2'),\n  '1.1': require('./1_1'),\n  '1.0': require('./1_0'),\n  '0.90': require('./0_90'),\n  '5.x': require('./5_x'),\n  'master': require('./master')\n};\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/apis/5_0.js":"var ca = require('../client_action').makeFactoryWithModifier(function (spec) {\n  return require('../utils').merge(spec, {\n    params: {\n      filterPath: {\n        type: 'list',\n        name: 'filter_path'\n      }\n    }\n  });\n});\nvar namespace = require('../client_action').namespaceFactory;\nvar api = module.exports = {};\n\napi._namespaces = ['cat', 'cluster', 'indices', 'ingest', 'nodes', 'snapshot', 'tasks'];\n\n/**\n * Perform a [bulk](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-bulk.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the bulk operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.type - Default document type for items which don't provide one\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - Default comma-separated list of fields to return in the response for updates, can be overridden on each sub-request\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or default list of fields to return, can be overridden on each sub-request\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - Default list of fields to exclude from the returned _source field, can be overridden on each sub-request\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - Default list of fields to extract and return from the _source field, can be overridden on each sub-request\n * @param {<<api-param-type-string,`String`>>} params.pipeline - The pipeline id to preprocess incoming documents with\n * @param {<<api-param-type-string,`String`>>} params.index - Default index for items which don't provide one\n */\napi.bulk = ca({\n  params: {\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    },\n    refresh: {\n      type: 'enum',\n      options: [\n        'true',\n        'false',\n        'wait_for',\n        ''\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    type: {\n      type: 'string'\n    },\n    fields: {\n      type: 'list'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    pipeline: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_bulk'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\napi.cat = namespace();\n\n/**\n * Perform a [cat.aliases](http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.cat.prototype.aliases = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/aliases/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/aliases'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.allocation](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-allocation.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information\n */\napi.cat.prototype.allocation = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'kb',\n        'm',\n        'mb',\n        'g',\n        'gb',\n        't',\n        'tb',\n        'p',\n        'pb'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/allocation/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/allocation'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.count](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-count.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.count = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/count/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/count'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.fielddata](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-fielddata.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return the fielddata size\n */\napi.cat.prototype.fielddata = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'kb',\n        'm',\n        'mb',\n        'g',\n        'gb',\n        't',\n        'tb',\n        'p',\n        'pb'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    },\n    fields: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/fielddata/<%=fields%>',\n      req: {\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/fielddata'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.health](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-health.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.ts=true] - Set to false to disable timestamping\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.health = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    ts: {\n      type: 'boolean',\n      'default': true\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/health'\n  }\n});\n\n/**\n * Perform a [cat.help](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n */\napi.cat.prototype.help = ca({\n  params: {\n    help: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat'\n  }\n});\n\n/**\n * Perform a [cat.indices](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-indices.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-string,`String`>>} params.health - A health status (\"green\", \"yellow\", or \"red\" to filter only indices matching the specified health status\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.pri - Set to true to return stats only for primary shards\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.indices = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    health: {\n      type: 'enum',\n      'default': null,\n      options: [\n        'green',\n        'yellow',\n        'red'\n      ]\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    pri: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/indices/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/indices'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.master](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-master.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.master = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/master'\n  }\n});\n\n/**\n * Perform a [cat.nodeattrs](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-nodeattrs.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.nodeattrs = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/nodeattrs'\n  }\n});\n\n/**\n * Perform a [cat.nodes](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-nodes.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fullId - Return the full node ID instead of the shortened version (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.nodes = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    fullId: {\n      type: 'boolean',\n      name: 'full_id'\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/nodes'\n  }\n});\n\n/**\n * Perform a [cat.pendingTasks](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-pending-tasks.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.pendingTasks = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/pending_tasks'\n  }\n});\n\n/**\n * Perform a [cat.plugins](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-plugins.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.plugins = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/plugins'\n  }\n});\n\n/**\n * Perform a [cat.recovery](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-recovery.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.recovery = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'kb',\n        'm',\n        'mb',\n        'g',\n        'gb',\n        't',\n        'tb',\n        'p',\n        'pb'\n      ]\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/recovery/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/recovery'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.repositories](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-repositories.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.repositories = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean',\n      'default': false\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/repositories'\n  }\n});\n\n/**\n * Perform a [cat.segments](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-segments.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.segments = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/segments/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/segments'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.shards](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-shards.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.shards = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/shards/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/shards'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.snapshots](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Set to true to ignore unavailable snapshots\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - Name of repository from which to fetch the snapshot information\n */\napi.cat.prototype.snapshots = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      'default': false,\n      name: 'ignore_unavailable'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/snapshots/<%=repository%>',\n      req: {\n        repository: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/snapshots'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.tasks](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/tasks.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be returned. Leave empty to return all.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Return detailed task information (default: false)\n * @param {<<api-param-type-string,`String`>>} params.parentNode - Return tasks with specified parent node.\n * @param {<<api-param-type-number,`Number`>>} params.parentTask - Return tasks with specified parent task id. Set to -1 to return all.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.tasks = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    nodeId: {\n      type: 'list',\n      name: 'node_id'\n    },\n    actions: {\n      type: 'list'\n    },\n    detailed: {\n      type: 'boolean'\n    },\n    parentNode: {\n      type: 'string',\n      name: 'parent_node'\n    },\n    parentTask: {\n      type: 'number',\n      name: 'parent_task'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/tasks'\n  }\n});\n\n/**\n * Perform a [cat.threadPool](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-thread-pool.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-string,`String`>>} params.size - The multiplier in which to display values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.threadPoolPatterns - A comma-separated list of regular-expressions to filter the thread pools in the output\n */\napi.cat.prototype.threadPool = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    size: {\n      type: 'enum',\n      options: [\n        '',\n        'k',\n        'm',\n        'g',\n        't',\n        'p'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/thread_pool/<%=threadPoolPatterns%>',\n      req: {\n        threadPoolPatterns: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/thread_pool'\n    }\n  ]\n});\n\n/**\n * Perform a [clearScroll](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.scrollId - A comma-separated list of scroll IDs to clear\n */\napi.clearScroll = ca({\n  urls: [\n    {\n      fmt: '/_search/scroll/<%=scrollId%>',\n      req: {\n        scrollId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/scroll'\n    }\n  ],\n  paramAsBody: 'scrollId',\n  method: 'DELETE'\n});\n\napi.cluster = namespace();\n\n/**\n * Perform a [cluster.allocationExplain](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-allocation-explain.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.includeYesDecisions - Return 'YES' decisions in explanation (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDiskInfo - Return information about disk usage and shard sizes (default: false)\n */\napi.cluster.prototype.allocationExplain = ca({\n  params: {\n    includeYesDecisions: {\n      type: 'boolean',\n      name: 'include_yes_decisions'\n    },\n    includeDiskInfo: {\n      type: 'boolean',\n      name: 'include_disk_info'\n    }\n  },\n  url: {\n    fmt: '/_cluster/allocation/explain'\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [cluster.getSettings](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default clusters setting.\n */\napi.cluster.prototype.getSettings = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    },\n    includeDefaults: {\n      type: 'boolean',\n      'default': false,\n      name: 'include_defaults'\n    }\n  },\n  url: {\n    fmt: '/_cluster/settings'\n  }\n});\n\n/**\n * Perform a [cluster.health](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-health.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Specify the level of detail for returned information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Wait until the specified number of shards is active\n * @param {<<api-param-type-string,`String`>>} params.waitForNodes - Wait until the specified number of nodes is available\n * @param {<<api-param-type-string,`String`>>} params.waitForEvents - Wait until all currently queued events with the given priority are processed\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForNoRelocatingShards - Whether to wait until there are no relocating shards in the cluster\n * @param {<<api-param-type-string,`String`>>} params.waitForStatus - Wait until cluster is in a specific state\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - Limit the information returned to a specific index\n */\napi.cluster.prototype.health = ca({\n  params: {\n    level: {\n      type: 'enum',\n      'default': 'cluster',\n      options: [\n        'cluster',\n        'indices',\n        'shards'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    },\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    },\n    waitForNodes: {\n      type: 'string',\n      name: 'wait_for_nodes'\n    },\n    waitForEvents: {\n      type: 'enum',\n      options: [\n        'immediate',\n        'urgent',\n        'high',\n        'normal',\n        'low',\n        'languid'\n      ],\n      name: 'wait_for_events'\n    },\n    waitForNoRelocatingShards: {\n      type: 'boolean',\n      name: 'wait_for_no_relocating_shards'\n    },\n    waitForStatus: {\n      type: 'enum',\n      'default': null,\n      options: [\n        'green',\n        'yellow',\n        'red'\n      ],\n      name: 'wait_for_status'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/health/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/health'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.pendingTasks](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-pending.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.cluster.prototype.pendingTasks = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_cluster/pending_tasks'\n  }\n});\n\n/**\n * Perform a [cluster.putSettings](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.putSettings = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/settings'\n  },\n  method: 'PUT'\n});\n\n/**\n * Perform a [cluster.reroute](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-reroute.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - Simulate the operation only and return the resulting state\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return an explanation of why the commands can or cannot be executed\n * @param {<<api-param-type-boolean,`Boolean`>>} params.retryFailed - Retries allocation of shards that are blocked due to too many subsequent allocation failures\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics. Defaults to all but metadata\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.reroute = ca({\n  params: {\n    dryRun: {\n      type: 'boolean',\n      name: 'dry_run'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    retryFailed: {\n      type: 'boolean',\n      name: 'retry_failed'\n    },\n    metric: {\n      type: 'list',\n      options: [\n        '_all',\n        'blocks',\n        'metadata',\n        'nodes',\n        'routing_table',\n        'master_node',\n        'version'\n      ]\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/reroute'\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [cluster.state](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-state.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n */\napi.cluster.prototype.state = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/state/<%=metric%>/<%=index%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'blocks',\n            'metadata',\n            'nodes',\n            'routing_table',\n            'routing_nodes',\n            'master_node',\n            'version'\n          ]\n        },\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/state/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'blocks',\n            'metadata',\n            'nodes',\n            'routing_table',\n            'routing_nodes',\n            'master_node',\n            'version'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/state'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.stats](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.cluster.prototype.stats = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/stats/nodes/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/stats'\n    }\n  ]\n});\n\n/**\n * Perform a [count](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-count.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n */\napi.count = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    minScore: {\n      type: 'number',\n      name: 'min_score'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_count'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [countPercolate](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to count percolate the document into. Defaults to index.\n * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to count percolate document into. Defaults to type.\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being count percolated.\n * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n */\napi.countPercolate = ca({\n  params: {\n    routing: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    percolateIndex: {\n      type: 'string',\n      name: 'percolate_index'\n    },\n    percolateType: {\n      type: 'string',\n      name: 'percolate_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate/count',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_percolate/count',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [create](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the index operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.pipeline - The pipeline id to preprocess incoming documents with\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.create = ca({\n  params: {\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'enum',\n      options: [\n        'true',\n        'false',\n        'wait_for',\n        ''\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'time'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    },\n    pipeline: {\n      type: 'string'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_create',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [delete](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-delete.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the delete operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of parent document\n * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi['delete'] = ca({\n  params: {\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'enum',\n      options: [\n        'true',\n        'false',\n        'wait_for',\n        ''\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteByQuery](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-delete-by-query.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.conflicts=abort] - What to do when the delete-by-query hits version conflicts?\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.searchTimeout - Explicit timeout for each search request. Defaults to no timeout.\n * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the delete by query operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n * @param {<<api-param-type-number,`Number`>>} params.scrollSize - Size on the scroll request powering the update_by_query\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should the request should block until the delete-by-query is complete.\n * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in sub-requests per second. -1 means set no throttle as does \"unlimited\" which is the only non-float this accepts.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.deleteByQuery = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    from: {\n      type: 'number'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    conflicts: {\n      type: 'enum',\n      'default': 'abort',\n      options: [\n        'abort',\n        'proceed'\n      ]\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'time'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'dfs_query_then_fetch'\n      ],\n      name: 'search_type'\n    },\n    searchTimeout: {\n      type: 'time',\n      name: 'search_timeout'\n    },\n    size: {\n      type: 'number'\n    },\n    sort: {\n      type: 'list'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    terminateAfter: {\n      type: 'number',\n      name: 'terminate_after'\n    },\n    stats: {\n      type: 'list'\n    },\n    version: {\n      type: 'boolean'\n    },\n    requestCache: {\n      type: 'boolean',\n      name: 'request_cache'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    timeout: {\n      type: 'time',\n      'default': '1m'\n    },\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    },\n    scrollSize: {\n      type: 'number',\n      name: 'scroll_size'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    },\n    requestsPerSecond: {\n      type: 'number',\n      'default': 0,\n      name: 'requests_per_second'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_delete_by_query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_delete_by_query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [deleteScript](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.deleteScript = ca({\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.deleteTemplate = ca({\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [exists](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.exists = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [explain](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-explain.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer for the query string query\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The default field for query string query (default: _all)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.explain = ca({\n  params: {\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    storedFields: {\n      type: 'list',\n      name: 'stored_fields'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_explain',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [fieldStats](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-field-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for to get field statistics for (min value, max value, and more)\n * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Defines if field stats should be returned on a per index level or on a cluster wide level\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.fieldStats = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    level: {\n      type: 'enum',\n      'default': 'cluster',\n      options: [\n        'indices',\n        'cluster'\n      ]\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_field_stats',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_field_stats'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [get](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.get = ca({\n  params: {\n    storedFields: {\n      type: 'list',\n      name: 'stored_fields'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getScript](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.getScript = ca({\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getSource](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types\n */\napi.getSource = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.getTemplate = ca({\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [index](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the index operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.pipeline - The pipeline id to preprocess incoming documents with\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.index = ca({\n  params: {\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    },\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'enum',\n      options: [\n        'true',\n        'false',\n        'wait_for',\n        ''\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'time'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    },\n    pipeline: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\napi.indices = namespace();\n\n/**\n * Perform a [indices.analyze](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-analyze.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The name of the analyzer to use\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.charFilter - A comma-separated list of character filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>} params.field - Use the analyzer configured for this field (instead of passing the analyzer name)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.filter - A comma-separated list of filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index to scope the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.preferLocal - With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.text - The text on which the analysis should be performed (when request body is not used)\n * @param {<<api-param-type-string,`String`>>} params.tokenizer - The name of the tokenizer to use for the analysis\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - With `true`, outputs more advanced details. (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.attributes - A comma-separated list of token attributes to output, this parameter works only with `explain=true`\n * @param {<<api-param-type-string,`String`>>} [params.format=detailed] - Format of the output\n */\napi.indices.prototype.analyze = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    charFilter: {\n      type: 'list',\n      name: 'char_filter'\n    },\n    field: {\n      type: 'string'\n    },\n    filter: {\n      type: 'list'\n    },\n    index: {\n      type: 'string'\n    },\n    preferLocal: {\n      type: 'boolean',\n      name: 'prefer_local'\n    },\n    text: {\n      type: 'list'\n    },\n    tokenizer: {\n      type: 'string'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    attributes: {\n      type: 'list'\n    },\n    format: {\n      type: 'enum',\n      'default': 'detailed',\n      options: [\n        'detailed',\n        'text'\n      ]\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_analyze',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_analyze'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.clearCache](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-clearcache.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fieldData - Clear field data\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fielddata - Clear field data\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to clear when using the `field_data` parameter (default: all)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.query - Clear query caches\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index name to limit the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.recycler - Clear the recycler cache\n * @param {<<api-param-type-boolean,`Boolean`>>} params.request - Clear request cache\n */\napi.indices.prototype.clearCache = ca({\n  params: {\n    fieldData: {\n      type: 'boolean',\n      name: 'field_data'\n    },\n    fielddata: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    query: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    index: {\n      type: 'list'\n    },\n    recycler: {\n      type: 'boolean'\n    },\n    request: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_cache/clear',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cache/clear'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.close](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma separated list of indices to close\n */\napi.indices.prototype.close = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_close',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.create](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-create-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for before the operation returns.\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.updateAllTypes - Whether to update the mapping for all fields with the same name across all types or not\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.create = ca({\n  params: {\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    },\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    updateAllTypes: {\n      type: 'boolean',\n      name: 'update_all_types'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.delete](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-delete-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices\n */\napi.indices.prototype['delete'] = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteAlias](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.\n */\napi.indices.prototype.deleteAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_alias/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.deleteTemplate = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.exists](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to check\n */\napi.indices.prototype.exists = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsAlias](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.existsAlias = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': [\n        'open',\n        'closed'\n      ],\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_alias',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.existsTemplate = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsType](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-types-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` to check the types across all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to check\n */\napi.indices.prototype.existsType = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_mapping/<%=type%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      type: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.flush](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-flush.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitIfOngoing - If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. The default is true. If set to false the flush will be skipped iff if another flush operation is already running.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n */\napi.indices.prototype.flush = ca({\n  params: {\n    force: {\n      type: 'boolean'\n    },\n    waitIfOngoing: {\n      type: 'boolean',\n      name: 'wait_if_ongoing'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_flush',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_flush'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.flushSynced](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-synced-flush.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n */\napi.indices.prototype.flushSynced = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_flush/synced',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_flush/synced'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.forcemerge](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-forcemerge.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flush - Specify whether the index should be flushed after performing the operation (default: true)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.maxNumSegments - The number of segments the index should be merged into (default: dynamic)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyExpungeDeletes - Specify whether the operation should only expunge deleted documents\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForMerge - Specify whether the request should block until the merge process is finished (default: true)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.forcemerge = ca({\n  params: {\n    flush: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    maxNumSegments: {\n      type: 'number',\n      name: 'max_num_segments'\n    },\n    onlyExpungeDeletes: {\n      type: 'boolean',\n      name: 'only_expunge_deletes'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    waitForMerge: {\n      type: 'boolean',\n      name: 'wait_for_merge'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_forcemerge',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_forcemerge'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.get](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-get-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Ignore unavailable indexes (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return version and creation date values in human-readable format.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default setting for each of the indices.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.feature - A comma-separated list of features\n */\napi.indices.prototype.get = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    includeDefaults: {\n      type: 'boolean',\n      'default': false,\n      name: 'include_defaults'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=feature%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        feature: {\n          type: 'list',\n          options: [\n            '_settings',\n            '_mappings',\n            '_aliases'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getAlias](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=all] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.getAlias = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'all',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_alias',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getFieldMapping](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-get-field-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether the default mapping values should be returned as well\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields\n */\napi.indices.prototype.getFieldMapping = ca({\n  params: {\n    includeDefaults: {\n      type: 'boolean',\n      name: 'include_defaults'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>/field/<%=fields%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping/field/<%=fields%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>/field/<%=fields%>',\n      req: {\n        type: {\n          type: 'list'\n        },\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/field/<%=fields%>',\n      req: {\n        fields: {\n          type: 'list'\n        }\n      }\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getMapping](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-get-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n */\napi.indices.prototype.getMapping = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>',\n      req: {\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getSettings](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-get-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return version and creation date values in human-readable format.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default setting for each of the indices.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the settings that should be included\n */\napi.indices.prototype.getSettings = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': [\n        'open',\n        'closed'\n      ],\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    local: {\n      type: 'boolean'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    includeDefaults: {\n      type: 'boolean',\n      'default': false,\n      name: 'include_defaults'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The comma separated names of the index templates\n */\napi.indices.prototype.getTemplate = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_template/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_template'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getUpgrade](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-upgrade.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.getUpgrade = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_upgrade',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_upgrade'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.open](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma separated list of indices to open\n */\napi.indices.prototype.open = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'closed',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_open',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.putAlias](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the alias to be created or updated\n */\napi.indices.prototype.putAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_alias/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putMapping](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-put-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.updateAllTypes - Whether to update the mapping for all fields with the same name across all types or not\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.\n * @param {<<api-param-type-string,`String`>>} params.type - The name of the document type\n */\napi.indices.prototype.putMapping = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    updateAllTypes: {\n      type: 'boolean',\n      name: 'update_all_types'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>',\n      req: {\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putSettings](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.preserveExisting - Whether to update existing settings. If set to `true` existing settings on an index remain unchanged, the default is `false`\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.putSettings = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    preserveExisting: {\n      type: 'boolean',\n      name: 'preserve_existing'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.order - The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.create - Whether the index template should only be added if new or can also replace an existing one\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.putTemplate = ca({\n  params: {\n    order: {\n      type: 'number'\n    },\n    create: {\n      type: 'boolean',\n      'default': false\n    },\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.recovery](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-recovery.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Whether to display detailed information about shard recovery\n * @param {<<api-param-type-boolean,`Boolean`>>} params.activeOnly - Display only those recoveries that are currently on-going\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.recovery = ca({\n  params: {\n    detailed: {\n      type: 'boolean',\n      'default': false\n    },\n    activeOnly: {\n      type: 'boolean',\n      'default': false,\n      name: 'active_only'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_recovery',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_recovery'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.refresh](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-refresh.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Force a refresh even if not required\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.refresh = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    force: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_refresh',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_refresh'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.rollover](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-rollover-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - If set to true the rollover action will only be validated but not actually performed even if a condition matches. The default is false\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for on the newly created rollover index before the operation returns.\n * @param {<<api-param-type-string,`String`>>} params.alias - The name of the alias to rollover\n * @param {<<api-param-type-string,`String`>>} params.newIndex - The name of the rollover index\n */\napi.indices.prototype.rollover = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    dryRun: {\n      type: 'boolean',\n      name: 'dry_run'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=alias%>/_rollover/<%=newIndex%>',\n      req: {\n        alias: {\n          type: 'string'\n        },\n        newIndex: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=alias%>/_rollover',\n      req: {\n        alias: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.segments](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-segments.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Includes detailed memory usage by Lucene.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.segments = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    verbose: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_segments',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_segments'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.shardStores](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-shards-stores.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.status - A comma-separated list of statuses used to filter on shards to get store information for\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.shardStores = ca({\n  params: {\n    status: {\n      type: 'list',\n      options: [\n        'green',\n        'yellow',\n        'red',\n        'all'\n      ]\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_shard_stores',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_shard_stores'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.shrink](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-shrink-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for on the shrunken index before the operation returns.\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the source index to shrink\n * @param {<<api-param-type-string,`String`>>} params.target - The name of the target index to shrink into\n */\napi.indices.prototype.shrink = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_shrink/<%=target%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      target: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.stats](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>} [params.level=indices] - Return stats aggregated at cluster, index or shard level\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned the specific metrics.\n */\napi.indices.prototype.stats = ca({\n  params: {\n    completionFields: {\n      type: 'list',\n      name: 'completion_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    fields: {\n      type: 'list'\n    },\n    groups: {\n      type: 'list'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    level: {\n      type: 'enum',\n      'default': 'indices',\n      options: [\n        'cluster',\n        'indices',\n        'shards'\n      ]\n    },\n    types: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_stats/<%=metric%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'query_cache',\n            'flush',\n            'get',\n            'indexing',\n            'merge',\n            'percolate',\n            'request_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_stats/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'query_cache',\n            'flush',\n            'get',\n            'indexing',\n            'merge',\n            'percolate',\n            'request_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_stats',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_stats'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.updateAliases](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Request timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.indices.prototype.updateAliases = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_aliases'\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.upgrade](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-upgrade.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Specify whether the request should block until the all segments are upgraded (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyAncientSegments - If true, only ancient (an older Lucene major release) segments will be upgraded\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.upgrade = ca({\n  params: {\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      name: 'wait_for_completion'\n    },\n    onlyAncientSegments: {\n      type: 'boolean',\n      name: 'only_ancient_segments'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_upgrade',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_upgrade'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.validateQuery](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-validate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return detailed information about the error\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-boolean,`Boolean`>>} params.rewrite - Provide a more detailed explanation showing the actual Lucene query that will be executed.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n */\napi.indices.prototype.validateQuery = ca({\n  params: {\n    explain: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    q: {\n      type: 'string'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    rewrite: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_validate/query'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [info](https://www.elastic.co/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.info = ca({\n  url: {\n    fmt: '/'\n  }\n});\n\napi.ingest = namespace();\n\n/**\n * Perform a [ingest.deletePipeline](https://www.elastic.co/guide/en/elasticsearch/plugins/5.x/ingest.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.id - Pipeline ID\n */\napi.ingest.prototype.deletePipeline = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_ingest/pipeline/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [ingest.getPipeline](https://www.elastic.co/guide/en/elasticsearch/plugins/5.x/ingest.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.id - Comma separated list of pipeline ids. Wildcards supported\n */\napi.ingest.prototype.getPipeline = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_ingest/pipeline/<%=id%>',\n      req: {\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_ingest/pipeline'\n    }\n  ]\n});\n\n/**\n * Perform a [ingest.putPipeline](https://www.elastic.co/guide/en/elasticsearch/plugins/5.x/ingest.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.id - Pipeline ID\n */\napi.ingest.prototype.putPipeline = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_ingest/pipeline/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [ingest.simulate](https://www.elastic.co/guide/en/elasticsearch/plugins/5.x/ingest.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Verbose mode. Display data output for each processor in executed pipeline\n * @param {<<api-param-type-string,`String`>>} params.id - Pipeline ID\n */\napi.ingest.prototype.simulate = ca({\n  params: {\n    verbose: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_ingest/pipeline/<%=id%>/_simulate',\n      req: {\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_ingest/pipeline/_simulate'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mget](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-multi-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.mget = ca({\n  params: {\n    storedFields: {\n      type: 'list',\n      name: 'stored_fields'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mget'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mpercolate](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated to use as default\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated to use as default.\n */\napi.mpercolate = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mpercolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mpercolate',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mpercolate'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [msearch](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-multi-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-number,`Number`>>} params.maxConcurrentSearches - Controls the maximum number of concurrent searches the multi search api will execute\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n */\napi.msearch = ca({\n  params: {\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch'\n      ],\n      name: 'search_type'\n    },\n    maxConcurrentSearches: {\n      type: 'number',\n      name: 'max_concurrent_searches'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_msearch'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [msearchTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n */\napi.msearchTemplate = ca({\n  params: {\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch'\n      ],\n      name: 'search_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_msearch/template',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_msearch/template',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_msearch/template'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mtermvectors](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-multi-termvectors.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.ids - A comma-separated list of documents ids. You must define ids as parameter or set \"ids\" or \"docs\" in the request body\n * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if requests are real-time as opposed to near-real-time (default: true).\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n */\napi.mtermvectors = ca({\n  params: {\n    ids: {\n      type: 'list',\n      required: false\n    },\n    termStatistics: {\n      type: 'boolean',\n      'default': false,\n      required: false,\n      name: 'term_statistics'\n    },\n    fieldStatistics: {\n      type: 'boolean',\n      'default': true,\n      required: false,\n      name: 'field_statistics'\n    },\n    fields: {\n      type: 'list',\n      required: false\n    },\n    offsets: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    positions: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    payloads: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    preference: {\n      type: 'string',\n      required: false\n    },\n    routing: {\n      type: 'string',\n      required: false\n    },\n    parent: {\n      type: 'string',\n      required: false\n    },\n    realtime: {\n      type: 'boolean',\n      required: false\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mtermvectors',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mtermvectors',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mtermvectors'\n    }\n  ],\n  method: 'POST'\n});\n\napi.nodes = namespace();\n\n/**\n * Perform a [nodes.hotThreads](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-nodes-hot-threads.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.interval - The interval for the second sampling of threads\n * @param {<<api-param-type-number,`Number`>>} params.snapshots - Number of samples of thread stacktrace (default: 10)\n * @param {<<api-param-type-number,`Number`>>} params.threads - Specify the number of threads to provide information for (default: 3)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreIdleThreads - Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue (default: true)\n * @param {<<api-param-type-string,`String`>>} params.type - The type to sample (default: cpu)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.nodes.prototype.hotThreads = ca({\n  params: {\n    interval: {\n      type: 'time'\n    },\n    snapshots: {\n      type: 'number'\n    },\n    threads: {\n      type: 'number'\n    },\n    ignoreIdleThreads: {\n      type: 'boolean',\n      name: 'ignore_idle_threads'\n    },\n    type: {\n      type: 'enum',\n      options: [\n        'cpu',\n        'wait',\n        'block'\n      ]\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/hotthreads',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/hotthreads'\n    }\n  ]\n});\n\n/**\n * Perform a [nodes.info](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-nodes-info.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - A comma-separated list of metrics you wish returned. Leave empty to return all.\n */\napi.nodes.prototype.info = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/<%=metric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            'settings',\n            'os',\n            'process',\n            'jvm',\n            'thread_pool',\n            'transport',\n            'http',\n            'plugins',\n            'ingest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            'settings',\n            'os',\n            'process',\n            'jvm',\n            'thread_pool',\n            'transport',\n            'http',\n            'plugins',\n            'ingest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes'\n    }\n  ]\n});\n\n/**\n * Perform a [nodes.stats](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-nodes-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>} [params.level=node] - Return indices stats aggregated at index, node or shard level\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indexMetric - Limit the information returned for `indices` metric to the specific index metrics. Isn't used if `indices` (or `all`) metric isn't specified.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.nodes.prototype.stats = ca({\n  params: {\n    completionFields: {\n      type: 'list',\n      name: 'completion_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    fields: {\n      type: 'list'\n    },\n    groups: {\n      type: 'boolean'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    level: {\n      type: 'enum',\n      'default': 'node',\n      options: [\n        'indices',\n        'node',\n        'shards'\n      ]\n    },\n    types: {\n      type: 'list'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>/<%=indexMetric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'os',\n            'process',\n            'thread_pool',\n            'transport',\n            'discovery'\n          ]\n        },\n        indexMetric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'query_cache',\n            'flush',\n            'get',\n            'indexing',\n            'merge',\n            'percolate',\n            'request_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'os',\n            'process',\n            'thread_pool',\n            'transport',\n            'discovery'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats/<%=metric%>/<%=indexMetric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'os',\n            'process',\n            'thread_pool',\n            'transport',\n            'discovery'\n          ]\n        },\n        indexMetric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'query_cache',\n            'flush',\n            'get',\n            'indexing',\n            'merge',\n            'percolate',\n            'request_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'os',\n            'process',\n            'thread_pool',\n            'transport',\n            'discovery'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats'\n    }\n  ]\n});\n\n/**\n * Perform a [percolate](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to percolate the document into. Defaults to index.\n * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to percolate document into. Defaults to type.\n * @param {<<api-param-type-string,`String`>>} params.percolateRouting - The routing value to use when percolating the existing document.\n * @param {<<api-param-type-string,`String`>>} params.percolatePreference - Which shard to prefer when executing the percolate request.\n * @param {<<api-param-type-string,`String`>>} params.percolateFormat - Return an array of matching query IDs instead of objects\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being percolated.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated.\n * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n */\napi.percolate = ca({\n  params: {\n    routing: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    percolateIndex: {\n      type: 'string',\n      name: 'percolate_index'\n    },\n    percolateType: {\n      type: 'string',\n      name: 'percolate_type'\n    },\n    percolateRouting: {\n      type: 'string',\n      name: 'percolate_routing'\n    },\n    percolatePreference: {\n      type: 'string',\n      name: 'percolate_preference'\n    },\n    percolateFormat: {\n      type: 'enum',\n      options: [\n        'ids'\n      ],\n      name: 'percolate_format'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_percolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [ping](https://www.elastic.co/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.ping = ca({\n  url: {\n    fmt: '/'\n  },\n  requestTimeout: 3000,\n  method: 'HEAD'\n});\n\n/**\n * Perform a [putScript](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.putScript = ca({\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [putTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.putTemplate = ca({\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [reindex](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-reindex.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the reindex operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should the request should block until the reindex is complete.\n * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in sub-requests per second. -1 means set no throttle as does \"unlimited\" which is the only non-float this accepts.\n */\napi.reindex = ca({\n  params: {\n    refresh: {\n      type: 'boolean'\n    },\n    timeout: {\n      type: 'time',\n      'default': '1m'\n    },\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    },\n    requestsPerSecond: {\n      type: 'number',\n      'default': 0,\n      name: 'requests_per_second'\n    }\n  },\n  url: {\n    fmt: '/_reindex'\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [reindexRethrottle](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-reindex.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in floating sub-requests per second. -1 means set no throttle.\n * @param {<<api-param-type-string,`String`>>} params.taskId - The task id to rethrottle\n */\napi.reindexRethrottle = ca({\n  params: {\n    requestsPerSecond: {\n      type: 'number',\n      required: true,\n      name: 'requests_per_second'\n    }\n  },\n  url: {\n    fmt: '/_reindex/<%=taskId%>/_rethrottle',\n    req: {\n      taskId: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [renderSearchTemplate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/5.x/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.id - The id of the stored search template\n */\napi.renderSearchTemplate = ca({\n  urls: [\n    {\n      fmt: '/_render/template/<%=id%>',\n      req: {\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_render/template'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [scroll](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.scrollId - The scroll ID\n */\napi.scroll = ca({\n  params: {\n    scroll: {\n      type: 'time'\n    },\n    scrollId: {\n      type: 'string',\n      name: 'scroll_id'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_search/scroll/<%=scrollId%>',\n      req: {\n        scrollId: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_search/scroll'\n    }\n  ],\n  paramAsBody: 'scrollId',\n  method: 'POST'\n});\n\n/**\n * Perform a [search](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.docvalueFields - A comma-separated list of fields to return as the docvalue representation of a field for each hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields to return as the docvalue representation of a field for each hit\n * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n * @param {<<api-param-type-string,`String`>>} params.suggestField - Specify which field to use for suggestions\n * @param {<<api-param-type-string,`String`>>} [params.suggestMode=missing] - Specify suggest mode\n * @param {<<api-param-type-number,`Number`>>} params.suggestSize - How many suggestions to return in response\n * @param {<<api-param-type-string,`String`>>} params.suggestText - The source text for which the suggestions should be returned\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.trackScores - Whether to calculate and return scores even if they are not used for sorting\n * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.search = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    storedFields: {\n      type: 'list',\n      name: 'stored_fields'\n    },\n    docvalueFields: {\n      type: 'list',\n      name: 'docvalue_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    from: {\n      type: 'number'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'time'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'dfs_query_then_fetch'\n      ],\n      name: 'search_type'\n    },\n    size: {\n      type: 'number'\n    },\n    sort: {\n      type: 'list'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    terminateAfter: {\n      type: 'number',\n      name: 'terminate_after'\n    },\n    stats: {\n      type: 'list'\n    },\n    suggestField: {\n      type: 'string',\n      name: 'suggest_field'\n    },\n    suggestMode: {\n      type: 'enum',\n      'default': 'missing',\n      options: [\n        'missing',\n        'popular',\n        'always'\n      ],\n      name: 'suggest_mode'\n    },\n    suggestSize: {\n      type: 'number',\n      name: 'suggest_size'\n    },\n    suggestText: {\n      type: 'string',\n      name: 'suggest_text'\n    },\n    timeout: {\n      type: 'time'\n    },\n    trackScores: {\n      type: 'boolean',\n      name: 'track_scores'\n    },\n    version: {\n      type: 'boolean'\n    },\n    requestCache: {\n      type: 'boolean',\n      name: 'request_cache'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchShards](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-shards.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.searchShards = ca({\n  params: {\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search_shards',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search_shards',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search_shards'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.searchTemplate = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'time'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch'\n      ],\n      name: 'search_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search/template',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search/template',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/template'\n    }\n  ],\n  method: 'POST'\n});\n\napi.snapshot = namespace();\n\n/**\n * Perform a [snapshot.create](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype.create = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.createRepository](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.verify - Whether to verify the repository after creation\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n */\napi.snapshot.prototype.createRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    },\n    verify: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>',\n    req: {\n      repository: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.delete](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype['delete'] = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [snapshot.deleteRepository](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n */\napi.snapshot.prototype.deleteRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>',\n    req: {\n      repository: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [snapshot.get](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n */\napi.snapshot.prototype.get = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'list'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [snapshot.getRepository](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n */\napi.snapshot.prototype.getRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_snapshot/<%=repository%>',\n      req: {\n        repository: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot'\n    }\n  ]\n});\n\n/**\n * Perform a [snapshot.restore](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype.restore = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_restore',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.status](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n */\napi.snapshot.prototype.status = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_status',\n      req: {\n        repository: {\n          type: 'string'\n        },\n        snapshot: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot/<%=repository%>/_status',\n      req: {\n        repository: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot/_status'\n    }\n  ]\n});\n\n/**\n * Perform a [snapshot.verifyRepository](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n */\napi.snapshot.prototype.verifyRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/_verify',\n    req: {\n      repository: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [suggest](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-suggesters.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n */\napi.suggest = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_suggest',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_suggest'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\napi.tasks = namespace();\n\n/**\n * Perform a [tasks.cancel](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/tasks.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be cancelled. Leave empty to cancel all.\n * @param {<<api-param-type-string,`String`>>} params.parentNode - Cancel tasks with specified parent node.\n * @param {<<api-param-type-string,`String`>>} params.parentTask - Cancel tasks with specified parent task id (node_id:task_number). Set to -1 to cancel all.\n * @param {<<api-param-type-string,`String`>>} params.taskId - Cancel the task with specified task id (node_id:task_number)\n */\napi.tasks.prototype.cancel = ca({\n  params: {\n    nodeId: {\n      type: 'list',\n      name: 'node_id'\n    },\n    actions: {\n      type: 'list'\n    },\n    parentNode: {\n      type: 'string',\n      name: 'parent_node'\n    },\n    parentTask: {\n      type: 'string',\n      name: 'parent_task'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_tasks/<%=taskId%>/_cancel',\n      req: {\n        taskId: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_tasks/_cancel'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [tasks.get](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/tasks.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Wait for the matching tasks to complete (default: false)\n * @param {<<api-param-type-string,`String`>>} params.taskId - Return the task with specified id (node_id:task_number)\n */\napi.tasks.prototype.get = ca({\n  params: {\n    waitForCompletion: {\n      type: 'boolean',\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_tasks/<%=taskId%>',\n    req: {\n      taskId: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [tasks.list](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/tasks.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be returned. Leave empty to return all.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Return detailed task information (default: false)\n * @param {<<api-param-type-string,`String`>>} params.parentNode - Return tasks with specified parent node.\n * @param {<<api-param-type-string,`String`>>} params.parentTask - Return tasks with specified parent task id (node_id:task_number). Set to -1 to return all.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Wait for the matching tasks to complete (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.groupBy=nodes] - Group tasks by nodes or parent/child relationships\n */\napi.tasks.prototype.list = ca({\n  params: {\n    nodeId: {\n      type: 'list',\n      name: 'node_id'\n    },\n    actions: {\n      type: 'list'\n    },\n    detailed: {\n      type: 'boolean'\n    },\n    parentNode: {\n      type: 'string',\n      name: 'parent_node'\n    },\n    parentTask: {\n      type: 'string',\n      name: 'parent_task'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      name: 'wait_for_completion'\n    },\n    groupBy: {\n      type: 'enum',\n      'default': 'nodes',\n      options: [\n        'nodes',\n        'parents'\n      ],\n      name: 'group_by'\n    }\n  },\n  url: {\n    fmt: '/_tasks'\n  }\n});\n\n/**\n * Perform a [termvectors](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-termvectors.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random).\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value.\n * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if request is real-time as opposed to near-real-time (default: true).\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n * @param {<<api-param-type-string,`String`>>} params.id - The id of the document, when not specified a doc param should be supplied.\n */\napi.termvectors = ca({\n  params: {\n    termStatistics: {\n      type: 'boolean',\n      'default': false,\n      required: false,\n      name: 'term_statistics'\n    },\n    fieldStatistics: {\n      type: 'boolean',\n      'default': true,\n      required: false,\n      name: 'field_statistics'\n    },\n    fields: {\n      type: 'list',\n      required: false\n    },\n    offsets: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    positions: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    payloads: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    preference: {\n      type: 'string',\n      required: false\n    },\n    routing: {\n      type: 'string',\n      required: false\n    },\n    parent: {\n      type: 'string',\n      required: false\n    },\n    realtime: {\n      type: 'boolean',\n      required: false\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_termvectors',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_termvectors',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [update](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-update.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the update operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.lang - The script language (default: groovy)\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document. Is is only used for routing and when for the upsert request\n * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n * @param {<<api-param-type-number,`Number`>>} params.retryOnConflict - Specify how many times should the operation be retried when a conflict occurs (default: 0)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.update = ca({\n  params: {\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    },\n    fields: {\n      type: 'list'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    lang: {\n      type: 'string'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'enum',\n      options: [\n        'true',\n        'false',\n        'wait_for',\n        ''\n      ]\n    },\n    retryOnConflict: {\n      type: 'number',\n      name: 'retry_on_conflict'\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'time'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_update',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [updateByQuery](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-update-by-query.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.conflicts=abort] - What to do when the update by query hits version conflicts?\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.pipeline - Ingest pipeline to set on index requests made by this action. (default: none)\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.searchTimeout - Explicit timeout for each search request. Defaults to no timeout.\n * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n * @param {<<api-param-type-boolean,`Boolean`>>} params.versionType - Should the document increment the version number (internal) on hit or not (reindex)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the update by query operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n * @param {<<api-param-type-number,`Number`>>} params.scrollSize - Size on the scroll request powering the update_by_query\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should the request should block until the update by query operation is complete.\n * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in sub-requests per second. -1 means set no throttle as does \"unlimited\" which is the only non-float this accepts.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.updateByQuery = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    from: {\n      type: 'number'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    conflicts: {\n      type: 'enum',\n      'default': 'abort',\n      options: [\n        'abort',\n        'proceed'\n      ]\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    pipeline: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'time'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'dfs_query_then_fetch'\n      ],\n      name: 'search_type'\n    },\n    searchTimeout: {\n      type: 'time',\n      name: 'search_timeout'\n    },\n    size: {\n      type: 'number'\n    },\n    sort: {\n      type: 'list'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    terminateAfter: {\n      type: 'number',\n      name: 'terminate_after'\n    },\n    stats: {\n      type: 'list'\n    },\n    version: {\n      type: 'boolean'\n    },\n    versionType: {\n      type: 'boolean',\n      name: 'version_type'\n    },\n    requestCache: {\n      type: 'boolean',\n      name: 'request_cache'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    timeout: {\n      type: 'time',\n      'default': '1m'\n    },\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    },\n    scrollSize: {\n      type: 'number',\n      name: 'scroll_size'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    },\n    requestsPerSecond: {\n      type: 'number',\n      'default': 0,\n      name: 'requests_per_second'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_update_by_query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_update_by_query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/apis/2_4.js":"var ca = require('../client_action').makeFactoryWithModifier(function (spec) {\n  return require('../utils').merge(spec, {\n    params: {\n      filterPath: {\n        type: 'list',\n        name: 'filter_path'\n      }\n    }\n  });\n});\nvar namespace = require('../client_action').namespaceFactory;\nvar api = module.exports = {};\n\napi._namespaces = ['cat', 'cluster', 'indices', 'nodes', 'snapshot', 'tasks'];\n\n/**\n * Perform a [bulk](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-bulk.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.type - Default document type for items which don't provide one\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - Default comma-separated list of fields to return in the response for updates\n * @param {<<api-param-type-string,`String`>>} params.index - Default index for items which don't provide one\n */\napi.bulk = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    type: {\n      type: 'string'\n    },\n    fields: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_bulk'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\napi.cat = namespace();\n\n/**\n * Perform a [cat.aliases](http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.cat.prototype.aliases = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/aliases/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/aliases'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.allocation](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat-allocation.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information\n */\napi.cat.prototype.allocation = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/allocation/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/allocation'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.count](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat-count.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.count = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/count/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/count'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.fielddata](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat-fielddata.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return the fielddata size\n */\napi.cat.prototype.fielddata = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    },\n    fields: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/fielddata/<%=fields%>',\n      req: {\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/fielddata'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.health](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat-health.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.ts=true] - Set to false to disable timestamping\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.health = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    ts: {\n      type: 'boolean',\n      'default': true\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/health'\n  }\n});\n\n/**\n * Perform a [cat.help](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n */\napi.cat.prototype.help = ca({\n  params: {\n    help: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat'\n  }\n});\n\n/**\n * Perform a [cat.indices](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat-indices.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.pri - Set to true to return stats only for primary shards\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.indices = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    pri: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/indices/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/indices'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.master](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat-master.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.master = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/master'\n  }\n});\n\n/**\n * Perform a [cat.nodeattrs](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat-nodeattrs.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.nodeattrs = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/nodeattrs'\n  }\n});\n\n/**\n * Perform a [cat.nodes](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat-nodes.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.nodes = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/nodes'\n  }\n});\n\n/**\n * Perform a [cat.pendingTasks](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat-pending-tasks.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.pendingTasks = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/pending_tasks'\n  }\n});\n\n/**\n * Perform a [cat.plugins](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat-plugins.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.plugins = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/plugins'\n  }\n});\n\n/**\n * Perform a [cat.recovery](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat-recovery.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.recovery = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/recovery/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/recovery'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.repositories](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat-repositories.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.repositories = ca({\n  params: {\n    local: {\n      type: 'boolean',\n      'default': false\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/repositories'\n  }\n});\n\n/**\n * Perform a [cat.segments](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat-segments.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.segments = ca({\n  params: {\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/segments/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/segments'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.shards](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat-shards.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.shards = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/shards/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/shards'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.snapshots](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Set to true to ignore unavailable snapshots\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - Name of repository from which to fetch the snapshot information\n */\napi.cat.prototype.snapshots = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      'default': false,\n      name: 'ignore_unavailable'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/snapshots/<%=repository%>',\n    req: {\n      repository: {\n        type: 'list'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [cat.threadPool](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat-thread-pool.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fullId - Enables displaying the complete node ids\n */\napi.cat.prototype.threadPool = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    },\n    fullId: {\n      type: 'boolean',\n      'default': false,\n      name: 'full_id'\n    }\n  },\n  url: {\n    fmt: '/_cat/thread_pool'\n  }\n});\n\n/**\n * Perform a [clearScroll](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.scrollId - A comma-separated list of scroll IDs to clear\n */\napi.clearScroll = ca({\n  urls: [\n    {\n      fmt: '/_search/scroll/<%=scrollId%>',\n      req: {\n        scrollId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/scroll'\n    }\n  ],\n  paramAsBody: 'scrollId',\n  method: 'DELETE'\n});\n\napi.cluster = namespace();\n\n/**\n * Perform a [cluster.getSettings](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.getSettings = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/settings'\n  }\n});\n\n/**\n * Perform a [cluster.health](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cluster-health.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Specify the level of detail for returned information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-number,`Number`>>} params.waitForActiveShards - Wait until the specified number of shards is active\n * @param {<<api-param-type-string,`String`>>} params.waitForNodes - Wait until the specified number of nodes is available\n * @param {<<api-param-type-number,`Number`>>} params.waitForRelocatingShards - Wait until the specified number of relocating shards is finished\n * @param {<<api-param-type-string,`String`>>} params.waitForStatus - Wait until cluster is in a specific state\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - Limit the information returned to a specific index\n */\napi.cluster.prototype.health = ca({\n  params: {\n    level: {\n      type: 'enum',\n      'default': 'cluster',\n      options: [\n        'cluster',\n        'indices',\n        'shards'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    },\n    waitForActiveShards: {\n      type: 'number',\n      name: 'wait_for_active_shards'\n    },\n    waitForNodes: {\n      type: 'string',\n      name: 'wait_for_nodes'\n    },\n    waitForRelocatingShards: {\n      type: 'number',\n      name: 'wait_for_relocating_shards'\n    },\n    waitForStatus: {\n      type: 'enum',\n      'default': null,\n      options: [\n        'green',\n        'yellow',\n        'red'\n      ],\n      name: 'wait_for_status'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/health/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/health'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.pendingTasks](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cluster-pending.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.cluster.prototype.pendingTasks = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_cluster/pending_tasks'\n  }\n});\n\n/**\n * Perform a [cluster.putSettings](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.putSettings = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/settings'\n  },\n  method: 'PUT'\n});\n\n/**\n * Perform a [cluster.reroute](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cluster-reroute.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - Simulate the operation only and return the resulting state\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return an explanation of why the commands can or cannot be executed\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics. Defaults to all but metadata\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.reroute = ca({\n  params: {\n    dryRun: {\n      type: 'boolean',\n      name: 'dry_run'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    metric: {\n      type: 'list',\n      options: [\n        '_all',\n        'blocks',\n        'metadata',\n        'nodes',\n        'routing_table',\n        'master_node',\n        'version'\n      ]\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/reroute'\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [cluster.state](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cluster-state.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n */\napi.cluster.prototype.state = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/state/<%=metric%>/<%=index%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'blocks',\n            'metadata',\n            'nodes',\n            'routing_table',\n            'routing_nodes',\n            'master_node',\n            'version'\n          ]\n        },\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/state/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'blocks',\n            'metadata',\n            'nodes',\n            'routing_table',\n            'routing_nodes',\n            'master_node',\n            'version'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/state'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.stats](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cluster-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.cluster.prototype.stats = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/stats/nodes/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/stats'\n    }\n  ]\n});\n\n/**\n * Perform a [count](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-count.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n */\napi.count = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    minScore: {\n      type: 'number',\n      name: 'min_score'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_count'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [countPercolate](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to count percolate the document into. Defaults to index.\n * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to count percolate document into. Defaults to type.\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being count percolated.\n * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n */\napi.countPercolate = ca({\n  params: {\n    routing: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    percolateIndex: {\n      type: 'string',\n      name: 'percolate_index'\n    },\n    percolateType: {\n      type: 'string',\n      name: 'percolate_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate/count',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_percolate/count',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [delete](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-delete.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Specific write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi['delete'] = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteScript](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.deleteScript = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.deleteTemplate = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [exists](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.exists = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [explain](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-explain.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer for the query string query\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The default field for query string query (default: _all)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.explain = ca({\n  params: {\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    fields: {\n      type: 'list'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_explain',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [fieldStats](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-field-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for to get field statistics for (min value, max value, and more)\n * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Defines if field stats should be returned on a per index level or on a cluster wide level\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.fieldStats = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    level: {\n      type: 'enum',\n      'default': 'cluster',\n      options: [\n        'indices',\n        'cluster'\n      ]\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_field_stats',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_field_stats'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [get](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.get = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getScript](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.getScript = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getSource](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types\n */\napi.getSource = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.getTemplate = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [index](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the affected shards after performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.index = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'time'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\napi.indices = namespace();\n\n/**\n * Perform a [indices.analyze](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-analyze.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The name of the analyzer to use\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.charFilters - Deprecated : A comma-separated list of character filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.charFilter - A comma-separated list of character filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>} params.field - Use the analyzer configured for this field (instead of passing the analyzer name)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.filters - Deprecated : A comma-separated list of filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.filter - A comma-separated list of filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index to scope the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.preferLocal - With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.text - The text on which the analysis should be performed (when request body is not used)\n * @param {<<api-param-type-string,`String`>>} params.tokenizer - The name of the tokenizer to use for the analysis\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - With `true`, outputs more advanced details. (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.attributes - A comma-separated list of token attributes to output, this parameter works only with `explain=true`\n * @param {<<api-param-type-string,`String`>>} [params.format=detailed] - Format of the output\n */\napi.indices.prototype.analyze = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    charFilters: {\n      type: 'list',\n      name: 'char_filters'\n    },\n    charFilter: {\n      type: 'list',\n      name: 'char_filter'\n    },\n    field: {\n      type: 'string'\n    },\n    filters: {\n      type: 'list'\n    },\n    filter: {\n      type: 'list'\n    },\n    index: {\n      type: 'string'\n    },\n    preferLocal: {\n      type: 'boolean',\n      name: 'prefer_local'\n    },\n    text: {\n      type: 'list'\n    },\n    tokenizer: {\n      type: 'string'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    attributes: {\n      type: 'list'\n    },\n    format: {\n      type: 'enum',\n      'default': 'detailed',\n      options: [\n        'detailed',\n        'text'\n      ]\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_analyze',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_analyze'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.clearCache](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-clearcache.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fieldData - Clear field data\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fielddata - Clear field data\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to clear when using the `field_data` parameter (default: all)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.query - Clear query caches\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index name to limit the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.recycler - Clear the recycler cache\n * @param {<<api-param-type-boolean,`Boolean`>>} params.request - Clear request cache\n */\napi.indices.prototype.clearCache = ca({\n  params: {\n    fieldData: {\n      type: 'boolean',\n      name: 'field_data'\n    },\n    fielddata: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    query: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    index: {\n      type: 'list'\n    },\n    recycler: {\n      type: 'boolean'\n    },\n    request: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_cache/clear',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cache/clear'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.close](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma separated list of indices to close\n */\napi.indices.prototype.close = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_close',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.create](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-create-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.updateAllTypes - Whether to update the mapping for all fields with the same name across all types or not\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.create = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    updateAllTypes: {\n      type: 'boolean',\n      name: 'update_all_types'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.delete](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-delete-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices\n */\napi.indices.prototype['delete'] = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteAlias](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.\n */\napi.indices.prototype.deleteAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_alias/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.deleteTemplate = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteWarmer](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of warmer names to delete (supports wildcards); use `_all` to delete all warmers in the specified indices. You must specify a name either in the uri or in the parameters.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to delete warmers from (supports wildcards); use `_all` to perform the operation on all indices.\n */\napi.indices.prototype.deleteWarmer = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    name: {\n      type: 'list'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_warmer/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.exists](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to check\n */\napi.indices.prototype.exists = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsAlias](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.existsAlias = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': [\n        'open',\n        'closed'\n      ],\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_alias',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.existsTemplate = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsType](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-types-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` to check the types across all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to check\n */\napi.indices.prototype.existsType = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      type: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.flush](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-flush.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitIfOngoing - If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. The default is false and will cause an exception to be thrown on the shard level if another flush operation is already running.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n */\napi.indices.prototype.flush = ca({\n  params: {\n    force: {\n      type: 'boolean'\n    },\n    waitIfOngoing: {\n      type: 'boolean',\n      name: 'wait_if_ongoing'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_flush',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_flush'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.flushSynced](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-synced-flush.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n */\napi.indices.prototype.flushSynced = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_flush/synced',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_flush/synced'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.forcemerge](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-forcemerge.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flush - Specify whether the index should be flushed after performing the operation (default: true)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.maxNumSegments - The number of segments the index should be merged into (default: dynamic)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyExpungeDeletes - Specify whether the operation should only expunge deleted documents\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForMerge - Specify whether the request should block until the merge process is finished (default: true)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.forcemerge = ca({\n  params: {\n    flush: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    maxNumSegments: {\n      type: 'number',\n      name: 'max_num_segments'\n    },\n    onlyExpungeDeletes: {\n      type: 'boolean',\n      name: 'only_expunge_deletes'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    waitForMerge: {\n      type: 'boolean',\n      name: 'wait_for_merge'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_forcemerge',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_forcemerge'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.get](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-get-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Ignore unavailable indexes (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return version and creation date values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.feature - A comma-separated list of features\n */\napi.indices.prototype.get = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=feature%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        feature: {\n          type: 'list',\n          options: [\n            '_settings',\n            '_mappings',\n            '_warmers',\n            '_aliases'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getAlias](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.getAlias = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_alias',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getAliases](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to filter\n */\napi.indices.prototype.getAliases = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_aliases/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_aliases',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_aliases/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_aliases'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getFieldMapping](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-get-field-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether the default mapping values should be returned as well\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields\n */\napi.indices.prototype.getFieldMapping = ca({\n  params: {\n    includeDefaults: {\n      type: 'boolean',\n      name: 'include_defaults'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>/field/<%=fields%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping/field/<%=fields%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>/field/<%=fields%>',\n      req: {\n        type: {\n          type: 'list'\n        },\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/field/<%=fields%>',\n      req: {\n        fields: {\n          type: 'list'\n        }\n      }\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getMapping](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-get-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n */\napi.indices.prototype.getMapping = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>',\n      req: {\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getSettings](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-get-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return version and creation date values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the settings that should be included\n */\napi.indices.prototype.getSettings = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': [\n        'open',\n        'closed'\n      ],\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    local: {\n      type: 'boolean'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The comma separated names of the index templates\n */\napi.indices.prototype.getTemplate = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_template/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_template'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getUpgrade](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-upgrade.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.getUpgrade = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_upgrade',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_upgrade'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getWarmer](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the warmer (supports wildcards); leave empty to get all warmers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n */\napi.indices.prototype.getWarmer = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.open](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma separated list of indices to open\n */\napi.indices.prototype.open = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'closed',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_open',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.optimize](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-optimize.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flush - Specify whether the index should be flushed after performing the operation (default: true)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.maxNumSegments - The number of segments the index should be merged into (default: dynamic)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyExpungeDeletes - Specify whether the operation should only expunge deleted documents\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForMerge - Specify whether the request should block until the merge process is finished (default: true)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.optimize = ca({\n  params: {\n    flush: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    maxNumSegments: {\n      type: 'number',\n      name: 'max_num_segments'\n    },\n    onlyExpungeDeletes: {\n      type: 'boolean',\n      name: 'only_expunge_deletes'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    waitForMerge: {\n      type: 'boolean',\n      name: 'wait_for_merge'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_optimize',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_optimize'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.putAlias](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the alias to be created or updated\n */\napi.indices.prototype.putAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_alias/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putMapping](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-put-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.updateAllTypes - Whether to update the mapping for all fields with the same name across all types or not\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.\n * @param {<<api-param-type-string,`String`>>} params.type - The name of the document type\n */\napi.indices.prototype.putMapping = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    updateAllTypes: {\n      type: 'boolean',\n      name: 'update_all_types'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>',\n      req: {\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putSettings](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.putSettings = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.order - The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.create - Whether the index template should only be added if new or can also replace an existing one\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.putTemplate = ca({\n  params: {\n    order: {\n      type: 'number'\n    },\n    create: {\n      type: 'boolean',\n      'default': false\n    },\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putWarmer](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed) in the search request to warm\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices in the search request to warm. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both, in the search request to warm.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify whether the request to be warmed should use the request cache, defaults to index level setting\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the warmer\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types\n */\napi.indices.prototype.putWarmer = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    requestCache: {\n      type: 'boolean',\n      name: 'request_cache'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer/<%=name%>',\n      req: {\n        name: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.recovery](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-recovery.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Whether to display detailed information about shard recovery\n * @param {<<api-param-type-boolean,`Boolean`>>} params.activeOnly - Display only those recoveries that are currently on-going\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.recovery = ca({\n  params: {\n    detailed: {\n      type: 'boolean',\n      'default': false\n    },\n    activeOnly: {\n      type: 'boolean',\n      'default': false,\n      name: 'active_only'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_recovery',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_recovery'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.refresh](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-refresh.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Force a refresh even if not required\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.refresh = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    force: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_refresh',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_refresh'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.segments](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-segments.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Includes detailed memory usage by Lucene.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.segments = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    verbose: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_segments',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_segments'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.shardStores](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-shards-stores.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.status - A comma-separated list of statuses used to filter on shards to get store information for\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.shardStores = ca({\n  params: {\n    status: {\n      type: 'list',\n      options: [\n        'green',\n        'yellow',\n        'red',\n        'all'\n      ]\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_shard_stores',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_shard_stores'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.stats](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>} [params.level=indices] - Return stats aggregated at cluster, index or shard level\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned the specific metrics.\n */\napi.indices.prototype.stats = ca({\n  params: {\n    completionFields: {\n      type: 'list',\n      name: 'completion_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    fields: {\n      type: 'list'\n    },\n    groups: {\n      type: 'list'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    level: {\n      type: 'enum',\n      'default': 'indices',\n      options: [\n        'cluster',\n        'indices',\n        'shards'\n      ]\n    },\n    types: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_stats/<%=metric%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'query_cache',\n            'flush',\n            'get',\n            'indexing',\n            'merge',\n            'percolate',\n            'request_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_stats/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'query_cache',\n            'flush',\n            'get',\n            'indexing',\n            'merge',\n            'percolate',\n            'request_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_stats',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_stats'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.updateAliases](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Request timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.indices.prototype.updateAliases = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_aliases'\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.upgrade](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-upgrade.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Specify whether the request should block until the all segments are upgraded (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyAncientSegments - If true, only ancient (an older Lucene major release) segments will be upgraded\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.upgrade = ca({\n  params: {\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      name: 'wait_for_completion'\n    },\n    onlyAncientSegments: {\n      type: 'boolean',\n      name: 'only_ancient_segments'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_upgrade',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_upgrade'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.validateQuery](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-validate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return detailed information about the error\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-boolean,`Boolean`>>} params.rewrite - Provide a more detailed explanation showing the actual Lucene query that will be executed.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n */\napi.indices.prototype.validateQuery = ca({\n  params: {\n    explain: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    q: {\n      type: 'string'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    rewrite: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_validate/query'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [info](https://www.elastic.co/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.info = ca({\n  url: {\n    fmt: '/'\n  }\n});\n\n/**\n * Perform a [mget](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-multi-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.mget = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mget'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mpercolate](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated to use as default\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated to use as default.\n */\napi.mpercolate = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mpercolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mpercolate',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mpercolate'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [msearch](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-multi-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n */\napi.msearch = ca({\n  params: {\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_msearch'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mtermvectors](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-multi-termvectors.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.ids - A comma-separated list of documents ids. You must define ids as parameter or set \"ids\" or \"docs\" in the request body\n * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if requests are real-time as opposed to near-real-time (default: true).\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n */\napi.mtermvectors = ca({\n  params: {\n    ids: {\n      type: 'list',\n      required: false\n    },\n    termStatistics: {\n      type: 'boolean',\n      'default': false,\n      required: false,\n      name: 'term_statistics'\n    },\n    fieldStatistics: {\n      type: 'boolean',\n      'default': true,\n      required: false,\n      name: 'field_statistics'\n    },\n    fields: {\n      type: 'list',\n      required: false\n    },\n    offsets: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    positions: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    payloads: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    preference: {\n      type: 'string',\n      required: false\n    },\n    routing: {\n      type: 'string',\n      required: false\n    },\n    parent: {\n      type: 'string',\n      required: false\n    },\n    realtime: {\n      type: 'boolean',\n      required: false\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mtermvectors',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mtermvectors',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mtermvectors'\n    }\n  ],\n  method: 'POST'\n});\n\napi.nodes = namespace();\n\n/**\n * Perform a [nodes.hotThreads](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cluster-nodes-hot-threads.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.interval - The interval for the second sampling of threads\n * @param {<<api-param-type-number,`Number`>>} params.snapshots - Number of samples of thread stacktrace (default: 10)\n * @param {<<api-param-type-number,`Number`>>} params.threads - Specify the number of threads to provide information for (default: 3)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreIdleThreads - Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue (default: true)\n * @param {<<api-param-type-string,`String`>>} params.type - The type to sample (default: cpu)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.nodes.prototype.hotThreads = ca({\n  params: {\n    interval: {\n      type: 'time'\n    },\n    snapshots: {\n      type: 'number'\n    },\n    threads: {\n      type: 'number'\n    },\n    ignoreIdleThreads: {\n      type: 'boolean',\n      name: 'ignore_idle_threads'\n    },\n    type: {\n      type: 'enum',\n      options: [\n        'cpu',\n        'wait',\n        'block'\n      ]\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/hotthreads',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/hotthreads'\n    }\n  ]\n});\n\n/**\n * Perform a [nodes.info](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cluster-nodes-info.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - A comma-separated list of metrics you wish returned. Leave empty to return all.\n */\napi.nodes.prototype.info = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/<%=metric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            'settings',\n            'os',\n            'process',\n            'jvm',\n            'thread_pool',\n            'transport',\n            'http',\n            'plugins'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            'settings',\n            'os',\n            'process',\n            'jvm',\n            'thread_pool',\n            'transport',\n            'http',\n            'plugins'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes'\n    }\n  ]\n});\n\n/**\n * Perform a [nodes.stats](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cluster-nodes-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>} [params.level=node] - Return indices stats aggregated at node, index or shard level\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indexMetric - Limit the information returned for `indices` metric to the specific index metrics. Isn't used if `indices` (or `all`) metric isn't specified.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.nodes.prototype.stats = ca({\n  params: {\n    completionFields: {\n      type: 'list',\n      name: 'completion_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    fields: {\n      type: 'list'\n    },\n    groups: {\n      type: 'boolean'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    level: {\n      type: 'enum',\n      'default': 'node',\n      options: [\n        'node',\n        'indices',\n        'shards'\n      ]\n    },\n    types: {\n      type: 'list'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>/<%=indexMetric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        },\n        indexMetric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'query_cache',\n            'flush',\n            'get',\n            'indexing',\n            'merge',\n            'percolate',\n            'request_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats/<%=metric%>/<%=indexMetric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        },\n        indexMetric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'query_cache',\n            'flush',\n            'get',\n            'indexing',\n            'merge',\n            'percolate',\n            'request_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats'\n    }\n  ]\n});\n\n/**\n * Perform a [percolate](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to percolate the document into. Defaults to index.\n * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to percolate document into. Defaults to type.\n * @param {<<api-param-type-string,`String`>>} params.percolateRouting - The routing value to use when percolating the existing document.\n * @param {<<api-param-type-string,`String`>>} params.percolatePreference - Which shard to prefer when executing the percolate request.\n * @param {<<api-param-type-string,`String`>>} params.percolateFormat - Return an array of matching query IDs instead of objects\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being percolated.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated.\n * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n */\napi.percolate = ca({\n  params: {\n    routing: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    percolateIndex: {\n      type: 'string',\n      name: 'percolate_index'\n    },\n    percolateType: {\n      type: 'string',\n      name: 'percolate_type'\n    },\n    percolateRouting: {\n      type: 'string',\n      name: 'percolate_routing'\n    },\n    percolatePreference: {\n      type: 'string',\n      name: 'percolate_preference'\n    },\n    percolateFormat: {\n      type: 'enum',\n      options: [\n        'ids'\n      ],\n      name: 'percolate_format'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_percolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [ping](https://www.elastic.co/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.ping = ca({\n  url: {\n    fmt: '/'\n  },\n  requestTimeout: 3000,\n  method: 'HEAD'\n});\n\n/**\n * Perform a [putScript](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.putScript = ca({\n  params: {\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [putTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.putTemplate = ca({\n  params: {\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [reindex](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-reindex.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should the request should block until the reindex is complete.\n * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle for this request in sub-requests per second. 0 means set no throttle.\n */\napi.reindex = ca({\n  params: {\n    refresh: {\n      type: 'boolean'\n    },\n    timeout: {\n      type: 'time',\n      'default': '1m'\n    },\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    },\n    requestsPerSecond: {\n      type: 'number',\n      'default': 0,\n      name: 'requests_per_second'\n    }\n  },\n  url: {\n    fmt: '/_reindex'\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [reindexRethrottle](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-reindex.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in sub-requests per second. 0 means set no throttle. As does \"unlimited\". Otherwise it must be a float.\n * @param {<<api-param-type-string,`String`>>} params.taskId - The task id to rethrottle\n */\napi.reindexRethrottle = ca({\n  params: {\n    requestsPerSecond: {\n      type: 'number',\n      required: true,\n      name: 'requests_per_second'\n    }\n  },\n  url: {\n    fmt: '/_reindex/<%=taskId%>/_rethrottle',\n    req: {\n      taskId: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [renderSearchTemplate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/2.4/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.id - The id of the stored search template\n */\napi.renderSearchTemplate = ca({\n  urls: [\n    {\n      fmt: '/_render/template/<%=id%>',\n      req: {\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_render/template'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [scroll](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.scrollId - The scroll ID\n */\napi.scroll = ca({\n  params: {\n    scroll: {\n      type: 'time'\n    },\n    scrollId: {\n      type: 'string',\n      name: 'scroll_id'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_search/scroll/<%=scrollId%>',\n      req: {\n        scrollId: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_search/scroll'\n    }\n  ],\n  paramAsBody: 'scrollId',\n  method: 'POST'\n});\n\n/**\n * Perform a [search](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields to return as the field data representation of a field for each hit\n * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n * @param {<<api-param-type-string,`String`>>} params.suggestField - Specify which field to use for suggestions\n * @param {<<api-param-type-string,`String`>>} [params.suggestMode=missing] - Specify suggest mode\n * @param {<<api-param-type-number,`Number`>>} params.suggestSize - How many suggestions to return in response\n * @param {<<api-param-type-string,`String`>>} params.suggestText - The source text for which the suggestions should be returned\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.trackScores - Whether to calculate and return scores even if they are not used for sorting\n * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.search = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    from: {\n      type: 'number'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'time'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'dfs_query_then_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    },\n    size: {\n      type: 'number'\n    },\n    sort: {\n      type: 'list'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    terminateAfter: {\n      type: 'number',\n      name: 'terminate_after'\n    },\n    stats: {\n      type: 'list'\n    },\n    suggestField: {\n      type: 'string',\n      name: 'suggest_field'\n    },\n    suggestMode: {\n      type: 'enum',\n      'default': 'missing',\n      options: [\n        'missing',\n        'popular',\n        'always'\n      ],\n      name: 'suggest_mode'\n    },\n    suggestSize: {\n      type: 'number',\n      name: 'suggest_size'\n    },\n    suggestText: {\n      type: 'string',\n      name: 'suggest_text'\n    },\n    timeout: {\n      type: 'time'\n    },\n    trackScores: {\n      type: 'boolean',\n      name: 'track_scores'\n    },\n    version: {\n      type: 'boolean'\n    },\n    requestCache: {\n      type: 'boolean',\n      name: 'request_cache'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchExists](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n */\napi.searchExists = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    minScore: {\n      type: 'number',\n      name: 'min_score'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search/exists',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search/exists',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/exists'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchShards](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-shards.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.searchShards = ca({\n  params: {\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search_shards',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search_shards',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search_shards'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.searchTemplate = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'time'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search/template',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search/template',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/template'\n    }\n  ],\n  method: 'POST'\n});\n\napi.snapshot = namespace();\n\n/**\n * Perform a [snapshot.create](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype.create = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.createRepository](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.verify - Whether to verify the repository after creation\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n */\napi.snapshot.prototype.createRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    },\n    verify: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>',\n    req: {\n      repository: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.delete](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype['delete'] = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [snapshot.deleteRepository](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n */\napi.snapshot.prototype.deleteRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>',\n    req: {\n      repository: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [snapshot.get](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n */\napi.snapshot.prototype.get = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'list'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [snapshot.getRepository](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n */\napi.snapshot.prototype.getRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_snapshot/<%=repository%>',\n      req: {\n        repository: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot'\n    }\n  ]\n});\n\n/**\n * Perform a [snapshot.restore](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype.restore = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_restore',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.status](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n */\napi.snapshot.prototype.status = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_status',\n      req: {\n        repository: {\n          type: 'string'\n        },\n        snapshot: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot/<%=repository%>/_status',\n      req: {\n        repository: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot/_status'\n    }\n  ]\n});\n\n/**\n * Perform a [snapshot.verifyRepository](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n */\napi.snapshot.prototype.verifyRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/_verify',\n    req: {\n      repository: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [suggest](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-suggesters.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n */\napi.suggest = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_suggest',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_suggest'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\napi.tasks = namespace();\n\n/**\n * Perform a [tasks.cancel](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/tasks.html#_task_cancellation) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be cancelled. Leave empty to cancel all.\n * @param {<<api-param-type-string,`String`>>} params.parentNode - Cancel tasks with specified parent node.\n * @param {<<api-param-type-string,`String`>>} params.parentTask - Cancel tasks with specified parent task id (node_id:task_number). Set to -1 to cancel all.\n * @param {<<api-param-type-string,`String`>>} params.taskId - Cancel the task with specified id\n */\napi.tasks.prototype.cancel = ca({\n  params: {\n    nodeId: {\n      type: 'list',\n      name: 'node_id'\n    },\n    actions: {\n      type: 'list'\n    },\n    parentNode: {\n      type: 'string',\n      name: 'parent_node'\n    },\n    parentTask: {\n      type: 'string',\n      name: 'parent_task'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_tasks/<%=taskId%>/_cancel',\n      req: {\n        taskId: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_tasks/_cancel'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [tasks.list](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/tasks.html#_current_tasks_information) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be returned. Leave empty to return all.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Return detailed task information (default: false)\n * @param {<<api-param-type-string,`String`>>} params.parentNode - Return tasks with specified parent node.\n * @param {<<api-param-type-string,`String`>>} params.parentTask - Return tasks with specified parent task id (node_id:task_number). Set to -1 to return all.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Wait for the matching tasks to complete (default: false)\n * @param {<<api-param-type-string,`String`>>} params.taskId - Return the task with specified id (node_id:task_number)\n */\napi.tasks.prototype.list = ca({\n  params: {\n    nodeId: {\n      type: 'list',\n      name: 'node_id'\n    },\n    actions: {\n      type: 'list'\n    },\n    detailed: {\n      type: 'boolean'\n    },\n    parentNode: {\n      type: 'string',\n      name: 'parent_node'\n    },\n    parentTask: {\n      type: 'string',\n      name: 'parent_task'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      name: 'wait_for_completion'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_tasks/<%=taskId%>',\n      req: {\n        taskId: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_tasks'\n    }\n  ]\n});\n\n/**\n * Perform a [termvectors](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-termvectors.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.dfs - Specifies if distributed frequencies should be returned instead shard frequencies.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random).\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value.\n * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if request is real-time as opposed to near-real-time (default: true).\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n * @param {<<api-param-type-string,`String`>>} params.id - The id of the document, when not specified a doc param should be supplied.\n */\napi.termvectors = ca({\n  params: {\n    termStatistics: {\n      type: 'boolean',\n      'default': false,\n      required: false,\n      name: 'term_statistics'\n    },\n    fieldStatistics: {\n      type: 'boolean',\n      'default': true,\n      required: false,\n      name: 'field_statistics'\n    },\n    dfs: {\n      type: 'boolean',\n      'default': false,\n      required: false\n    },\n    fields: {\n      type: 'list',\n      required: false\n    },\n    offsets: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    positions: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    payloads: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    preference: {\n      type: 'string',\n      required: false\n    },\n    routing: {\n      type: 'string',\n      required: false\n    },\n    parent: {\n      type: 'string',\n      required: false\n    },\n    realtime: {\n      type: 'boolean',\n      required: false\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_termvectors',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_termvectors',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [update](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-update.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.lang - The script language (default: groovy)\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document. Is is only used for routing and when for the upsert request\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-number,`Number`>>} params.retryOnConflict - Specify how many times should the operation be retried when a conflict occurs (default: 0)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.script - The URL-encoded script definition (instead of using request body)\n * @param {<<api-param-type-string,`String`>>} params.scriptId - The id of a stored script\n * @param {<<api-param-type-boolean,`Boolean`>>} params.scriptedUpsert - True if the script referenced in script or script_id should be called to perform inserts - defaults to false\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.update = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    fields: {\n      type: 'list'\n    },\n    lang: {\n      type: 'string'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    retryOnConflict: {\n      type: 'number',\n      name: 'retry_on_conflict'\n    },\n    routing: {\n      type: 'string'\n    },\n    script: {\n      type: 'string'\n    },\n    scriptId: {\n      type: 'string',\n      name: 'script_id'\n    },\n    scriptedUpsert: {\n      type: 'boolean',\n      name: 'scripted_upsert'\n    },\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'time'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_update',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [updateByQuery](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-update-by-query.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields to return as the field data representation of a field for each hit\n * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.conflicts=abort] - What to do when the reindex hits version conflicts?\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.searchTimeout - Explicit timeout for each search request. Defaults to no timeout.\n * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n * @param {<<api-param-type-string,`String`>>} params.suggestField - Specify which field to use for suggestions\n * @param {<<api-param-type-string,`String`>>} [params.suggestMode=missing] - Specify suggest mode\n * @param {<<api-param-type-number,`Number`>>} params.suggestSize - How many suggestions to return in response\n * @param {<<api-param-type-string,`String`>>} params.suggestText - The source text for which the suggestions should be returned\n * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.trackScores - Whether to calculate and return scores even if they are not used for sorting\n * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n * @param {<<api-param-type-boolean,`Boolean`>>} params.versionType - Should the document increment the version number (internal) on hit or not (reindex)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-number,`Number`>>} params.scrollSize - Size on the scroll request powering the update_by_query\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should the request should block until the reindex is complete.\n * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle for this request in sub-requests per second. 0 means set no throttle.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.updateByQuery = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    from: {\n      type: 'number'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    conflicts: {\n      type: 'enum',\n      'default': 'abort',\n      options: [\n        'abort',\n        'proceed'\n      ]\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'time'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'dfs_query_then_fetch'\n      ],\n      name: 'search_type'\n    },\n    searchTimeout: {\n      type: 'time',\n      name: 'search_timeout'\n    },\n    size: {\n      type: 'number'\n    },\n    sort: {\n      type: 'list'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    terminateAfter: {\n      type: 'number',\n      name: 'terminate_after'\n    },\n    stats: {\n      type: 'list'\n    },\n    suggestField: {\n      type: 'string',\n      name: 'suggest_field'\n    },\n    suggestMode: {\n      type: 'enum',\n      'default': 'missing',\n      options: [\n        'missing',\n        'popular',\n        'always'\n      ],\n      name: 'suggest_mode'\n    },\n    suggestSize: {\n      type: 'number',\n      name: 'suggest_size'\n    },\n    suggestText: {\n      type: 'string',\n      name: 'suggest_text'\n    },\n    timeout: {\n      type: 'time',\n      'default': '1m'\n    },\n    trackScores: {\n      type: 'boolean',\n      name: 'track_scores'\n    },\n    version: {\n      type: 'boolean'\n    },\n    versionType: {\n      type: 'boolean',\n      name: 'version_type'\n    },\n    requestCache: {\n      type: 'boolean',\n      name: 'request_cache'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    scrollSize: {\n      type: 'number',\n      name: 'scroll_size'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    },\n    requestsPerSecond: {\n      type: 'number',\n      'default': 0,\n      name: 'requests_per_second'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_update_by_query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_update_by_query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [create](https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the affected shards after performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.create = ca.proxy(api.index, {\n  transform: function (params) {\n    params.op_type = 'create';\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/apis/2_3.js":"var ca = require('../client_action').makeFactoryWithModifier(function (spec) {\n  return require('../utils').merge(spec, {\n    params: {\n      filterPath: {\n        type: 'list',\n        name: 'filter_path'\n      }\n    }\n  });\n});\nvar namespace = require('../client_action').namespaceFactory;\nvar api = module.exports = {};\n\napi._namespaces = ['cat', 'cluster', 'indices', 'nodes', 'snapshot', 'tasks'];\n\n/**\n * Perform a [bulk](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/docs-bulk.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.type - Default document type for items which don't provide one\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - Default comma-separated list of fields to return in the response for updates\n * @param {<<api-param-type-string,`String`>>} params.index - Default index for items which don't provide one\n */\napi.bulk = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    type: {\n      type: 'string'\n    },\n    fields: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_bulk'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\napi.cat = namespace();\n\n/**\n * Perform a [cat.aliases](http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.cat.prototype.aliases = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/aliases/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/aliases'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.allocation](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/cat-allocation.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information\n */\napi.cat.prototype.allocation = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/allocation/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/allocation'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.count](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/cat-count.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.count = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/count/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/count'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.fielddata](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/cat-fielddata.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return the fielddata size\n */\napi.cat.prototype.fielddata = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    },\n    fields: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/fielddata/<%=fields%>',\n      req: {\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/fielddata'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.health](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/cat-health.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.ts=true] - Set to false to disable timestamping\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.health = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    ts: {\n      type: 'boolean',\n      'default': true\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/health'\n  }\n});\n\n/**\n * Perform a [cat.help](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/cat.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n */\napi.cat.prototype.help = ca({\n  params: {\n    help: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat'\n  }\n});\n\n/**\n * Perform a [cat.indices](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/cat-indices.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.pri - Set to true to return stats only for primary shards\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.indices = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    pri: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/indices/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/indices'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.master](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/cat-master.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.master = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/master'\n  }\n});\n\n/**\n * Perform a [cat.nodeattrs](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/cat-nodeattrs.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.nodeattrs = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/nodeattrs'\n  }\n});\n\n/**\n * Perform a [cat.nodes](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/cat-nodes.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.nodes = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/nodes'\n  }\n});\n\n/**\n * Perform a [cat.pendingTasks](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/cat-pending-tasks.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.pendingTasks = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/pending_tasks'\n  }\n});\n\n/**\n * Perform a [cat.plugins](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/cat-plugins.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.plugins = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/plugins'\n  }\n});\n\n/**\n * Perform a [cat.recovery](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/cat-recovery.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.recovery = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/recovery/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/recovery'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.repositories](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/cat-repositories.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.repositories = ca({\n  params: {\n    local: {\n      type: 'boolean',\n      'default': false\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/repositories'\n  }\n});\n\n/**\n * Perform a [cat.segments](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/cat-segments.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.segments = ca({\n  params: {\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/segments/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/segments'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.shards](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/cat-shards.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.shards = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/shards/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/shards'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.snapshots](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/cat-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Set to true to ignore unavailable snapshots\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - Name of repository from which to fetch the snapshot information\n */\napi.cat.prototype.snapshots = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      'default': false,\n      name: 'ignore_unavailable'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/snapshots/<%=repository%>',\n    req: {\n      repository: {\n        type: 'list'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [cat.threadPool](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/cat-thread-pool.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fullId - Enables displaying the complete node ids\n */\napi.cat.prototype.threadPool = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    },\n    fullId: {\n      type: 'boolean',\n      'default': false,\n      name: 'full_id'\n    }\n  },\n  url: {\n    fmt: '/_cat/thread_pool'\n  }\n});\n\n/**\n * Perform a [clearScroll](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.scrollId - A comma-separated list of scroll IDs to clear\n */\napi.clearScroll = ca({\n  urls: [\n    {\n      fmt: '/_search/scroll/<%=scrollId%>',\n      req: {\n        scrollId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/scroll'\n    }\n  ],\n  paramAsBody: 'scrollId',\n  method: 'DELETE'\n});\n\napi.cluster = namespace();\n\n/**\n * Perform a [cluster.getSettings](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.getSettings = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/settings'\n  }\n});\n\n/**\n * Perform a [cluster.health](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/cluster-health.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Specify the level of detail for returned information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-number,`Number`>>} params.waitForActiveShards - Wait until the specified number of shards is active\n * @param {<<api-param-type-string,`String`>>} params.waitForNodes - Wait until the specified number of nodes is available\n * @param {<<api-param-type-number,`Number`>>} params.waitForRelocatingShards - Wait until the specified number of relocating shards is finished\n * @param {<<api-param-type-string,`String`>>} params.waitForStatus - Wait until cluster is in a specific state\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - Limit the information returned to a specific index\n */\napi.cluster.prototype.health = ca({\n  params: {\n    level: {\n      type: 'enum',\n      'default': 'cluster',\n      options: [\n        'cluster',\n        'indices',\n        'shards'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    },\n    waitForActiveShards: {\n      type: 'number',\n      name: 'wait_for_active_shards'\n    },\n    waitForNodes: {\n      type: 'string',\n      name: 'wait_for_nodes'\n    },\n    waitForRelocatingShards: {\n      type: 'number',\n      name: 'wait_for_relocating_shards'\n    },\n    waitForStatus: {\n      type: 'enum',\n      'default': null,\n      options: [\n        'green',\n        'yellow',\n        'red'\n      ],\n      name: 'wait_for_status'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/health/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/health'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.pendingTasks](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/cluster-pending.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.cluster.prototype.pendingTasks = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_cluster/pending_tasks'\n  }\n});\n\n/**\n * Perform a [cluster.putSettings](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.putSettings = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/settings'\n  },\n  method: 'PUT'\n});\n\n/**\n * Perform a [cluster.reroute](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/cluster-reroute.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - Simulate the operation only and return the resulting state\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return an explanation of why the commands can or cannot be executed\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics. Defaults to all but metadata\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.reroute = ca({\n  params: {\n    dryRun: {\n      type: 'boolean',\n      name: 'dry_run'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    metric: {\n      type: 'list',\n      options: [\n        '_all',\n        'blocks',\n        'metadata',\n        'nodes',\n        'routing_table',\n        'master_node',\n        'version'\n      ]\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/reroute'\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [cluster.state](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/cluster-state.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n */\napi.cluster.prototype.state = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/state/<%=metric%>/<%=index%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'blocks',\n            'metadata',\n            'nodes',\n            'routing_table',\n            'routing_nodes',\n            'master_node',\n            'version'\n          ]\n        },\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/state/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'blocks',\n            'metadata',\n            'nodes',\n            'routing_table',\n            'routing_nodes',\n            'master_node',\n            'version'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/state'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.stats](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/cluster-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.cluster.prototype.stats = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/stats/nodes/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/stats'\n    }\n  ]\n});\n\n/**\n * Perform a [count](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-count.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n */\napi.count = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    minScore: {\n      type: 'number',\n      name: 'min_score'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_count'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [countPercolate](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to count percolate the document into. Defaults to index.\n * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to count percolate document into. Defaults to type.\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being count percolated.\n * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n */\napi.countPercolate = ca({\n  params: {\n    routing: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    percolateIndex: {\n      type: 'string',\n      name: 'percolate_index'\n    },\n    percolateType: {\n      type: 'string',\n      name: 'percolate_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate/count',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_percolate/count',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [delete](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/docs-delete.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Specific write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi['delete'] = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteScript](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.deleteScript = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.deleteTemplate = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [exists](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.exists = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [explain](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-explain.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer for the query string query\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The default field for query string query (default: _all)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.explain = ca({\n  params: {\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    fields: {\n      type: 'list'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_explain',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [fieldStats](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-field-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for to get field statistics for (min value, max value, and more)\n * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Defines if field stats should be returned on a per index level or on a cluster wide level\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.fieldStats = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    level: {\n      type: 'enum',\n      'default': 'cluster',\n      options: [\n        'indices',\n        'cluster'\n      ]\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_field_stats',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_field_stats'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [get](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.get = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getScript](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.getScript = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getSource](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types\n */\napi.getSource = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.getTemplate = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [index](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.index = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'duration'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\napi.indices = namespace();\n\n/**\n * Perform a [indices.analyze](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-analyze.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The name of the analyzer to use\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.charFilters - Deprecated : A comma-separated list of character filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.charFilter - A comma-separated list of character filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>} params.field - Use the analyzer configured for this field (instead of passing the analyzer name)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.filters - Deprecated : A comma-separated list of filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.filter - A comma-separated list of filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index to scope the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.preferLocal - With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.text - The text on which the analysis should be performed (when request body is not used)\n * @param {<<api-param-type-string,`String`>>} params.tokenizer - The name of the tokenizer to use for the analysis\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - With `true`, outputs more advanced details. (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.attributes - A comma-separated list of token attributes to output, this parameter works only with `explain=true`\n * @param {<<api-param-type-string,`String`>>} [params.format=detailed] - Format of the output\n */\napi.indices.prototype.analyze = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    charFilters: {\n      type: 'list',\n      name: 'char_filters'\n    },\n    charFilter: {\n      type: 'list',\n      name: 'char_filter'\n    },\n    field: {\n      type: 'string'\n    },\n    filters: {\n      type: 'list'\n    },\n    filter: {\n      type: 'list'\n    },\n    index: {\n      type: 'string'\n    },\n    preferLocal: {\n      type: 'boolean',\n      name: 'prefer_local'\n    },\n    text: {\n      type: 'list'\n    },\n    tokenizer: {\n      type: 'string'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    attributes: {\n      type: 'list'\n    },\n    format: {\n      type: 'enum',\n      'default': 'detailed',\n      options: [\n        'detailed',\n        'text'\n      ]\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_analyze',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_analyze'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.clearCache](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-clearcache.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fieldData - Clear field data\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fielddata - Clear field data\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to clear when using the `field_data` parameter (default: all)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.query - Clear query caches\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index name to limit the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.recycler - Clear the recycler cache\n * @param {<<api-param-type-boolean,`Boolean`>>} params.request - Clear request cache\n */\napi.indices.prototype.clearCache = ca({\n  params: {\n    fieldData: {\n      type: 'boolean',\n      name: 'field_data'\n    },\n    fielddata: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    query: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    index: {\n      type: 'list'\n    },\n    recycler: {\n      type: 'boolean'\n    },\n    request: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_cache/clear',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cache/clear'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.close](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma separated list of indices to close\n */\napi.indices.prototype.close = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_close',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.create](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-create-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.updateAllTypes - Whether to update the mapping for all fields with the same name across all types or not\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.create = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    updateAllTypes: {\n      type: 'boolean',\n      name: 'update_all_types'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.delete](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-delete-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices\n */\napi.indices.prototype['delete'] = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteAlias](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.\n */\napi.indices.prototype.deleteAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_alias/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.deleteTemplate = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteWarmer](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of warmer names to delete (supports wildcards); use `_all` to delete all warmers in the specified indices. You must specify a name either in the uri or in the parameters.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to delete warmers from (supports wildcards); use `_all` to perform the operation on all indices.\n */\napi.indices.prototype.deleteWarmer = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    name: {\n      type: 'list'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_warmer/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.exists](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to check\n */\napi.indices.prototype.exists = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsAlias](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.existsAlias = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': [\n        'open',\n        'closed'\n      ],\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_alias',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.existsTemplate = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsType](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-types-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` to check the types across all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to check\n */\napi.indices.prototype.existsType = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      type: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.flush](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-flush.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitIfOngoing - If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. The default is false and will cause an exception to be thrown on the shard level if another flush operation is already running.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n */\napi.indices.prototype.flush = ca({\n  params: {\n    force: {\n      type: 'boolean'\n    },\n    waitIfOngoing: {\n      type: 'boolean',\n      name: 'wait_if_ongoing'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_flush',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_flush'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.flushSynced](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-synced-flush.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n */\napi.indices.prototype.flushSynced = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_flush/synced',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_flush/synced'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.forcemerge](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-forcemerge.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flush - Specify whether the index should be flushed after performing the operation (default: true)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.maxNumSegments - The number of segments the index should be merged into (default: dynamic)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyExpungeDeletes - Specify whether the operation should only expunge deleted documents\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForMerge - Specify whether the request should block until the merge process is finished (default: true)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.forcemerge = ca({\n  params: {\n    flush: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    maxNumSegments: {\n      type: 'number',\n      name: 'max_num_segments'\n    },\n    onlyExpungeDeletes: {\n      type: 'boolean',\n      name: 'only_expunge_deletes'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    waitForMerge: {\n      type: 'boolean',\n      name: 'wait_for_merge'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_forcemerge',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_forcemerge'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.get](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-get-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Ignore unavailable indexes (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return version and creation date values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.feature - A comma-separated list of features\n */\napi.indices.prototype.get = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=feature%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        feature: {\n          type: 'list',\n          options: [\n            '_settings',\n            '_mappings',\n            '_warmers',\n            '_aliases'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getAlias](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.getAlias = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_alias',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getAliases](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to filter\n */\napi.indices.prototype.getAliases = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_aliases/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_aliases',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_aliases/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_aliases'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getFieldMapping](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-get-field-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether the default mapping values should be returned as well\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields\n */\napi.indices.prototype.getFieldMapping = ca({\n  params: {\n    includeDefaults: {\n      type: 'boolean',\n      name: 'include_defaults'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>/field/<%=fields%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping/field/<%=fields%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>/field/<%=fields%>',\n      req: {\n        type: {\n          type: 'list'\n        },\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/field/<%=fields%>',\n      req: {\n        fields: {\n          type: 'list'\n        }\n      }\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getMapping](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-get-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n */\napi.indices.prototype.getMapping = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>',\n      req: {\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getSettings](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-get-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return version and creation date values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the settings that should be included\n */\napi.indices.prototype.getSettings = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': [\n        'open',\n        'closed'\n      ],\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    local: {\n      type: 'boolean'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The comma separated names of the index templates\n */\napi.indices.prototype.getTemplate = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_template/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_template'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getUpgrade](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-upgrade.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.getUpgrade = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_upgrade',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_upgrade'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getWarmer](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the warmer (supports wildcards); leave empty to get all warmers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n */\napi.indices.prototype.getWarmer = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.open](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma separated list of indices to open\n */\napi.indices.prototype.open = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'closed',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_open',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.optimize](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-optimize.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flush - Specify whether the index should be flushed after performing the operation (default: true)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.maxNumSegments - The number of segments the index should be merged into (default: dynamic)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyExpungeDeletes - Specify whether the operation should only expunge deleted documents\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForMerge - Specify whether the request should block until the merge process is finished (default: true)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.optimize = ca({\n  params: {\n    flush: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    maxNumSegments: {\n      type: 'number',\n      name: 'max_num_segments'\n    },\n    onlyExpungeDeletes: {\n      type: 'boolean',\n      name: 'only_expunge_deletes'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    waitForMerge: {\n      type: 'boolean',\n      name: 'wait_for_merge'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_optimize',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_optimize'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.putAlias](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the alias to be created or updated\n */\napi.indices.prototype.putAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_alias/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putMapping](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-put-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.updateAllTypes - Whether to update the mapping for all fields with the same name across all types or not\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.\n * @param {<<api-param-type-string,`String`>>} params.type - The name of the document type\n */\napi.indices.prototype.putMapping = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    updateAllTypes: {\n      type: 'boolean',\n      name: 'update_all_types'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>',\n      req: {\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putSettings](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.putSettings = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.order - The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.create - Whether the index template should only be added if new or can also replace an existing one\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.putTemplate = ca({\n  params: {\n    order: {\n      type: 'number'\n    },\n    create: {\n      type: 'boolean',\n      'default': false\n    },\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putWarmer](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed) in the search request to warm\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices in the search request to warm. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both, in the search request to warm.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify whether the request to be warmed should use the request cache, defaults to index level setting\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the warmer\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types\n */\napi.indices.prototype.putWarmer = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    requestCache: {\n      type: 'boolean',\n      name: 'request_cache'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer/<%=name%>',\n      req: {\n        name: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.recovery](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-recovery.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Whether to display detailed information about shard recovery\n * @param {<<api-param-type-boolean,`Boolean`>>} params.activeOnly - Display only those recoveries that are currently on-going\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.recovery = ca({\n  params: {\n    detailed: {\n      type: 'boolean',\n      'default': false\n    },\n    activeOnly: {\n      type: 'boolean',\n      'default': false,\n      name: 'active_only'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_recovery',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_recovery'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.refresh](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-refresh.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Force a refresh even if not required\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.refresh = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    force: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_refresh',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_refresh'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.segments](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-segments.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Includes detailed memory usage by Lucene.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.segments = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    verbose: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_segments',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_segments'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.shardStores](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-shards-stores.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.status - A comma-separated list of statuses used to filter on shards to get store information for\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.shardStores = ca({\n  params: {\n    status: {\n      type: 'list',\n      options: [\n        'green',\n        'yellow',\n        'red',\n        'all'\n      ]\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_shard_stores',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_shard_stores'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.stats](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>} [params.level=indices] - Return stats aggregated at cluster, index or shard level\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned the specific metrics.\n */\napi.indices.prototype.stats = ca({\n  params: {\n    completionFields: {\n      type: 'list',\n      name: 'completion_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    fields: {\n      type: 'list'\n    },\n    groups: {\n      type: 'list'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    level: {\n      type: 'enum',\n      'default': 'indices',\n      options: [\n        'cluster',\n        'indices',\n        'shards'\n      ]\n    },\n    types: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_stats/<%=metric%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'query_cache',\n            'flush',\n            'get',\n            'indexing',\n            'merge',\n            'percolate',\n            'request_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_stats/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'query_cache',\n            'flush',\n            'get',\n            'indexing',\n            'merge',\n            'percolate',\n            'request_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_stats',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_stats'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.updateAliases](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Request timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.indices.prototype.updateAliases = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_aliases'\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.upgrade](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/indices-upgrade.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Specify whether the request should block until the all segments are upgraded (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyAncientSegments - If true, only ancient (an older Lucene major release) segments will be upgraded\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.upgrade = ca({\n  params: {\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      name: 'wait_for_completion'\n    },\n    onlyAncientSegments: {\n      type: 'boolean',\n      name: 'only_ancient_segments'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_upgrade',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_upgrade'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.validateQuery](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-validate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return detailed information about the error\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-boolean,`Boolean`>>} params.rewrite - Provide a more detailed explanation showing the actual Lucene query that will be executed.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n */\napi.indices.prototype.validateQuery = ca({\n  params: {\n    explain: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    q: {\n      type: 'string'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    rewrite: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_validate/query'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [info](http://www.elastic.co/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.info = ca({\n  url: {\n    fmt: '/'\n  }\n});\n\n/**\n * Perform a [mget](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/docs-multi-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.mget = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mget'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mpercolate](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated to use as default\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated to use as default.\n */\napi.mpercolate = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mpercolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mpercolate',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mpercolate'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [msearch](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n */\napi.msearch = ca({\n  params: {\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_msearch'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mtermvectors](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/docs-multi-termvectors.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.ids - A comma-separated list of documents ids. You must define ids as parameter or set \"ids\" or \"docs\" in the request body\n * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if requests are real-time as opposed to near-real-time (default: true).\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n */\napi.mtermvectors = ca({\n  params: {\n    ids: {\n      type: 'list',\n      required: false\n    },\n    termStatistics: {\n      type: 'boolean',\n      'default': false,\n      required: false,\n      name: 'term_statistics'\n    },\n    fieldStatistics: {\n      type: 'boolean',\n      'default': true,\n      required: false,\n      name: 'field_statistics'\n    },\n    fields: {\n      type: 'list',\n      required: false\n    },\n    offsets: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    positions: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    payloads: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    preference: {\n      type: 'string',\n      required: false\n    },\n    routing: {\n      type: 'string',\n      required: false\n    },\n    parent: {\n      type: 'string',\n      required: false\n    },\n    realtime: {\n      type: 'boolean',\n      required: false\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mtermvectors',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mtermvectors',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mtermvectors'\n    }\n  ],\n  method: 'POST'\n});\n\napi.nodes = namespace();\n\n/**\n * Perform a [nodes.hotThreads](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/cluster-nodes-hot-threads.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.interval - The interval for the second sampling of threads\n * @param {<<api-param-type-number,`Number`>>} params.snapshots - Number of samples of thread stacktrace (default: 10)\n * @param {<<api-param-type-number,`Number`>>} params.threads - Specify the number of threads to provide information for (default: 3)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreIdleThreads - Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue (default: true)\n * @param {<<api-param-type-string,`String`>>} params.type - The type to sample (default: cpu)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.nodes.prototype.hotThreads = ca({\n  params: {\n    interval: {\n      type: 'time'\n    },\n    snapshots: {\n      type: 'number'\n    },\n    threads: {\n      type: 'number'\n    },\n    ignoreIdleThreads: {\n      type: 'boolean',\n      name: 'ignore_idle_threads'\n    },\n    type: {\n      type: 'enum',\n      options: [\n        'cpu',\n        'wait',\n        'block'\n      ]\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/hotthreads',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/hotthreads'\n    }\n  ]\n});\n\n/**\n * Perform a [nodes.info](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/cluster-nodes-info.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - A comma-separated list of metrics you wish returned. Leave empty to return all.\n */\napi.nodes.prototype.info = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/<%=metric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            'settings',\n            'os',\n            'process',\n            'jvm',\n            'thread_pool',\n            'transport',\n            'http',\n            'plugins'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            'settings',\n            'os',\n            'process',\n            'jvm',\n            'thread_pool',\n            'transport',\n            'http',\n            'plugins'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes'\n    }\n  ]\n});\n\n/**\n * Perform a [nodes.stats](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/cluster-nodes-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>} [params.level=node] - Return indices stats aggregated at node, index or shard level\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indexMetric - Limit the information returned for `indices` metric to the specific index metrics. Isn't used if `indices` (or `all`) metric isn't specified.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.nodes.prototype.stats = ca({\n  params: {\n    completionFields: {\n      type: 'list',\n      name: 'completion_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    fields: {\n      type: 'list'\n    },\n    groups: {\n      type: 'boolean'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    level: {\n      type: 'enum',\n      'default': 'node',\n      options: [\n        'node',\n        'indices',\n        'shards'\n      ]\n    },\n    types: {\n      type: 'list'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>/<%=indexMetric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        },\n        indexMetric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'query_cache',\n            'flush',\n            'get',\n            'indexing',\n            'merge',\n            'percolate',\n            'request_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats/<%=metric%>/<%=indexMetric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        },\n        indexMetric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'query_cache',\n            'flush',\n            'get',\n            'indexing',\n            'merge',\n            'percolate',\n            'request_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats'\n    }\n  ]\n});\n\n/**\n * Perform a [percolate](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to percolate the document into. Defaults to index.\n * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to percolate document into. Defaults to type.\n * @param {<<api-param-type-string,`String`>>} params.percolateRouting - The routing value to use when percolating the existing document.\n * @param {<<api-param-type-string,`String`>>} params.percolatePreference - Which shard to prefer when executing the percolate request.\n * @param {<<api-param-type-string,`String`>>} params.percolateFormat - Return an array of matching query IDs instead of objects\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being percolated.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated.\n * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n */\napi.percolate = ca({\n  params: {\n    routing: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    percolateIndex: {\n      type: 'string',\n      name: 'percolate_index'\n    },\n    percolateType: {\n      type: 'string',\n      name: 'percolate_type'\n    },\n    percolateRouting: {\n      type: 'string',\n      name: 'percolate_routing'\n    },\n    percolatePreference: {\n      type: 'string',\n      name: 'percolate_preference'\n    },\n    percolateFormat: {\n      type: 'enum',\n      options: [\n        'ids'\n      ],\n      name: 'percolate_format'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_percolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [ping](http://www.elastic.co/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.ping = ca({\n  url: {\n    fmt: '/'\n  },\n  requestTimeout: 3000,\n  method: 'HEAD'\n});\n\n/**\n * Perform a [putScript](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.putScript = ca({\n  params: {\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [putTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.putTemplate = ca({\n  params: {\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [reindex](https://www.elastic.co/guide/en/elasticsearch/reference/2.3/docs-reindex.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should the request should block until the reindex is complete.\n */\napi.reindex = ca({\n  params: {\n    refresh: {\n      type: 'boolean'\n    },\n    timeout: {\n      type: 'time',\n      'default': '1m'\n    },\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_reindex'\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [renderSearchTemplate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/2.3/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.id - The id of the stored search template\n */\napi.renderSearchTemplate = ca({\n  urls: [\n    {\n      fmt: '/_render/template/<%=id%>',\n      req: {\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_render/template'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [scroll](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.scrollId - The scroll ID\n */\napi.scroll = ca({\n  params: {\n    scroll: {\n      type: 'duration'\n    },\n    scrollId: {\n      type: 'string',\n      name: 'scroll_id'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_search/scroll/<%=scrollId%>',\n      req: {\n        scrollId: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_search/scroll'\n    }\n  ],\n  paramAsBody: 'scrollId',\n  method: 'POST'\n});\n\n/**\n * Perform a [search](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields to return as the field data representation of a field for each hit\n * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n * @param {<<api-param-type-string,`String`>>} params.suggestField - Specify which field to use for suggestions\n * @param {<<api-param-type-string,`String`>>} [params.suggestMode=missing] - Specify suggest mode\n * @param {<<api-param-type-number,`Number`>>} params.suggestSize - How many suggestions to return in response\n * @param {<<api-param-type-string,`String`>>} params.suggestText - The source text for which the suggestions should be returned\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.trackScores - Whether to calculate and return scores even if they are not used for sorting\n * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.search = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    from: {\n      type: 'number'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'duration'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'dfs_query_then_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    },\n    size: {\n      type: 'number'\n    },\n    sort: {\n      type: 'list'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    terminateAfter: {\n      type: 'number',\n      name: 'terminate_after'\n    },\n    stats: {\n      type: 'list'\n    },\n    suggestField: {\n      type: 'string',\n      name: 'suggest_field'\n    },\n    suggestMode: {\n      type: 'enum',\n      'default': 'missing',\n      options: [\n        'missing',\n        'popular',\n        'always'\n      ],\n      name: 'suggest_mode'\n    },\n    suggestSize: {\n      type: 'number',\n      name: 'suggest_size'\n    },\n    suggestText: {\n      type: 'text',\n      name: 'suggest_text'\n    },\n    timeout: {\n      type: 'time'\n    },\n    trackScores: {\n      type: 'boolean',\n      name: 'track_scores'\n    },\n    version: {\n      type: 'boolean'\n    },\n    requestCache: {\n      type: 'boolean',\n      name: 'request_cache'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchExists](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n */\napi.searchExists = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    minScore: {\n      type: 'number',\n      name: 'min_score'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search/exists',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search/exists',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/exists'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchShards](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-shards.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.searchShards = ca({\n  params: {\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search_shards',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search_shards',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search_shards'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.searchTemplate = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'duration'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search/template',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search/template',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/template'\n    }\n  ],\n  method: 'POST'\n});\n\napi.snapshot = namespace();\n\n/**\n * Perform a [snapshot.create](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype.create = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.createRepository](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.verify - Whether to verify the repository after creation\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n */\napi.snapshot.prototype.createRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    },\n    verify: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>',\n    req: {\n      repository: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.delete](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype['delete'] = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [snapshot.deleteRepository](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n */\napi.snapshot.prototype.deleteRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>',\n    req: {\n      repository: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [snapshot.get](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n */\napi.snapshot.prototype.get = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'list'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [snapshot.getRepository](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n */\napi.snapshot.prototype.getRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_snapshot/<%=repository%>',\n      req: {\n        repository: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot'\n    }\n  ]\n});\n\n/**\n * Perform a [snapshot.restore](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype.restore = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_restore',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.status](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n */\napi.snapshot.prototype.status = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_status',\n      req: {\n        repository: {\n          type: 'string'\n        },\n        snapshot: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot/<%=repository%>/_status',\n      req: {\n        repository: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot/_status'\n    }\n  ]\n});\n\n/**\n * Perform a [snapshot.verifyRepository](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n */\napi.snapshot.prototype.verifyRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/_verify',\n    req: {\n      repository: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [suggest](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-suggesters.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n */\napi.suggest = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_suggest',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_suggest'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\napi.tasks = namespace();\n\n/**\n * Perform a [tasks.cancel](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/tasks.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be cancelled. Leave empty to cancel all.\n * @param {<<api-param-type-string,`String`>>} params.parentNode - Cancel tasks with specified parent node.\n * @param {<<api-param-type-string,`String`>>} params.parentTask - Cancel tasks with specified parent task id (node_id:task_number). Set to -1 to cancel all.\n * @param {<<api-param-type-string,`String`>>} params.taskId - Cancel the task with specified task id (node_id:task_number)\n */\napi.tasks.prototype.cancel = ca({\n  params: {\n    nodeId: {\n      type: 'list',\n      name: 'node_id'\n    },\n    actions: {\n      type: 'list'\n    },\n    parentNode: {\n      type: 'string',\n      name: 'parent_node'\n    },\n    parentTask: {\n      type: 'string',\n      name: 'parent_task'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_tasks/<%=taskId%>/_cancel',\n      req: {\n        taskId: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_tasks/_cancel'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [tasks.list](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/tasks.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be returned. Leave empty to return all.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Return detailed task information (default: false)\n * @param {<<api-param-type-string,`String`>>} params.parentNode - Return tasks with specified parent node.\n * @param {<<api-param-type-string,`String`>>} params.parentTask - Return tasks with specified parent task id (node_id:task_number). Set to -1 to return all.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Wait for the matching tasks to complete (default: false)\n * @param {<<api-param-type-string,`String`>>} params.taskId - Return the task with specified id (node_id:task_number)\n */\napi.tasks.prototype.list = ca({\n  params: {\n    nodeId: {\n      type: 'list',\n      name: 'node_id'\n    },\n    actions: {\n      type: 'list'\n    },\n    detailed: {\n      type: 'boolean'\n    },\n    parentNode: {\n      type: 'string',\n      name: 'parent_node'\n    },\n    parentTask: {\n      type: 'string',\n      name: 'parent_task'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      name: 'wait_for_completion'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_tasks/<%=taskId%>',\n      req: {\n        taskId: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_tasks'\n    }\n  ]\n});\n\n/**\n * Perform a [termvectors](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/docs-termvectors.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.dfs - Specifies if distributed frequencies should be returned instead shard frequencies.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random).\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value.\n * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if request is real-time as opposed to near-real-time (default: true).\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n * @param {<<api-param-type-string,`String`>>} params.id - The id of the document, when not specified a doc param should be supplied.\n */\napi.termvectors = ca({\n  params: {\n    termStatistics: {\n      type: 'boolean',\n      'default': false,\n      required: false,\n      name: 'term_statistics'\n    },\n    fieldStatistics: {\n      type: 'boolean',\n      'default': true,\n      required: false,\n      name: 'field_statistics'\n    },\n    dfs: {\n      type: 'boolean',\n      'default': false,\n      required: false\n    },\n    fields: {\n      type: 'list',\n      required: false\n    },\n    offsets: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    positions: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    payloads: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    preference: {\n      type: 'string',\n      required: false\n    },\n    routing: {\n      type: 'string',\n      required: false\n    },\n    parent: {\n      type: 'string',\n      required: false\n    },\n    realtime: {\n      type: 'boolean',\n      required: false\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_termvectors',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_termvectors',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [update](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/docs-update.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.lang - The script language (default: groovy)\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document. Is is only used for routing and when for the upsert request\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-number,`Number`>>} params.retryOnConflict - Specify how many times should the operation be retried when a conflict occurs (default: 0)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {anything} params.script - The URL-encoded script definition (instead of using request body)\n * @param {anything} params.scriptId - The id of a stored script\n * @param {<<api-param-type-boolean,`Boolean`>>} params.scriptedUpsert - True if the script referenced in script or script_id should be called to perform inserts - defaults to false\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.update = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    fields: {\n      type: 'list'\n    },\n    lang: {\n      type: 'string'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    retryOnConflict: {\n      type: 'number',\n      name: 'retry_on_conflict'\n    },\n    routing: {\n      type: 'string'\n    },\n    script: {},\n    scriptId: {\n      name: 'script_id'\n    },\n    scriptedUpsert: {\n      type: 'boolean',\n      name: 'scripted_upsert'\n    },\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'duration'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_update',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [updateByQuery](https://www.elastic.co/guide/en/elasticsearch/reference/2.3/docs-update-by-query.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields to return as the field data representation of a field for each hit\n * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.conflicts=abort] - What to do when the reindex hits version conflicts?\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.searchTimeout - Explicit timeout for each search request. Defaults to no timeout.\n * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n * @param {<<api-param-type-string,`String`>>} params.suggestField - Specify which field to use for suggestions\n * @param {<<api-param-type-string,`String`>>} [params.suggestMode=missing] - Specify suggest mode\n * @param {<<api-param-type-number,`Number`>>} params.suggestSize - How many suggestions to return in response\n * @param {<<api-param-type-string,`String`>>} params.suggestText - The source text for which the suggestions should be returned\n * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.trackScores - Whether to calculate and return scores even if they are not used for sorting\n * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n * @param {<<api-param-type-boolean,`Boolean`>>} params.versionType - Should the document increment the version number (internal) on hit or not (reindex)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-number,`Number`>>} params.scrollSize - Size on the scroll request powering the update_by_query\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should the request should block until the reindex is complete.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.updateByQuery = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    from: {\n      type: 'number'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    conflicts: {\n      type: 'enum',\n      'default': 'abort',\n      options: [\n        'abort',\n        'proceed'\n      ]\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'duration'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'dfs_query_then_fetch'\n      ],\n      name: 'search_type'\n    },\n    searchTimeout: {\n      type: 'time',\n      name: 'search_timeout'\n    },\n    size: {\n      type: 'number'\n    },\n    sort: {\n      type: 'list'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    terminateAfter: {\n      type: 'number',\n      name: 'terminate_after'\n    },\n    stats: {\n      type: 'list'\n    },\n    suggestField: {\n      type: 'string',\n      name: 'suggest_field'\n    },\n    suggestMode: {\n      type: 'enum',\n      'default': 'missing',\n      options: [\n        'missing',\n        'popular',\n        'always'\n      ],\n      name: 'suggest_mode'\n    },\n    suggestSize: {\n      type: 'number',\n      name: 'suggest_size'\n    },\n    suggestText: {\n      type: 'text',\n      name: 'suggest_text'\n    },\n    timeout: {\n      type: 'time',\n      'default': '1m'\n    },\n    trackScores: {\n      type: 'boolean',\n      name: 'track_scores'\n    },\n    version: {\n      type: 'boolean'\n    },\n    versionType: {\n      type: 'boolean',\n      name: 'version_type'\n    },\n    requestCache: {\n      type: 'boolean',\n      name: 'request_cache'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    scrollSize: {\n      type: 'integer',\n      name: 'scroll_size'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_update_by_query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_update_by_query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [create](http://www.elastic.co/guide/en/elasticsearch/reference/2.3/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.create = ca.proxy(api.index, {\n  transform: function (params) {\n    params.op_type = 'create';\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/apis/2_2.js":"var ca = require('../client_action').makeFactoryWithModifier(function (spec) {\n  return require('../utils').merge(spec, {\n    params: {\n      filterPath: {\n        type: 'list',\n        name: 'filter_path'\n      }\n    }\n  });\n});\nvar namespace = require('../client_action').namespaceFactory;\nvar api = module.exports = {};\n\napi._namespaces = ['cat', 'cluster', 'indices', 'nodes', 'snapshot'];\n\n/**\n * Perform a [bulk](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-bulk.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.type - Default document type for items which don't provide one\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - Default comma-separated list of fields to return in the response for updates\n * @param {<<api-param-type-string,`String`>>} params.index - Default index for items which don't provide one\n */\napi.bulk = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    type: {\n      type: 'string'\n    },\n    fields: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_bulk'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\napi.cat = namespace();\n\n/**\n * Perform a [cat.aliases](http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.cat.prototype.aliases = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/aliases/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/aliases'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.allocation](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-allocation.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information\n */\napi.cat.prototype.allocation = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/allocation/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/allocation'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.count](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-count.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.count = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/count/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/count'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.fielddata](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-fielddata.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return the fielddata size\n */\napi.cat.prototype.fielddata = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    },\n    fields: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/fielddata/<%=fields%>',\n      req: {\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/fielddata'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.health](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-health.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.ts=true] - Set to false to disable timestamping\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.health = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    ts: {\n      type: 'boolean',\n      'default': true\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/health'\n  }\n});\n\n/**\n * Perform a [cat.help](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n */\napi.cat.prototype.help = ca({\n  params: {\n    help: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat'\n  }\n});\n\n/**\n * Perform a [cat.indices](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-indices.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.pri - Set to true to return stats only for primary shards\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.indices = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    pri: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/indices/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/indices'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.master](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-master.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.master = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/master'\n  }\n});\n\n/**\n * Perform a [cat.nodeattrs](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-nodeattrs.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.nodeattrs = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/nodeattrs'\n  }\n});\n\n/**\n * Perform a [cat.nodes](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-nodes.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.nodes = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/nodes'\n  }\n});\n\n/**\n * Perform a [cat.pendingTasks](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-pending-tasks.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.pendingTasks = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/pending_tasks'\n  }\n});\n\n/**\n * Perform a [cat.plugins](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-plugins.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.plugins = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/plugins'\n  }\n});\n\n/**\n * Perform a [cat.recovery](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-recovery.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.recovery = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/recovery/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/recovery'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.repositories](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-repositories.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.repositories = ca({\n  params: {\n    local: {\n      type: 'boolean',\n      'default': false\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/repositories'\n  }\n});\n\n/**\n * Perform a [cat.segments](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-segments.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.segments = ca({\n  params: {\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/segments/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/segments'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.shards](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-shards.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.shards = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/shards/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/shards'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.snapshots](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Set to true to ignore unavailable snapshots\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - Name of repository from which to fetch the snapshot information\n */\napi.cat.prototype.snapshots = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      'default': false,\n      name: 'ignore_unavailable'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/snapshots/<%=repository%>',\n    req: {\n      repository: {\n        type: 'list'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [cat.threadPool](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-thread-pool.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fullId - Enables displaying the complete node ids\n */\napi.cat.prototype.threadPool = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    },\n    fullId: {\n      type: 'boolean',\n      'default': false,\n      name: 'full_id'\n    }\n  },\n  url: {\n    fmt: '/_cat/thread_pool'\n  }\n});\n\n/**\n * Perform a [clearScroll](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.scrollId - A comma-separated list of scroll IDs to clear\n */\napi.clearScroll = ca({\n  urls: [\n    {\n      fmt: '/_search/scroll/<%=scrollId%>',\n      req: {\n        scrollId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/scroll'\n    }\n  ],\n  paramAsBody: 'scrollId',\n  method: 'DELETE'\n});\n\napi.cluster = namespace();\n\n/**\n * Perform a [cluster.getSettings](http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.getSettings = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/settings'\n  }\n});\n\n/**\n * Perform a [cluster.health](http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-health.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Specify the level of detail for returned information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-number,`Number`>>} params.waitForActiveShards - Wait until the specified number of shards is active\n * @param {<<api-param-type-string,`String`>>} params.waitForNodes - Wait until the specified number of nodes is available\n * @param {<<api-param-type-number,`Number`>>} params.waitForRelocatingShards - Wait until the specified number of relocating shards is finished\n * @param {<<api-param-type-string,`String`>>} params.waitForStatus - Wait until cluster is in a specific state\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - Limit the information returned to a specific index\n */\napi.cluster.prototype.health = ca({\n  params: {\n    level: {\n      type: 'enum',\n      'default': 'cluster',\n      options: [\n        'cluster',\n        'indices',\n        'shards'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    },\n    waitForActiveShards: {\n      type: 'number',\n      name: 'wait_for_active_shards'\n    },\n    waitForNodes: {\n      type: 'string',\n      name: 'wait_for_nodes'\n    },\n    waitForRelocatingShards: {\n      type: 'number',\n      name: 'wait_for_relocating_shards'\n    },\n    waitForStatus: {\n      type: 'enum',\n      'default': null,\n      options: [\n        'green',\n        'yellow',\n        'red'\n      ],\n      name: 'wait_for_status'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/health/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/health'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.pendingTasks](http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-pending.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.cluster.prototype.pendingTasks = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_cluster/pending_tasks'\n  }\n});\n\n/**\n * Perform a [cluster.putSettings](http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.putSettings = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/settings'\n  },\n  method: 'PUT'\n});\n\n/**\n * Perform a [cluster.reroute](http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-reroute.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - Simulate the operation only and return the resulting state\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return an explanation of why the commands can or cannot be executed\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics. Defaults to all but metadata\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.reroute = ca({\n  params: {\n    dryRun: {\n      type: 'boolean',\n      name: 'dry_run'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    metric: {\n      type: 'list',\n      options: [\n        '_all',\n        'blocks',\n        'metadata',\n        'nodes',\n        'routing_table',\n        'master_node',\n        'version'\n      ]\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/reroute'\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [cluster.state](http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-state.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n */\napi.cluster.prototype.state = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/state/<%=metric%>/<%=index%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'blocks',\n            'metadata',\n            'nodes',\n            'routing_table',\n            'routing_nodes',\n            'master_node',\n            'version'\n          ]\n        },\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/state/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'blocks',\n            'metadata',\n            'nodes',\n            'routing_table',\n            'routing_nodes',\n            'master_node',\n            'version'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/state'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.stats](http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.cluster.prototype.stats = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/stats/nodes/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/stats'\n    }\n  ]\n});\n\n/**\n * Perform a [count](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n */\napi.count = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    minScore: {\n      type: 'number',\n      name: 'min_score'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_count'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [countPercolate](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to count percolate the document into. Defaults to index.\n * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to count percolate document into. Defaults to type.\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being count percolated.\n * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n */\napi.countPercolate = ca({\n  params: {\n    routing: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    percolateIndex: {\n      type: 'string',\n      name: 'percolate_index'\n    },\n    percolateType: {\n      type: 'string',\n      name: 'percolate_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate/count',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_percolate/count',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [delete](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-delete.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Specific write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi['delete'] = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteScript](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.deleteScript = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.deleteTemplate = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [exists](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.exists = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [explain](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-explain.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer for the query string query\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The default field for query string query (default: _all)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.explain = ca({\n  params: {\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    fields: {\n      type: 'list'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_explain',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [fieldStats](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for to get field statistics for (min value, max value, and more)\n * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Defines if field stats should be returned on a per index level or on a cluster wide level\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.fieldStats = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    level: {\n      type: 'enum',\n      'default': 'cluster',\n      options: [\n        'indices',\n        'cluster'\n      ]\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_field_stats',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_field_stats'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [get](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.get = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getScript](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.getScript = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getSource](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types\n */\napi.getSource = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.getTemplate = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [index](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.index = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'duration'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\napi.indices = namespace();\n\n/**\n * Perform a [indices.analyze](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The name of the analyzer to use\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.charFilters - A comma-separated list of character filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>} params.field - Use the analyzer configured for this field (instead of passing the analyzer name)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.filters - A comma-separated list of filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index to scope the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.preferLocal - With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.text - The text on which the analysis should be performed (when request body is not used)\n * @param {<<api-param-type-string,`String`>>} params.tokenizer - The name of the tokenizer to use for the analysis\n * @param {<<api-param-type-boolean,`Boolean`>>} params.detail - With `true`, outputs more advanced details. (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.attributes - A comma-separated list of token attributes to output, this parameter works only with `detail=true`\n * @param {<<api-param-type-string,`String`>>} [params.format=detailed] - Format of the output\n */\napi.indices.prototype.analyze = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    charFilters: {\n      type: 'list',\n      name: 'char_filters'\n    },\n    field: {\n      type: 'string'\n    },\n    filters: {\n      type: 'list'\n    },\n    index: {\n      type: 'string'\n    },\n    preferLocal: {\n      type: 'boolean',\n      name: 'prefer_local'\n    },\n    text: {\n      type: 'list'\n    },\n    tokenizer: {\n      type: 'string'\n    },\n    detail: {\n      type: 'boolean'\n    },\n    attributes: {\n      type: 'list'\n    },\n    format: {\n      type: 'enum',\n      'default': 'detailed',\n      options: [\n        'detailed',\n        'text'\n      ]\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_analyze',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_analyze'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.clearCache](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-clearcache.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fieldData - Clear field data\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fielddata - Clear field data\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to clear when using the `field_data` parameter (default: all)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.query - Clear query caches\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index name to limit the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.recycler - Clear the recycler cache\n * @param {<<api-param-type-boolean,`Boolean`>>} params.request - Clear request cache\n */\napi.indices.prototype.clearCache = ca({\n  params: {\n    fieldData: {\n      type: 'boolean',\n      name: 'field_data'\n    },\n    fielddata: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    query: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    index: {\n      type: 'list'\n    },\n    recycler: {\n      type: 'boolean'\n    },\n    request: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_cache/clear',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cache/clear'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.close](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma separated list of indices to close\n */\napi.indices.prototype.close = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_close',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.create](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-create-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.updateAllTypes - Whether to update the mapping for all fields with the same name across all types or not\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.create = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    updateAllTypes: {\n      type: 'boolean',\n      name: 'update_all_types'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.delete](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-delete-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices\n */\napi.indices.prototype['delete'] = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteAlias](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.\n */\napi.indices.prototype.deleteAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_alias/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.deleteTemplate = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteWarmer](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of warmer names to delete (supports wildcards); use `_all` to delete all warmers in the specified indices. You must specify a name either in the uri or in the parameters.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to delete warmers from (supports wildcards); use `_all` to perform the operation on all indices.\n */\napi.indices.prototype.deleteWarmer = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    name: {\n      type: 'list'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_warmer/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.exists](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to check\n */\napi.indices.prototype.exists = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsAlias](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.existsAlias = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': [\n        'open',\n        'closed'\n      ],\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_alias',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.existsTemplate = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsType](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-types-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` to check the types across all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to check\n */\napi.indices.prototype.existsType = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      type: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.flush](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-flush.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitIfOngoing - If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. The default is false and will cause an exception to be thrown on the shard level if another flush operation is already running.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n */\napi.indices.prototype.flush = ca({\n  params: {\n    force: {\n      type: 'boolean'\n    },\n    waitIfOngoing: {\n      type: 'boolean',\n      name: 'wait_if_ongoing'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_flush',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_flush'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.flushSynced](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-synced-flush.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n */\napi.indices.prototype.flushSynced = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_flush/synced',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_flush/synced'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.forcemerge](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-forcemerge.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flush - Specify whether the index should be flushed after performing the operation (default: true)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.maxNumSegments - The number of segments the index should be merged into (default: dynamic)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyExpungeDeletes - Specify whether the operation should only expunge deleted documents\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForMerge - Specify whether the request should block until the merge process is finished (default: true)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.forcemerge = ca({\n  params: {\n    flush: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    maxNumSegments: {\n      type: 'number',\n      name: 'max_num_segments'\n    },\n    onlyExpungeDeletes: {\n      type: 'boolean',\n      name: 'only_expunge_deletes'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    waitForMerge: {\n      type: 'boolean',\n      name: 'wait_for_merge'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_forcemerge',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_forcemerge'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.get](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Ignore unavailable indexes (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return version and creation date values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.feature - A comma-separated list of features\n */\napi.indices.prototype.get = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=feature%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        feature: {\n          type: 'list',\n          options: [\n            '_settings',\n            '_mappings',\n            '_warmers',\n            '_aliases'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getAlias](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.getAlias = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_alias',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getAliases](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to filter\n */\napi.indices.prototype.getAliases = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_aliases/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_aliases',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_aliases/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_aliases'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getFieldMapping](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-field-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether the default mapping values should be returned as well\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields\n */\napi.indices.prototype.getFieldMapping = ca({\n  params: {\n    includeDefaults: {\n      type: 'boolean',\n      name: 'include_defaults'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>/field/<%=fields%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping/field/<%=fields%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>/field/<%=fields%>',\n      req: {\n        type: {\n          type: 'list'\n        },\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/field/<%=fields%>',\n      req: {\n        fields: {\n          type: 'list'\n        }\n      }\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getMapping](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n */\napi.indices.prototype.getMapping = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>',\n      req: {\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getSettings](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return version and creation date values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the settings that should be included\n */\napi.indices.prototype.getSettings = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': [\n        'open',\n        'closed'\n      ],\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    local: {\n      type: 'boolean'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The comma separated names of the index templates\n */\napi.indices.prototype.getTemplate = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_template/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_template'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getUpgrade](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.getUpgrade = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_upgrade',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_upgrade'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getWarmer](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the warmer (supports wildcards); leave empty to get all warmers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n */\napi.indices.prototype.getWarmer = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.open](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma separated list of indices to open\n */\napi.indices.prototype.open = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'closed',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_open',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.optimize](https://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-optimize.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flush - Specify whether the index should be flushed after performing the operation (default: true)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.maxNumSegments - The number of segments the index should be merged into (default: dynamic)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyExpungeDeletes - Specify whether the operation should only expunge deleted documents\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForMerge - Specify whether the request should block until the merge process is finished (default: true)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.optimize = ca({\n  params: {\n    flush: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    maxNumSegments: {\n      type: 'number',\n      name: 'max_num_segments'\n    },\n    onlyExpungeDeletes: {\n      type: 'boolean',\n      name: 'only_expunge_deletes'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    waitForMerge: {\n      type: 'boolean',\n      name: 'wait_for_merge'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_optimize',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_optimize'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.putAlias](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the alias to be created or updated\n */\napi.indices.prototype.putAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_alias/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putMapping](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-put-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.updateAllTypes - Whether to update the mapping for all fields with the same name across all types or not\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.\n * @param {<<api-param-type-string,`String`>>} params.type - The name of the document type\n */\napi.indices.prototype.putMapping = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    updateAllTypes: {\n      type: 'boolean',\n      name: 'update_all_types'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>',\n      req: {\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putSettings](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.putSettings = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.order - The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.create - Whether the index template should only be added if new or can also replace an existing one\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.putTemplate = ca({\n  params: {\n    order: {\n      type: 'number'\n    },\n    create: {\n      type: 'boolean',\n      'default': false\n    },\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putWarmer](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed) in the search request to warm\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices in the search request to warm. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both, in the search request to warm.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify whether the request to be warmed should use the request cache, defaults to index level setting\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the warmer\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types\n */\napi.indices.prototype.putWarmer = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    requestCache: {\n      type: 'boolean',\n      name: 'request_cache'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer/<%=name%>',\n      req: {\n        name: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.recovery](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-recovery.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Whether to display detailed information about shard recovery\n * @param {<<api-param-type-boolean,`Boolean`>>} params.activeOnly - Display only those recoveries that are currently on-going\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.recovery = ca({\n  params: {\n    detailed: {\n      type: 'boolean',\n      'default': false\n    },\n    activeOnly: {\n      type: 'boolean',\n      'default': false,\n      name: 'active_only'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_recovery',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_recovery'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.refresh](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-refresh.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Force a refresh even if not required\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.refresh = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    force: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_refresh',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_refresh'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.segments](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-segments.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Includes detailed memory usage by Lucene.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.segments = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    verbose: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_segments',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_segments'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.shardStores](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-shards-stores.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.status - A comma-separated list of statuses used to filter on shards to get store information for\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.shardStores = ca({\n  params: {\n    status: {\n      type: 'list',\n      options: [\n        'green',\n        'yellow',\n        'red',\n        'all'\n      ]\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_shard_stores',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_shard_stores'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.stats](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>} [params.level=indices] - Return stats aggregated at cluster, index or shard level\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned the specific metrics.\n */\napi.indices.prototype.stats = ca({\n  params: {\n    completionFields: {\n      type: 'list',\n      name: 'completion_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    fields: {\n      type: 'list'\n    },\n    groups: {\n      type: 'list'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    level: {\n      type: 'enum',\n      'default': 'indices',\n      options: [\n        'cluster',\n        'indices',\n        'shards'\n      ]\n    },\n    types: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_stats/<%=metric%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'query_cache',\n            'flush',\n            'get',\n            'indexing',\n            'merge',\n            'percolate',\n            'request_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_stats/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'query_cache',\n            'flush',\n            'get',\n            'indexing',\n            'merge',\n            'percolate',\n            'request_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_stats',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_stats'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.updateAliases](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Request timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.indices.prototype.updateAliases = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_aliases'\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.upgrade](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Specify whether the request should block until the all segments are upgraded (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyAncientSegments - If true, only ancient (an older Lucene major release) segments will be upgraded\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.upgrade = ca({\n  params: {\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      name: 'wait_for_completion'\n    },\n    onlyAncientSegments: {\n      type: 'boolean',\n      name: 'only_ancient_segments'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_upgrade',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_upgrade'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.validateQuery](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return detailed information about the error\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-boolean,`Boolean`>>} params.rewrite - Provide a more detailed explanation showing the actual Lucene query that will be executed.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n */\napi.indices.prototype.validateQuery = ca({\n  params: {\n    explain: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    q: {\n      type: 'string'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    rewrite: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_validate/query'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [info](http://www.elastic.co/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.info = ca({\n  url: {\n    fmt: '/'\n  }\n});\n\n/**\n * Perform a [mget](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.mget = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mget'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mpercolate](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated to use as default\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated to use as default.\n */\napi.mpercolate = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mpercolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mpercolate',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mpercolate'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [msearch](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-multi-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n */\napi.msearch = ca({\n  params: {\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_msearch'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mtermvectors](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-termvectors.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.ids - A comma-separated list of documents ids. You must define ids as parameter or set \"ids\" or \"docs\" in the request body\n * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if requests are real-time as opposed to near-real-time (default: true).\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n */\napi.mtermvectors = ca({\n  params: {\n    ids: {\n      type: 'list',\n      required: false\n    },\n    termStatistics: {\n      type: 'boolean',\n      'default': false,\n      required: false,\n      name: 'term_statistics'\n    },\n    fieldStatistics: {\n      type: 'boolean',\n      'default': true,\n      required: false,\n      name: 'field_statistics'\n    },\n    fields: {\n      type: 'list',\n      required: false\n    },\n    offsets: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    positions: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    payloads: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    preference: {\n      type: 'string',\n      required: false\n    },\n    routing: {\n      type: 'string',\n      required: false\n    },\n    parent: {\n      type: 'string',\n      required: false\n    },\n    realtime: {\n      type: 'boolean',\n      required: false\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mtermvectors',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mtermvectors',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mtermvectors'\n    }\n  ],\n  method: 'POST'\n});\n\napi.nodes = namespace();\n\n/**\n * Perform a [nodes.hotThreads](http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-hot-threads.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.interval - The interval for the second sampling of threads\n * @param {<<api-param-type-number,`Number`>>} params.snapshots - Number of samples of thread stacktrace (default: 10)\n * @param {<<api-param-type-number,`Number`>>} params.threads - Specify the number of threads to provide information for (default: 3)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreIdleThreads - Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue (default: true)\n * @param {<<api-param-type-string,`String`>>} params.type - The type to sample (default: cpu)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.nodes.prototype.hotThreads = ca({\n  params: {\n    interval: {\n      type: 'time'\n    },\n    snapshots: {\n      type: 'number'\n    },\n    threads: {\n      type: 'number'\n    },\n    ignoreIdleThreads: {\n      type: 'boolean',\n      name: 'ignore_idle_threads'\n    },\n    type: {\n      type: 'enum',\n      options: [\n        'cpu',\n        'wait',\n        'block'\n      ]\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/hotthreads',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/hotthreads'\n    }\n  ]\n});\n\n/**\n * Perform a [nodes.info](http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-info.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - A comma-separated list of metrics you wish returned. Leave empty to return all.\n */\napi.nodes.prototype.info = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/<%=metric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            'settings',\n            'os',\n            'process',\n            'jvm',\n            'thread_pool',\n            'transport',\n            'http',\n            'plugins'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            'settings',\n            'os',\n            'process',\n            'jvm',\n            'thread_pool',\n            'transport',\n            'http',\n            'plugins'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes'\n    }\n  ]\n});\n\n/**\n * Perform a [nodes.stats](http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>} [params.level=node] - Return indices stats aggregated at node, index or shard level\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indexMetric - Limit the information returned for `indices` metric to the specific index metrics. Isn't used if `indices` (or `all`) metric isn't specified.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.nodes.prototype.stats = ca({\n  params: {\n    completionFields: {\n      type: 'list',\n      name: 'completion_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    fields: {\n      type: 'list'\n    },\n    groups: {\n      type: 'boolean'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    level: {\n      type: 'enum',\n      'default': 'node',\n      options: [\n        'node',\n        'indices',\n        'shards'\n      ]\n    },\n    types: {\n      type: 'list'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>/<%=indexMetric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        },\n        indexMetric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'query_cache',\n            'flush',\n            'get',\n            'indexing',\n            'merge',\n            'percolate',\n            'request_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats/<%=metric%>/<%=indexMetric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        },\n        indexMetric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'query_cache',\n            'flush',\n            'get',\n            'indexing',\n            'merge',\n            'percolate',\n            'request_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats'\n    }\n  ]\n});\n\n/**\n * Perform a [percolate](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to percolate the document into. Defaults to index.\n * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to percolate document into. Defaults to type.\n * @param {<<api-param-type-string,`String`>>} params.percolateRouting - The routing value to use when percolating the existing document.\n * @param {<<api-param-type-string,`String`>>} params.percolatePreference - Which shard to prefer when executing the percolate request.\n * @param {<<api-param-type-string,`String`>>} params.percolateFormat - Return an array of matching query IDs instead of objects\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being percolated.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated.\n * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n */\napi.percolate = ca({\n  params: {\n    routing: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    percolateIndex: {\n      type: 'string',\n      name: 'percolate_index'\n    },\n    percolateType: {\n      type: 'string',\n      name: 'percolate_type'\n    },\n    percolateRouting: {\n      type: 'string',\n      name: 'percolate_routing'\n    },\n    percolatePreference: {\n      type: 'string',\n      name: 'percolate_preference'\n    },\n    percolateFormat: {\n      type: 'enum',\n      options: [\n        'ids'\n      ],\n      name: 'percolate_format'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_percolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [ping](http://www.elastic.co/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.ping = ca({\n  url: {\n    fmt: '/'\n  },\n  requestTimeout: 3000,\n  method: 'HEAD'\n});\n\n/**\n * Perform a [putScript](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.putScript = ca({\n  params: {\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [putTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.putTemplate = ca({\n  params: {\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [renderSearchTemplate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.id - The id of the stored search template\n */\napi.renderSearchTemplate = ca({\n  urls: [\n    {\n      fmt: '/_render/template/<%=id%>',\n      req: {\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_render/template'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [scroll](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.scrollId - The scroll ID\n */\napi.scroll = ca({\n  params: {\n    scroll: {\n      type: 'duration'\n    },\n    scrollId: {\n      type: 'string',\n      name: 'scroll_id'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_search/scroll/<%=scrollId%>',\n      req: {\n        scrollId: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_search/scroll'\n    }\n  ],\n  paramAsBody: 'scrollId',\n  method: 'POST'\n});\n\n/**\n * Perform a [search](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields to return as the field data representation of a field for each hit\n * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n * @param {<<api-param-type-string,`String`>>} params.suggestField - Specify which field to use for suggestions\n * @param {<<api-param-type-string,`String`>>} [params.suggestMode=missing] - Specify suggest mode\n * @param {<<api-param-type-number,`Number`>>} params.suggestSize - How many suggestions to return in response\n * @param {<<api-param-type-string,`String`>>} params.suggestText - The source text for which the suggestions should be returned\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.trackScores - Whether to calculate and return scores even if they are not used for sorting\n * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.search = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    from: {\n      type: 'number'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'duration'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'dfs_query_then_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    },\n    size: {\n      type: 'number'\n    },\n    sort: {\n      type: 'list'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    terminateAfter: {\n      type: 'number',\n      name: 'terminate_after'\n    },\n    stats: {\n      type: 'list'\n    },\n    suggestField: {\n      type: 'string',\n      name: 'suggest_field'\n    },\n    suggestMode: {\n      type: 'enum',\n      'default': 'missing',\n      options: [\n        'missing',\n        'popular',\n        'always'\n      ],\n      name: 'suggest_mode'\n    },\n    suggestSize: {\n      type: 'number',\n      name: 'suggest_size'\n    },\n    suggestText: {\n      type: 'text',\n      name: 'suggest_text'\n    },\n    timeout: {\n      type: 'time'\n    },\n    trackScores: {\n      type: 'boolean',\n      name: 'track_scores'\n    },\n    version: {\n      type: 'boolean'\n    },\n    requestCache: {\n      type: 'boolean',\n      name: 'request_cache'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchExists](https://www.elastic.co/guide/en/elasticsearch/reference/2.1/search-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n */\napi.searchExists = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    minScore: {\n      type: 'number',\n      name: 'min_score'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search/exists',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search/exists',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/exists'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchShards](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.searchShards = ca({\n  params: {\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search_shards',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search_shards',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search_shards'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.searchTemplate = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'duration'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search/template',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search/template',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/template'\n    }\n  ],\n  method: 'POST'\n});\n\napi.snapshot = namespace();\n\n/**\n * Perform a [snapshot.create](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype.create = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.createRepository](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.verify - Whether to verify the repository after creation\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n */\napi.snapshot.prototype.createRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    },\n    verify: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>',\n    req: {\n      repository: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.delete](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype['delete'] = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [snapshot.deleteRepository](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n */\napi.snapshot.prototype.deleteRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>',\n    req: {\n      repository: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [snapshot.get](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n */\napi.snapshot.prototype.get = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'list'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [snapshot.getRepository](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n */\napi.snapshot.prototype.getRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_snapshot/<%=repository%>',\n      req: {\n        repository: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot'\n    }\n  ]\n});\n\n/**\n * Perform a [snapshot.restore](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype.restore = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_restore',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.status](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n */\napi.snapshot.prototype.status = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_status',\n      req: {\n        repository: {\n          type: 'string'\n        },\n        snapshot: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot/<%=repository%>/_status',\n      req: {\n        repository: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot/_status'\n    }\n  ]\n});\n\n/**\n * Perform a [snapshot.verifyRepository](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n */\napi.snapshot.prototype.verifyRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/_verify',\n    req: {\n      repository: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [suggest](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-suggesters.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n */\napi.suggest = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_suggest',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_suggest'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [termvectors](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.dfs - Specifies if distributed frequencies should be returned instead shard frequencies.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random).\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value.\n * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if request is real-time as opposed to near-real-time (default: true).\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n * @param {<<api-param-type-string,`String`>>} params.id - The id of the document, when not specified a doc param should be supplied.\n */\napi.termvectors = ca({\n  params: {\n    termStatistics: {\n      type: 'boolean',\n      'default': false,\n      required: false,\n      name: 'term_statistics'\n    },\n    fieldStatistics: {\n      type: 'boolean',\n      'default': true,\n      required: false,\n      name: 'field_statistics'\n    },\n    dfs: {\n      type: 'boolean',\n      'default': false,\n      required: false\n    },\n    fields: {\n      type: 'list',\n      required: false\n    },\n    offsets: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    positions: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    payloads: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    preference: {\n      type: 'string',\n      required: false\n    },\n    routing: {\n      type: 'string',\n      required: false\n    },\n    parent: {\n      type: 'string',\n      required: false\n    },\n    realtime: {\n      type: 'boolean',\n      required: false\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_termvectors',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_termvectors',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [update](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-update.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.lang - The script language (default: groovy)\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document. Is is only used for routing and when for the upsert request\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-number,`Number`>>} params.retryOnConflict - Specify how many times should the operation be retried when a conflict occurs (default: 0)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {anything} params.script - The URL-encoded script definition (instead of using request body)\n * @param {anything} params.scriptId - The id of a stored script\n * @param {<<api-param-type-boolean,`Boolean`>>} params.scriptedUpsert - True if the script referenced in script or script_id should be called to perform inserts - defaults to false\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.update = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    fields: {\n      type: 'list'\n    },\n    lang: {\n      type: 'string'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    retryOnConflict: {\n      type: 'number',\n      name: 'retry_on_conflict'\n    },\n    routing: {\n      type: 'string'\n    },\n    script: {},\n    scriptId: {\n      name: 'script_id'\n    },\n    scriptedUpsert: {\n      type: 'boolean',\n      name: 'scripted_upsert'\n    },\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'duration'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_update',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [create](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.create = ca.proxy(api.index, {\n  transform: function (params) {\n    params.op_type = 'create';\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/apis/2_1.js":"var ca = require('../client_action').makeFactoryWithModifier(function (spec) {\n  return require('../utils').merge(spec, {\n    params: {\n      filterPath: {\n        type: 'list',\n        name: 'filter_path'\n      }\n    }\n  });\n});\nvar namespace = require('../client_action').namespaceFactory;\nvar api = module.exports = {};\n\napi._namespaces = ['cat', 'cluster', 'indices', 'nodes', 'snapshot'];\n\n/**\n * Perform a [bulk](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/docs-bulk.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.type - Default document type for items which don't provide one\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - Default comma-separated list of fields to return in the response for updates\n * @param {<<api-param-type-string,`String`>>} params.index - Default index for items which don't provide one\n */\napi.bulk = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    type: {\n      type: 'string'\n    },\n    fields: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_bulk'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\napi.cat = namespace();\n\n/**\n * Perform a [cat.aliases](http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.cat.prototype.aliases = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/aliases/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/aliases'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.allocation](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/cat-allocation.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information\n */\napi.cat.prototype.allocation = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/allocation/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/allocation'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.count](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/cat-count.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.count = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/count/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/count'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.fielddata](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/cat-fielddata.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return the fielddata size\n */\napi.cat.prototype.fielddata = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    },\n    fields: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/fielddata/<%=fields%>',\n      req: {\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/fielddata'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.health](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/cat-health.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.ts=true] - Set to false to disable timestamping\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.health = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    ts: {\n      type: 'boolean',\n      'default': true\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/health'\n  }\n});\n\n/**\n * Perform a [cat.help](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/cat.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n */\napi.cat.prototype.help = ca({\n  params: {\n    help: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat'\n  }\n});\n\n/**\n * Perform a [cat.indices](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/cat-indices.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.pri - Set to true to return stats only for primary shards\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.indices = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    pri: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/indices/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/indices'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.master](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/cat-master.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.master = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/master'\n  }\n});\n\n/**\n * Perform a [cat.nodeattrs](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/cat-nodeattrs.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.nodeattrs = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/nodeattrs'\n  }\n});\n\n/**\n * Perform a [cat.nodes](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/cat-nodes.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.nodes = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/nodes'\n  }\n});\n\n/**\n * Perform a [cat.pendingTasks](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/cat-pending-tasks.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.pendingTasks = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/pending_tasks'\n  }\n});\n\n/**\n * Perform a [cat.plugins](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/cat-plugins.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.plugins = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/plugins'\n  }\n});\n\n/**\n * Perform a [cat.recovery](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/cat-recovery.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.recovery = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/recovery/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/recovery'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.repositories](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-repositories.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.repositories = ca({\n  params: {\n    local: {\n      type: 'boolean',\n      'default': false\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/repositories'\n  }\n});\n\n/**\n * Perform a [cat.segments](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/cat-segments.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.segments = ca({\n  params: {\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/segments/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/segments'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.shards](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/cat-shards.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.shards = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/shards/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/shards'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.snapshots](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - Name of repository from which to fetch the snapshot information\n */\napi.cat.prototype.snapshots = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/snapshots/<%=repository%>',\n    req: {\n      repository: {\n        type: 'list'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [cat.threadPool](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/cat-thread-pool.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fullId - Enables displaying the complete node ids\n */\napi.cat.prototype.threadPool = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    },\n    fullId: {\n      type: 'boolean',\n      'default': false,\n      name: 'full_id'\n    }\n  },\n  url: {\n    fmt: '/_cat/thread_pool'\n  }\n});\n\n/**\n * Perform a [clearScroll](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.scrollId - A comma-separated list of scroll IDs to clear\n */\napi.clearScroll = ca({\n  urls: [\n    {\n      fmt: '/_search/scroll/<%=scrollId%>',\n      req: {\n        scrollId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/scroll'\n    }\n  ],\n  paramAsBody: 'scrollId',\n  method: 'DELETE'\n});\n\napi.cluster = namespace();\n\n/**\n * Perform a [cluster.getSettings](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.getSettings = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/settings'\n  }\n});\n\n/**\n * Perform a [cluster.health](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/cluster-health.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Specify the level of detail for returned information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-number,`Number`>>} params.waitForActiveShards - Wait until the specified number of shards is active\n * @param {<<api-param-type-string,`String`>>} params.waitForNodes - Wait until the specified number of nodes is available\n * @param {<<api-param-type-number,`Number`>>} params.waitForRelocatingShards - Wait until the specified number of relocating shards is finished\n * @param {<<api-param-type-string,`String`>>} params.waitForStatus - Wait until cluster is in a specific state\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - Limit the information returned to a specific index\n */\napi.cluster.prototype.health = ca({\n  params: {\n    level: {\n      type: 'enum',\n      'default': 'cluster',\n      options: [\n        'cluster',\n        'indices',\n        'shards'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    },\n    waitForActiveShards: {\n      type: 'number',\n      name: 'wait_for_active_shards'\n    },\n    waitForNodes: {\n      type: 'string',\n      name: 'wait_for_nodes'\n    },\n    waitForRelocatingShards: {\n      type: 'number',\n      name: 'wait_for_relocating_shards'\n    },\n    waitForStatus: {\n      type: 'enum',\n      'default': null,\n      options: [\n        'green',\n        'yellow',\n        'red'\n      ],\n      name: 'wait_for_status'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/health/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/health'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.pendingTasks](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/cluster-pending.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.cluster.prototype.pendingTasks = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_cluster/pending_tasks'\n  }\n});\n\n/**\n * Perform a [cluster.putSettings](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.putSettings = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/settings'\n  },\n  method: 'PUT'\n});\n\n/**\n * Perform a [cluster.reroute](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/cluster-reroute.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - Simulate the operation only and return the resulting state\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return an explanation of why the commands can or cannot be executed\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics. Defaults to all but metadata\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.reroute = ca({\n  params: {\n    dryRun: {\n      type: 'boolean',\n      name: 'dry_run'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    metric: {\n      type: 'list',\n      options: [\n        '_all',\n        'blocks',\n        'metadata',\n        'nodes',\n        'routing_table',\n        'master_node',\n        'version'\n      ]\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/reroute'\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [cluster.state](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/cluster-state.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n */\napi.cluster.prototype.state = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/state/<%=metric%>/<%=index%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'blocks',\n            'metadata',\n            'nodes',\n            'routing_table',\n            'routing_nodes',\n            'master_node',\n            'version'\n          ]\n        },\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/state/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'blocks',\n            'metadata',\n            'nodes',\n            'routing_table',\n            'routing_nodes',\n            'master_node',\n            'version'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/state'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.stats](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/cluster-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.cluster.prototype.stats = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/stats/nodes/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/stats'\n    }\n  ]\n});\n\n/**\n * Perform a [count](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/search-count.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n */\napi.count = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    minScore: {\n      type: 'number',\n      name: 'min_score'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_count'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [countPercolate](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to count percolate the document into. Defaults to index.\n * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to count percolate document into. Defaults to type.\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being count percolated.\n * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n */\napi.countPercolate = ca({\n  params: {\n    routing: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    percolateIndex: {\n      type: 'string',\n      name: 'percolate_index'\n    },\n    percolateType: {\n      type: 'string',\n      name: 'percolate_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate/count',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_percolate/count',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [delete](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/docs-delete.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Specific write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi['delete'] = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteScript](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.deleteScript = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.deleteTemplate = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [exists](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.exists = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [explain](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/search-explain.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer for the query string query\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The default field for query string query (default: _all)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.explain = ca({\n  params: {\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    fields: {\n      type: 'list'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_explain',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [fieldStats](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/search-field-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for to get field statistics for (min value, max value, and more)\n * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Defines if field stats should be returned on a per index level or on a cluster wide level\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.fieldStats = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    level: {\n      type: 'enum',\n      'default': 'cluster',\n      options: [\n        'indices',\n        'cluster'\n      ]\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_field_stats',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_field_stats'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [get](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.get = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getScript](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.getScript = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getSource](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types\n */\napi.getSource = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.getTemplate = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [index](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.index = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'duration'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\napi.indices = namespace();\n\n/**\n * Perform a [indices.analyze](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-analyze.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The name of the analyzer to use\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.charFilters - A comma-separated list of character filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>} params.field - Use the analyzer configured for this field (instead of passing the analyzer name)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.filters - A comma-separated list of filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index to scope the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.preferLocal - With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.text - The text on which the analysis should be performed (when request body is not used)\n * @param {<<api-param-type-string,`String`>>} params.tokenizer - The name of the tokenizer to use for the analysis\n * @param {<<api-param-type-string,`String`>>} [params.format=detailed] - Format of the output\n */\napi.indices.prototype.analyze = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    charFilters: {\n      type: 'list',\n      name: 'char_filters'\n    },\n    field: {\n      type: 'string'\n    },\n    filters: {\n      type: 'list'\n    },\n    index: {\n      type: 'string'\n    },\n    preferLocal: {\n      type: 'boolean',\n      name: 'prefer_local'\n    },\n    text: {\n      type: 'list'\n    },\n    tokenizer: {\n      type: 'string'\n    },\n    format: {\n      type: 'enum',\n      'default': 'detailed',\n      options: [\n        'detailed',\n        'text'\n      ]\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_analyze',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_analyze'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.clearCache](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-clearcache.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fieldData - Clear field data\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fielddata - Clear field data\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to clear when using the `field_data` parameter (default: all)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.query - Clear query caches\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index name to limit the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.recycler - Clear the recycler cache\n * @param {<<api-param-type-boolean,`Boolean`>>} params.request - Clear request cache\n */\napi.indices.prototype.clearCache = ca({\n  params: {\n    fieldData: {\n      type: 'boolean',\n      name: 'field_data'\n    },\n    fielddata: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    query: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    index: {\n      type: 'list'\n    },\n    recycler: {\n      type: 'boolean'\n    },\n    request: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_cache/clear',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cache/clear'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.close](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma separated list of indices to close\n */\napi.indices.prototype.close = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_close',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.create](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-create-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.updateAllTypes - Whether to update the mapping for all fields with the same name across all types or not\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.create = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    updateAllTypes: {\n      type: 'boolean',\n      name: 'update_all_types'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.delete](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-delete-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices\n */\napi.indices.prototype['delete'] = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteAlias](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.\n */\napi.indices.prototype.deleteAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_alias/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.deleteTemplate = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteWarmer](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of warmer names to delete (supports wildcards); use `_all` to delete all warmers in the specified indices. You must specify a name either in the uri or in the parameters.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to delete warmers from (supports wildcards); use `_all` to perform the operation on all indices.\n */\napi.indices.prototype.deleteWarmer = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    name: {\n      type: 'list'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_warmer/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.exists](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to check\n */\napi.indices.prototype.exists = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsAlias](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.existsAlias = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': [\n        'open',\n        'closed'\n      ],\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_alias',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.existsTemplate = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsType](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-types-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` to check the types across all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to check\n */\napi.indices.prototype.existsType = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      type: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.flush](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-flush.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitIfOngoing - If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. The default is false and will cause an exception to be thrown on the shard level if another flush operation is already running.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n */\napi.indices.prototype.flush = ca({\n  params: {\n    force: {\n      type: 'boolean'\n    },\n    waitIfOngoing: {\n      type: 'boolean',\n      name: 'wait_if_ongoing'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_flush',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_flush'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.flushSynced](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-synced-flush.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n */\napi.indices.prototype.flushSynced = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_flush/synced',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_flush/synced'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.forcemerge](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-forcemerge.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flush - Specify whether the index should be flushed after performing the operation (default: true)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.maxNumSegments - The number of segments the index should be merged into (default: dynamic)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyExpungeDeletes - Specify whether the operation should only expunge deleted documents\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForMerge - Specify whether the request should block until the merge process is finished (default: true)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.forcemerge = ca({\n  params: {\n    flush: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    maxNumSegments: {\n      type: 'number',\n      name: 'max_num_segments'\n    },\n    onlyExpungeDeletes: {\n      type: 'boolean',\n      name: 'only_expunge_deletes'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    waitForMerge: {\n      type: 'boolean',\n      name: 'wait_for_merge'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_forcemerge',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_forcemerge'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.get](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-get-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Ignore unavailable indexes (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return version and creation date values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.feature - A comma-separated list of features\n */\napi.indices.prototype.get = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=feature%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        feature: {\n          type: 'list',\n          options: [\n            '_settings',\n            '_mappings',\n            '_warmers',\n            '_aliases'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getAlias](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.getAlias = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_alias',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getAliases](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to filter\n */\napi.indices.prototype.getAliases = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_aliases/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_aliases',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_aliases/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_aliases'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getFieldMapping](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-get-field-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether the default mapping values should be returned as well\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields\n */\napi.indices.prototype.getFieldMapping = ca({\n  params: {\n    includeDefaults: {\n      type: 'boolean',\n      name: 'include_defaults'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>/field/<%=fields%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping/field/<%=fields%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>/field/<%=fields%>',\n      req: {\n        type: {\n          type: 'list'\n        },\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/field/<%=fields%>',\n      req: {\n        fields: {\n          type: 'list'\n        }\n      }\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getMapping](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-get-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n */\napi.indices.prototype.getMapping = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>',\n      req: {\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getSettings](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-get-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return version and creation date values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the settings that should be included\n */\napi.indices.prototype.getSettings = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': [\n        'open',\n        'closed'\n      ],\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    local: {\n      type: 'boolean'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The comma separated names of the index templates\n */\napi.indices.prototype.getTemplate = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_template/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_template'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getUpgrade](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-upgrade.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.getUpgrade = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_upgrade',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_upgrade'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getWarmer](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the warmer (supports wildcards); leave empty to get all warmers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n */\napi.indices.prototype.getWarmer = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.open](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma separated list of indices to open\n */\napi.indices.prototype.open = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'closed',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_open',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.optimize](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-optimize.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flush - Specify whether the index should be flushed after performing the operation (default: true)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.maxNumSegments - The number of segments the index should be merged into (default: dynamic)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyExpungeDeletes - Specify whether the operation should only expunge deleted documents\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForMerge - Specify whether the request should block until the merge process is finished (default: true)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.optimize = ca({\n  params: {\n    flush: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    maxNumSegments: {\n      type: 'number',\n      name: 'max_num_segments'\n    },\n    onlyExpungeDeletes: {\n      type: 'boolean',\n      name: 'only_expunge_deletes'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    waitForMerge: {\n      type: 'boolean',\n      name: 'wait_for_merge'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_optimize',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_optimize'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.putAlias](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the alias to be created or updated\n */\napi.indices.prototype.putAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_alias/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putMapping](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-put-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.updateAllTypes - Whether to update the mapping for all fields with the same name across all types or not\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.\n * @param {<<api-param-type-string,`String`>>} params.type - The name of the document type\n */\napi.indices.prototype.putMapping = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    updateAllTypes: {\n      type: 'boolean',\n      name: 'update_all_types'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>',\n      req: {\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putSettings](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.putSettings = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.order - The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.create - Whether the index template should only be added if new or can also replace an existing one\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.putTemplate = ca({\n  params: {\n    order: {\n      type: 'number'\n    },\n    create: {\n      type: 'boolean',\n      'default': false\n    },\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putWarmer](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed) in the search request to warm\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices in the search request to warm. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both, in the search request to warm.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify whether the request to be warmed should use the request cache, defaults to index level setting\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the warmer\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types\n */\napi.indices.prototype.putWarmer = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    requestCache: {\n      type: 'boolean',\n      name: 'request_cache'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer/<%=name%>',\n      req: {\n        name: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.recovery](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-recovery.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Whether to display detailed information about shard recovery\n * @param {<<api-param-type-boolean,`Boolean`>>} params.activeOnly - Display only those recoveries that are currently on-going\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.recovery = ca({\n  params: {\n    detailed: {\n      type: 'boolean',\n      'default': false\n    },\n    activeOnly: {\n      type: 'boolean',\n      'default': false,\n      name: 'active_only'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_recovery',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_recovery'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.refresh](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-refresh.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Force a refresh even if not required\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.refresh = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    force: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_refresh',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_refresh'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.segments](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-segments.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Includes detailed memory usage by Lucene.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.segments = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    verbose: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_segments',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_segments'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.shardStores](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-shards-stores.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.status - A comma-separated list of statuses used to filter on shards to get store information for\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.shardStores = ca({\n  params: {\n    status: {\n      type: 'list',\n      options: [\n        'green',\n        'yellow',\n        'red',\n        'all'\n      ]\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_shard_stores',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_shard_stores'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.stats](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>} [params.level=indices] - Return stats aggregated at cluster, index or shard level\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned the specific metrics.\n */\napi.indices.prototype.stats = ca({\n  params: {\n    completionFields: {\n      type: 'list',\n      name: 'completion_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    fields: {\n      type: 'list'\n    },\n    groups: {\n      type: 'list'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    level: {\n      type: 'enum',\n      'default': 'indices',\n      options: [\n        'cluster',\n        'indices',\n        'shards'\n      ]\n    },\n    types: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_stats/<%=metric%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'query_cache',\n            'flush',\n            'get',\n            'indexing',\n            'merge',\n            'percolate',\n            'request_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_stats/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'query_cache',\n            'flush',\n            'get',\n            'indexing',\n            'merge',\n            'percolate',\n            'request_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_stats',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_stats'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.updateAliases](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Request timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.indices.prototype.updateAliases = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_aliases'\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.upgrade](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/indices-upgrade.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Specify whether the request should block until the all segments are upgraded (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyAncientSegments - If true, only ancient (an older Lucene major release) segments will be upgraded\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.upgrade = ca({\n  params: {\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      name: 'wait_for_completion'\n    },\n    onlyAncientSegments: {\n      type: 'boolean',\n      name: 'only_ancient_segments'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_upgrade',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_upgrade'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.validateQuery](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/search-validate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return detailed information about the error\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-boolean,`Boolean`>>} params.rewrite - Provide a more detailed explanation showing the actual Lucene query that will be executed.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n */\napi.indices.prototype.validateQuery = ca({\n  params: {\n    explain: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    q: {\n      type: 'string'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    rewrite: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_validate/query'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [info](http://www.elastic.co/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.info = ca({\n  url: {\n    fmt: '/'\n  }\n});\n\n/**\n * Perform a [mget](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/docs-multi-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.mget = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mget'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mpercolate](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated to use as default\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated to use as default.\n */\napi.mpercolate = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mpercolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mpercolate',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mpercolate'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [msearch](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/search-multi-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n */\napi.msearch = ca({\n  params: {\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_msearch'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mtermvectors](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/docs-multi-termvectors.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.ids - A comma-separated list of documents ids. You must define ids as parameter or set \"ids\" or \"docs\" in the request body\n * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if requests are real-time as opposed to near-real-time (default: true).\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n */\napi.mtermvectors = ca({\n  params: {\n    ids: {\n      type: 'list',\n      required: false\n    },\n    termStatistics: {\n      type: 'boolean',\n      'default': false,\n      required: false,\n      name: 'term_statistics'\n    },\n    fieldStatistics: {\n      type: 'boolean',\n      'default': true,\n      required: false,\n      name: 'field_statistics'\n    },\n    fields: {\n      type: 'list',\n      required: false\n    },\n    offsets: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    positions: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    payloads: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    preference: {\n      type: 'string',\n      required: false\n    },\n    routing: {\n      type: 'string',\n      required: false\n    },\n    parent: {\n      type: 'string',\n      required: false\n    },\n    realtime: {\n      type: 'boolean',\n      required: false\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mtermvectors',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mtermvectors',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mtermvectors'\n    }\n  ],\n  method: 'POST'\n});\n\napi.nodes = namespace();\n\n/**\n * Perform a [nodes.hotThreads](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/cluster-nodes-hot-threads.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.interval - The interval for the second sampling of threads\n * @param {<<api-param-type-number,`Number`>>} params.snapshots - Number of samples of thread stacktrace (default: 10)\n * @param {<<api-param-type-number,`Number`>>} params.threads - Specify the number of threads to provide information for (default: 3)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreIdleThreads - Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue (default: true)\n * @param {<<api-param-type-string,`String`>>} params.type - The type to sample (default: cpu)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.nodes.prototype.hotThreads = ca({\n  params: {\n    interval: {\n      type: 'time'\n    },\n    snapshots: {\n      type: 'number'\n    },\n    threads: {\n      type: 'number'\n    },\n    ignoreIdleThreads: {\n      type: 'boolean',\n      name: 'ignore_idle_threads'\n    },\n    type: {\n      type: 'enum',\n      options: [\n        'cpu',\n        'wait',\n        'block'\n      ]\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/hotthreads',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/hotthreads'\n    }\n  ]\n});\n\n/**\n * Perform a [nodes.info](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/cluster-nodes-info.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - A comma-separated list of metrics you wish returned. Leave empty to return all.\n */\napi.nodes.prototype.info = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/<%=metric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            'settings',\n            'os',\n            'process',\n            'jvm',\n            'thread_pool',\n            'transport',\n            'http',\n            'plugins'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            'settings',\n            'os',\n            'process',\n            'jvm',\n            'thread_pool',\n            'transport',\n            'http',\n            'plugins'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes'\n    }\n  ]\n});\n\n/**\n * Perform a [nodes.stats](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/cluster-nodes-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>} [params.level=node] - Return indices stats aggregated at node, index or shard level\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indexMetric - Limit the information returned for `indices` metric to the specific index metrics. Isn't used if `indices` (or `all`) metric isn't specified.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.nodes.prototype.stats = ca({\n  params: {\n    completionFields: {\n      type: 'list',\n      name: 'completion_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    fields: {\n      type: 'list'\n    },\n    groups: {\n      type: 'boolean'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    level: {\n      type: 'enum',\n      'default': 'node',\n      options: [\n        'node',\n        'indices',\n        'shards'\n      ]\n    },\n    types: {\n      type: 'list'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>/<%=indexMetric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        },\n        indexMetric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'query_cache',\n            'flush',\n            'get',\n            'indexing',\n            'merge',\n            'percolate',\n            'request_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats/<%=metric%>/<%=indexMetric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        },\n        indexMetric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'query_cache',\n            'flush',\n            'get',\n            'indexing',\n            'merge',\n            'percolate',\n            'request_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats'\n    }\n  ]\n});\n\n/**\n * Perform a [percolate](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to percolate the document into. Defaults to index.\n * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to percolate document into. Defaults to type.\n * @param {<<api-param-type-string,`String`>>} params.percolateRouting - The routing value to use when percolating the existing document.\n * @param {<<api-param-type-string,`String`>>} params.percolatePreference - Which shard to prefer when executing the percolate request.\n * @param {<<api-param-type-string,`String`>>} params.percolateFormat - Return an array of matching query IDs instead of objects\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being percolated.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated.\n * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n */\napi.percolate = ca({\n  params: {\n    routing: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    percolateIndex: {\n      type: 'string',\n      name: 'percolate_index'\n    },\n    percolateType: {\n      type: 'string',\n      name: 'percolate_type'\n    },\n    percolateRouting: {\n      type: 'string',\n      name: 'percolate_routing'\n    },\n    percolatePreference: {\n      type: 'string',\n      name: 'percolate_preference'\n    },\n    percolateFormat: {\n      type: 'enum',\n      options: [\n        'ids'\n      ],\n      name: 'percolate_format'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_percolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [ping](http://www.elastic.co/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.ping = ca({\n  url: {\n    fmt: '/'\n  },\n  requestTimeout: 3000,\n  method: 'HEAD'\n});\n\n/**\n * Perform a [putScript](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.putScript = ca({\n  params: {\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [putTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.putTemplate = ca({\n  params: {\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [renderSearchTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.id - The id of the stored search template\n */\napi.renderSearchTemplate = ca({\n  urls: [\n    {\n      fmt: '/_render/template/<%=id%>',\n      req: {\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_render/template'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [scroll](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.scrollId - The scroll ID\n */\napi.scroll = ca({\n  params: {\n    scroll: {\n      type: 'duration'\n    },\n    scrollId: {\n      type: 'string',\n      name: 'scroll_id'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_search/scroll/<%=scrollId%>',\n      req: {\n        scrollId: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_search/scroll'\n    }\n  ],\n  paramAsBody: 'scrollId',\n  method: 'POST'\n});\n\n/**\n * Perform a [search](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/search-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields to return as the field data representation of a field for each hit\n * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n * @param {<<api-param-type-string,`String`>>} params.suggestField - Specify which field to use for suggestions\n * @param {<<api-param-type-string,`String`>>} [params.suggestMode=missing] - Specify suggest mode\n * @param {<<api-param-type-number,`Number`>>} params.suggestSize - How many suggestions to return in response\n * @param {<<api-param-type-string,`String`>>} params.suggestText - The source text for which the suggestions should be returned\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.trackScores - Whether to calculate and return scores even if they are not used for sorting\n * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.search = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    from: {\n      type: 'number'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'duration'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'dfs_query_then_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    },\n    size: {\n      type: 'number'\n    },\n    sort: {\n      type: 'list'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    terminateAfter: {\n      type: 'number',\n      name: 'terminate_after'\n    },\n    stats: {\n      type: 'list'\n    },\n    suggestField: {\n      type: 'string',\n      name: 'suggest_field'\n    },\n    suggestMode: {\n      type: 'enum',\n      'default': 'missing',\n      options: [\n        'missing',\n        'popular',\n        'always'\n      ],\n      name: 'suggest_mode'\n    },\n    suggestSize: {\n      type: 'number',\n      name: 'suggest_size'\n    },\n    suggestText: {\n      type: 'text',\n      name: 'suggest_text'\n    },\n    timeout: {\n      type: 'time'\n    },\n    trackScores: {\n      type: 'boolean',\n      name: 'track_scores'\n    },\n    version: {\n      type: 'boolean'\n    },\n    requestCache: {\n      type: 'boolean',\n      name: 'request_cache'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchExists](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/search-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n */\napi.searchExists = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    minScore: {\n      type: 'number',\n      name: 'min_score'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search/exists',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search/exists',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/exists'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchShards](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/search-shards.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.searchShards = ca({\n  params: {\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search_shards',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search_shards',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search_shards'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.searchTemplate = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'duration'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search/template',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search/template',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/template'\n    }\n  ],\n  method: 'POST'\n});\n\napi.snapshot = namespace();\n\n/**\n * Perform a [snapshot.create](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype.create = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.createRepository](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.verify - Whether to verify the repository after creation\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n */\napi.snapshot.prototype.createRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    },\n    verify: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>',\n    req: {\n      repository: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.delete](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype['delete'] = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [snapshot.deleteRepository](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n */\napi.snapshot.prototype.deleteRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>',\n    req: {\n      repository: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [snapshot.get](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n */\napi.snapshot.prototype.get = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'list'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [snapshot.getRepository](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n */\napi.snapshot.prototype.getRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_snapshot/<%=repository%>',\n      req: {\n        repository: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot'\n    }\n  ]\n});\n\n/**\n * Perform a [snapshot.restore](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype.restore = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_restore',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.status](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n */\napi.snapshot.prototype.status = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_status',\n      req: {\n        repository: {\n          type: 'string'\n        },\n        snapshot: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot/<%=repository%>/_status',\n      req: {\n        repository: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot/_status'\n    }\n  ]\n});\n\n/**\n * Perform a [snapshot.verifyRepository](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n */\napi.snapshot.prototype.verifyRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/_verify',\n    req: {\n      repository: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [suggest](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/search-suggesters.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n */\napi.suggest = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_suggest',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_suggest'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [termvectors](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/docs-termvectors.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.dfs - Specifies if distributed frequencies should be returned instead shard frequencies.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random).\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value.\n * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if request is real-time as opposed to near-real-time (default: true).\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n * @param {<<api-param-type-string,`String`>>} params.id - The id of the document, when not specified a doc param should be supplied.\n */\napi.termvectors = ca({\n  params: {\n    termStatistics: {\n      type: 'boolean',\n      'default': false,\n      required: false,\n      name: 'term_statistics'\n    },\n    fieldStatistics: {\n      type: 'boolean',\n      'default': true,\n      required: false,\n      name: 'field_statistics'\n    },\n    dfs: {\n      type: 'boolean',\n      'default': false,\n      required: false\n    },\n    fields: {\n      type: 'list',\n      required: false\n    },\n    offsets: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    positions: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    payloads: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    preference: {\n      type: 'string',\n      required: false\n    },\n    routing: {\n      type: 'string',\n      required: false\n    },\n    parent: {\n      type: 'string',\n      required: false\n    },\n    realtime: {\n      type: 'boolean',\n      required: false\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_termvectors',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_termvectors',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [update](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/docs-update.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.lang - The script language (default: groovy)\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document. Is is only used for routing and when for the upsert request\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-number,`Number`>>} params.retryOnConflict - Specify how many times should the operation be retried when a conflict occurs (default: 0)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {anything} params.script - The URL-encoded script definition (instead of using request body)\n * @param {anything} params.scriptId - The id of a stored script\n * @param {<<api-param-type-boolean,`Boolean`>>} params.scriptedUpsert - True if the script referenced in script or script_id should be called to perform inserts - defaults to false\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.update = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    fields: {\n      type: 'list'\n    },\n    lang: {\n      type: 'string'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    retryOnConflict: {\n      type: 'number',\n      name: 'retry_on_conflict'\n    },\n    routing: {\n      type: 'string'\n    },\n    script: {},\n    scriptId: {\n      name: 'script_id'\n    },\n    scriptedUpsert: {\n      type: 'boolean',\n      name: 'scripted_upsert'\n    },\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'duration'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_update',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [create](http://www.elastic.co/guide/en/elasticsearch/reference/2.1/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.create = ca.proxy(api.index, {\n  transform: function (params) {\n    params.op_type = 'create';\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/apis/2_0.js":"var ca = require('../client_action').makeFactoryWithModifier(function (spec) {\n  return require('../utils').merge(spec, {\n    params: {\n      filterPath: {\n        type: 'list',\n        name: 'filter_path'\n      }\n    }\n  });\n});\nvar namespace = require('../client_action').namespaceFactory;\nvar api = module.exports = {};\n\napi._namespaces = ['cat', 'cluster', 'indices', 'nodes', 'snapshot'];\n\n/**\n * Perform a [bulk](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/docs-bulk.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.type - Default document type for items which don't provide one\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - Default comma-separated list of fields to return in the response for updates\n * @param {<<api-param-type-string,`String`>>} params.index - Default index for items which don't provide one\n */\napi.bulk = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    type: {\n      type: 'string'\n    },\n    fields: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_bulk'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\napi.cat = namespace();\n\n/**\n * Perform a [cat.aliases](http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.cat.prototype.aliases = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/aliases/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/aliases'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.allocation](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/cat-allocation.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information\n */\napi.cat.prototype.allocation = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/allocation/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/allocation'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.count](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/cat-count.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.count = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/count/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/count'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.fielddata](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/cat-fielddata.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return the fielddata size\n */\napi.cat.prototype.fielddata = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    },\n    fields: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/fielddata/<%=fields%>',\n      req: {\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/fielddata'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.health](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/cat-health.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.ts=true] - Set to false to disable timestamping\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.health = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    ts: {\n      type: 'boolean',\n      'default': true\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/health'\n  }\n});\n\n/**\n * Perform a [cat.help](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/cat.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n */\napi.cat.prototype.help = ca({\n  params: {\n    help: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat'\n  }\n});\n\n/**\n * Perform a [cat.indices](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/cat-indices.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.pri - Set to true to return stats only for primary shards\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.indices = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    pri: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/indices/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/indices'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.master](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/cat-master.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.master = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/master'\n  }\n});\n\n/**\n * Perform a [cat.nodeattrs](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/cat-nodeattrs.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.nodeattrs = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/nodeattrs'\n  }\n});\n\n/**\n * Perform a [cat.nodes](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/cat-nodes.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.nodes = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/nodes'\n  }\n});\n\n/**\n * Perform a [cat.pendingTasks](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/cat-pending-tasks.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.pendingTasks = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/pending_tasks'\n  }\n});\n\n/**\n * Perform a [cat.plugins](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/cat-plugins.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.plugins = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/plugins'\n  }\n});\n\n/**\n * Perform a [cat.recovery](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/cat-recovery.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.recovery = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/recovery/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/recovery'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.segments](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/cat-segments.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.segments = ca({\n  params: {\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/segments/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/segments'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.shards](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/cat-shards.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.shards = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/shards/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/shards'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.threadPool](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/cat-thread-pool.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fullId - Enables displaying the complete node ids\n */\napi.cat.prototype.threadPool = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    },\n    fullId: {\n      type: 'boolean',\n      'default': false,\n      name: 'full_id'\n    }\n  },\n  url: {\n    fmt: '/_cat/thread_pool'\n  }\n});\n\n/**\n * Perform a [clearScroll](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.scrollId - A comma-separated list of scroll IDs to clear\n */\napi.clearScroll = ca({\n  urls: [\n    {\n      fmt: '/_search/scroll/<%=scrollId%>',\n      req: {\n        scrollId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/scroll'\n    }\n  ],\n  paramAsBody: 'scrollId',\n  method: 'DELETE'\n});\n\napi.cluster = namespace();\n\n/**\n * Perform a [cluster.getSettings](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.getSettings = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/settings'\n  }\n});\n\n/**\n * Perform a [cluster.health](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/cluster-health.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Specify the level of detail for returned information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-number,`Number`>>} params.waitForActiveShards - Wait until the specified number of shards is active\n * @param {<<api-param-type-string,`String`>>} params.waitForNodes - Wait until the specified number of nodes is available\n * @param {<<api-param-type-number,`Number`>>} params.waitForRelocatingShards - Wait until the specified number of relocating shards is finished\n * @param {<<api-param-type-string,`String`>>} params.waitForStatus - Wait until cluster is in a specific state\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - Limit the information returned to a specific index\n */\napi.cluster.prototype.health = ca({\n  params: {\n    level: {\n      type: 'enum',\n      'default': 'cluster',\n      options: [\n        'cluster',\n        'indices',\n        'shards'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    },\n    waitForActiveShards: {\n      type: 'number',\n      name: 'wait_for_active_shards'\n    },\n    waitForNodes: {\n      type: 'string',\n      name: 'wait_for_nodes'\n    },\n    waitForRelocatingShards: {\n      type: 'number',\n      name: 'wait_for_relocating_shards'\n    },\n    waitForStatus: {\n      type: 'enum',\n      'default': null,\n      options: [\n        'green',\n        'yellow',\n        'red'\n      ],\n      name: 'wait_for_status'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/health/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/health'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.pendingTasks](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/cluster-pending.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.cluster.prototype.pendingTasks = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_cluster/pending_tasks'\n  }\n});\n\n/**\n * Perform a [cluster.putSettings](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.putSettings = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/settings'\n  },\n  method: 'PUT'\n});\n\n/**\n * Perform a [cluster.reroute](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/cluster-reroute.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - Simulate the operation only and return the resulting state\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return an explanation of why the commands can or cannot be executed\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics. Defaults to all but metadata\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.reroute = ca({\n  params: {\n    dryRun: {\n      type: 'boolean',\n      name: 'dry_run'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    metric: {\n      type: 'list',\n      options: [\n        '_all',\n        'blocks',\n        'metadata',\n        'nodes',\n        'routing_table',\n        'master_node',\n        'version'\n      ]\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/reroute'\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [cluster.state](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/cluster-state.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n */\napi.cluster.prototype.state = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/state/<%=metric%>/<%=index%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'blocks',\n            'metadata',\n            'nodes',\n            'routing_table',\n            'routing_nodes',\n            'master_node',\n            'version'\n          ]\n        },\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/state/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'blocks',\n            'metadata',\n            'nodes',\n            'routing_table',\n            'routing_nodes',\n            'master_node',\n            'version'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/state'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.stats](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/cluster-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.cluster.prototype.stats = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/stats/nodes/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/stats'\n    }\n  ]\n});\n\n/**\n * Perform a [count](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/search-count.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n */\napi.count = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    minScore: {\n      type: 'number',\n      name: 'min_score'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_count'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [countPercolate](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to count percolate the document into. Defaults to index.\n * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to count percolate document into. Defaults to type.\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being count percolated.\n * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n */\napi.countPercolate = ca({\n  params: {\n    routing: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    percolateIndex: {\n      type: 'string',\n      name: 'percolate_index'\n    },\n    percolateType: {\n      type: 'string',\n      name: 'percolate_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate/count',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_percolate/count',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [delete](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/docs-delete.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Specific write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi['delete'] = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteScript](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.deleteScript = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.deleteTemplate = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [exists](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.exists = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [explain](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/search-explain.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer for the query string query\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The default field for query string query (default: _all)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.explain = ca({\n  params: {\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    fields: {\n      type: 'list'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_explain',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [fieldStats](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/search-field-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for to get field statistics for (min value, max value, and more)\n * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Defines if field stats should be returned on a per index level or on a cluster wide level\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.fieldStats = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    level: {\n      type: 'enum',\n      'default': 'cluster',\n      options: [\n        'indices',\n        'cluster'\n      ]\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_field_stats',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_field_stats'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [get](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.get = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getScript](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.getScript = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getSource](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types\n */\napi.getSource = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.getTemplate = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [index](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.index = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'duration'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\napi.indices = namespace();\n\n/**\n * Perform a [indices.analyze](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-analyze.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The name of the analyzer to use\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.charFilters - A comma-separated list of character filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>} params.field - Use the analyzer configured for this field (instead of passing the analyzer name)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.filters - A comma-separated list of filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index to scope the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.preferLocal - With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.text - The text on which the analysis should be performed (when request body is not used)\n * @param {<<api-param-type-string,`String`>>} params.tokenizer - The name of the tokenizer to use for the analysis\n * @param {<<api-param-type-string,`String`>>} [params.format=detailed] - Format of the output\n */\napi.indices.prototype.analyze = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    charFilters: {\n      type: 'list',\n      name: 'char_filters'\n    },\n    field: {\n      type: 'string'\n    },\n    filters: {\n      type: 'list'\n    },\n    index: {\n      type: 'string'\n    },\n    preferLocal: {\n      type: 'boolean',\n      name: 'prefer_local'\n    },\n    text: {\n      type: 'list'\n    },\n    tokenizer: {\n      type: 'string'\n    },\n    format: {\n      type: 'enum',\n      'default': 'detailed',\n      options: [\n        'detailed',\n        'text'\n      ]\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_analyze',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_analyze'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.clearCache](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-clearcache.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fieldData - Clear field data\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fielddata - Clear field data\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to clear when using the `field_data` parameter (default: all)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.query - Clear query caches\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index name to limit the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.recycler - Clear the recycler cache\n * @param {<<api-param-type-boolean,`Boolean`>>} params.request - Clear request cache\n */\napi.indices.prototype.clearCache = ca({\n  params: {\n    fieldData: {\n      type: 'boolean',\n      name: 'field_data'\n    },\n    fielddata: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    query: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    index: {\n      type: 'list'\n    },\n    recycler: {\n      type: 'boolean'\n    },\n    request: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_cache/clear',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cache/clear'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.close](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma separated list of indices to close\n */\napi.indices.prototype.close = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_close',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.create](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-create-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.updateAllTypes - Whether to update the mapping for all fields with the same name across all types or not\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.create = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    updateAllTypes: {\n      type: 'boolean',\n      name: 'update_all_types'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.delete](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-delete-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices\n */\napi.indices.prototype['delete'] = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteAlias](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.\n */\napi.indices.prototype.deleteAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_alias/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.deleteTemplate = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteWarmer](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of warmer names to delete (supports wildcards); use `_all` to delete all warmers in the specified indices. You must specify a name either in the uri or in the parameters.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to delete warmers from (supports wildcards); use `_all` to perform the operation on all indices.\n */\napi.indices.prototype.deleteWarmer = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    name: {\n      type: 'list'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_warmer/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.exists](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to check\n */\napi.indices.prototype.exists = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsAlias](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.existsAlias = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': [\n        'open',\n        'closed'\n      ],\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_alias',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.existsTemplate = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsType](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-types-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` to check the types across all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to check\n */\napi.indices.prototype.existsType = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      type: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.flush](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-flush.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitIfOngoing - If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. The default is false and will cause an exception to be thrown on the shard level if another flush operation is already running.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n */\napi.indices.prototype.flush = ca({\n  params: {\n    force: {\n      type: 'boolean'\n    },\n    waitIfOngoing: {\n      type: 'boolean',\n      name: 'wait_if_ongoing'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_flush',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_flush'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.flushSynced](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-synced-flush.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n */\napi.indices.prototype.flushSynced = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_flush/synced',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_flush/synced'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.get](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-get-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Ignore unavailable indexes (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return version and creation date values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.feature - A comma-separated list of features\n */\napi.indices.prototype.get = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=feature%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        feature: {\n          type: 'list',\n          options: [\n            '_settings',\n            '_mappings',\n            '_warmers',\n            '_aliases'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getAlias](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.getAlias = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_alias',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getAliases](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to filter\n */\napi.indices.prototype.getAliases = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_aliases/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_aliases',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_aliases/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_aliases'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getFieldMapping](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-get-field-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether the default mapping values should be returned as well\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields\n */\napi.indices.prototype.getFieldMapping = ca({\n  params: {\n    includeDefaults: {\n      type: 'boolean',\n      name: 'include_defaults'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>/field/<%=fields%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping/field/<%=fields%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>/field/<%=fields%>',\n      req: {\n        type: {\n          type: 'list'\n        },\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/field/<%=fields%>',\n      req: {\n        fields: {\n          type: 'list'\n        }\n      }\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getMapping](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-get-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n */\napi.indices.prototype.getMapping = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>',\n      req: {\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getSettings](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-get-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return version and creation date values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the settings that should be included\n */\napi.indices.prototype.getSettings = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': [\n        'open',\n        'closed'\n      ],\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    local: {\n      type: 'boolean'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The comma separated names of the index templates\n */\napi.indices.prototype.getTemplate = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_template/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_template'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getUpgrade](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-upgrade.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.getUpgrade = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_upgrade',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_upgrade'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getWarmer](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the warmer (supports wildcards); leave empty to get all warmers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n */\napi.indices.prototype.getWarmer = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.open](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma separated list of indices to open\n */\napi.indices.prototype.open = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'closed',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_open',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.optimize](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-optimize.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flush - Specify whether the index should be flushed after performing the operation (default: true)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.maxNumSegments - The number of segments the index should be merged into (default: dynamic)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyExpungeDeletes - Specify whether the operation should only expunge deleted documents\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForMerge - Specify whether the request should block until the merge process is finished (default: true)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.optimize = ca({\n  params: {\n    flush: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    maxNumSegments: {\n      type: 'number',\n      name: 'max_num_segments'\n    },\n    onlyExpungeDeletes: {\n      type: 'boolean',\n      name: 'only_expunge_deletes'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    waitForMerge: {\n      type: 'boolean',\n      name: 'wait_for_merge'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_optimize',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_optimize'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.putAlias](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the alias to be created or updated\n */\napi.indices.prototype.putAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_alias/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putMapping](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-put-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.updateAllTypes - Whether to update the mapping for all fields with the same name across all types or not\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.\n * @param {<<api-param-type-string,`String`>>} params.type - The name of the document type\n */\napi.indices.prototype.putMapping = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    updateAllTypes: {\n      type: 'boolean',\n      name: 'update_all_types'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>',\n      req: {\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putSettings](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.putSettings = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.order - The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.create - Whether the index template should only be added if new or can also replace an existing one\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.putTemplate = ca({\n  params: {\n    order: {\n      type: 'number'\n    },\n    create: {\n      type: 'boolean',\n      'default': false\n    },\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putWarmer](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed) in the search request to warm\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices in the search request to warm. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both, in the search request to warm.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify whether the request to be warmed should use the request cache, defaults to index level setting\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the warmer\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types\n */\napi.indices.prototype.putWarmer = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    requestCache: {\n      type: 'boolean',\n      name: 'request_cache'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer/<%=name%>',\n      req: {\n        name: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.recovery](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-recovery.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Whether to display detailed information about shard recovery\n * @param {<<api-param-type-boolean,`Boolean`>>} params.activeOnly - Display only those recoveries that are currently on-going\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.recovery = ca({\n  params: {\n    detailed: {\n      type: 'boolean',\n      'default': false\n    },\n    activeOnly: {\n      type: 'boolean',\n      'default': false,\n      name: 'active_only'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_recovery',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_recovery'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.refresh](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-refresh.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Force a refresh even if not required\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.refresh = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    force: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_refresh',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_refresh'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.segments](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-segments.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Includes detailed memory usage by Lucene.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.segments = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    verbose: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_segments',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_segments'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.shardStores](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-shards-stores.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.status - A comma-separated list of statuses used to filter on shards to get store information for\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.shardStores = ca({\n  params: {\n    status: {\n      type: 'list',\n      options: [\n        'green',\n        'yellow',\n        'red',\n        'all'\n      ]\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_shard_stores',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_shard_stores'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.stats](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>} [params.level=indices] - Return stats aggregated at cluster, index or shard level\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned the specific metrics.\n */\napi.indices.prototype.stats = ca({\n  params: {\n    completionFields: {\n      type: 'list',\n      name: 'completion_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    fields: {\n      type: 'list'\n    },\n    groups: {\n      type: 'list'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    level: {\n      type: 'enum',\n      'default': 'indices',\n      options: [\n        'cluster',\n        'indices',\n        'shards'\n      ]\n    },\n    types: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_stats/<%=metric%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'query_cache',\n            'flush',\n            'get',\n            'indexing',\n            'merge',\n            'percolate',\n            'request_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_stats/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'query_cache',\n            'flush',\n            'get',\n            'indexing',\n            'merge',\n            'percolate',\n            'request_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_stats',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_stats'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.updateAliases](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Request timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.indices.prototype.updateAliases = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_aliases'\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.upgrade](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/indices-upgrade.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Specify whether the request should block until the all segments are upgraded (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyAncientSegments - If true, only ancient (an older Lucene major release) segments will be upgraded\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.upgrade = ca({\n  params: {\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      name: 'wait_for_completion'\n    },\n    onlyAncientSegments: {\n      type: 'boolean',\n      name: 'only_ancient_segments'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_upgrade',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_upgrade'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.validateQuery](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/search-validate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return detailed information about the error\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-boolean,`Boolean`>>} params.rewrite - Provide a more detailed explanation showing the actual Lucene query that will be executed.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n */\napi.indices.prototype.validateQuery = ca({\n  params: {\n    explain: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    q: {\n      type: 'string'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    rewrite: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_validate/query'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [info](http://www.elastic.co/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.info = ca({\n  url: {\n    fmt: '/'\n  }\n});\n\n/**\n * Perform a [mget](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/docs-multi-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.mget = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mget'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mpercolate](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated to use as default\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated to use as default.\n */\napi.mpercolate = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mpercolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mpercolate',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mpercolate'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [msearch](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/search-multi-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n */\napi.msearch = ca({\n  params: {\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_msearch'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mtermvectors](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/docs-multi-termvectors.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.ids - A comma-separated list of documents ids. You must define ids as parameter or set \"ids\" or \"docs\" in the request body\n * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if requests are real-time as opposed to near-real-time (default: true).\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n */\napi.mtermvectors = ca({\n  params: {\n    ids: {\n      type: 'list',\n      required: false\n    },\n    termStatistics: {\n      type: 'boolean',\n      'default': false,\n      required: false,\n      name: 'term_statistics'\n    },\n    fieldStatistics: {\n      type: 'boolean',\n      'default': true,\n      required: false,\n      name: 'field_statistics'\n    },\n    fields: {\n      type: 'list',\n      required: false\n    },\n    offsets: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    positions: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    payloads: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    preference: {\n      type: 'string',\n      required: false\n    },\n    routing: {\n      type: 'string',\n      required: false\n    },\n    parent: {\n      type: 'string',\n      required: false\n    },\n    realtime: {\n      type: 'boolean',\n      required: false\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mtermvectors',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mtermvectors',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mtermvectors'\n    }\n  ],\n  method: 'POST'\n});\n\napi.nodes = namespace();\n\n/**\n * Perform a [nodes.hotThreads](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/cluster-nodes-hot-threads.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.interval - The interval for the second sampling of threads\n * @param {<<api-param-type-number,`Number`>>} params.snapshots - Number of samples of thread stacktrace (default: 10)\n * @param {<<api-param-type-number,`Number`>>} params.threads - Specify the number of threads to provide information for (default: 3)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreIdleThreads - Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue (default: true)\n * @param {<<api-param-type-string,`String`>>} params.type - The type to sample (default: cpu)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.nodes.prototype.hotThreads = ca({\n  params: {\n    interval: {\n      type: 'time'\n    },\n    snapshots: {\n      type: 'number'\n    },\n    threads: {\n      type: 'number'\n    },\n    ignoreIdleThreads: {\n      type: 'boolean',\n      name: 'ignore_idle_threads'\n    },\n    type: {\n      type: 'enum',\n      options: [\n        'cpu',\n        'wait',\n        'block'\n      ]\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/hotthreads',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/hotthreads'\n    }\n  ]\n});\n\n/**\n * Perform a [nodes.info](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/cluster-nodes-info.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - A comma-separated list of metrics you wish returned. Leave empty to return all.\n */\napi.nodes.prototype.info = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/<%=metric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            'settings',\n            'os',\n            'process',\n            'jvm',\n            'thread_pool',\n            'transport',\n            'http',\n            'plugins'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            'settings',\n            'os',\n            'process',\n            'jvm',\n            'thread_pool',\n            'transport',\n            'http',\n            'plugins'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes'\n    }\n  ]\n});\n\n/**\n * Perform a [nodes.stats](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/cluster-nodes-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>} [params.level=node] - Return indices stats aggregated at node, index or shard level\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indexMetric - Limit the information returned for `indices` metric to the specific index metrics. Isn't used if `indices` (or `all`) metric isn't specified.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.nodes.prototype.stats = ca({\n  params: {\n    completionFields: {\n      type: 'list',\n      name: 'completion_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    fields: {\n      type: 'list'\n    },\n    groups: {\n      type: 'boolean'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    level: {\n      type: 'enum',\n      'default': 'node',\n      options: [\n        'node',\n        'indices',\n        'shards'\n      ]\n    },\n    types: {\n      type: 'list'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>/<%=indexMetric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        },\n        indexMetric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'query_cache',\n            'flush',\n            'get',\n            'indexing',\n            'merge',\n            'percolate',\n            'request_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats/<%=metric%>/<%=indexMetric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        },\n        indexMetric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'query_cache',\n            'flush',\n            'get',\n            'indexing',\n            'merge',\n            'percolate',\n            'request_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats'\n    }\n  ]\n});\n\n/**\n * Perform a [percolate](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to percolate the document into. Defaults to index.\n * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to percolate document into. Defaults to type.\n * @param {<<api-param-type-string,`String`>>} params.percolateRouting - The routing value to use when percolating the existing document.\n * @param {<<api-param-type-string,`String`>>} params.percolatePreference - Which shard to prefer when executing the percolate request.\n * @param {<<api-param-type-string,`String`>>} params.percolateFormat - Return an array of matching query IDs instead of objects\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being percolated.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated.\n * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n */\napi.percolate = ca({\n  params: {\n    routing: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    percolateIndex: {\n      type: 'string',\n      name: 'percolate_index'\n    },\n    percolateType: {\n      type: 'string',\n      name: 'percolate_type'\n    },\n    percolateRouting: {\n      type: 'string',\n      name: 'percolate_routing'\n    },\n    percolatePreference: {\n      type: 'string',\n      name: 'percolate_preference'\n    },\n    percolateFormat: {\n      type: 'enum',\n      options: [\n        'ids'\n      ],\n      name: 'percolate_format'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_percolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [ping](http://www.elastic.co/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.ping = ca({\n  url: {\n    fmt: '/'\n  },\n  requestTimeout: 3000,\n  method: 'HEAD'\n});\n\n/**\n * Perform a [putScript](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.putScript = ca({\n  params: {\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [putTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.putTemplate = ca({\n  params: {\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [renderSearchTemplate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/2.0/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.id - The id of the stored search template\n */\napi.renderSearchTemplate = ca({\n  urls: [\n    {\n      fmt: '/_render/template/<%=id%>',\n      req: {\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_render/template'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [scroll](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.scrollId - The scroll ID\n */\napi.scroll = ca({\n  params: {\n    scroll: {\n      type: 'duration'\n    },\n    scrollId: {\n      type: 'string',\n      name: 'scroll_id'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_search/scroll/<%=scrollId%>',\n      req: {\n        scrollId: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_search/scroll'\n    }\n  ],\n  paramAsBody: 'scrollId',\n  method: 'POST'\n});\n\n/**\n * Perform a [search](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/search-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields to return as the field data representation of a field for each hit\n * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n * @param {<<api-param-type-string,`String`>>} params.suggestField - Specify which field to use for suggestions\n * @param {<<api-param-type-string,`String`>>} [params.suggestMode=missing] - Specify suggest mode\n * @param {<<api-param-type-number,`Number`>>} params.suggestSize - How many suggestions to return in response\n * @param {<<api-param-type-string,`String`>>} params.suggestText - The source text for which the suggestions should be returned\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.trackScores - Whether to calculate and return scores even if they are not used for sorting\n * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.search = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    from: {\n      type: 'number'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'duration'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'dfs_query_then_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    },\n    size: {\n      type: 'number'\n    },\n    sort: {\n      type: 'list'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    terminateAfter: {\n      type: 'number',\n      name: 'terminate_after'\n    },\n    stats: {\n      type: 'list'\n    },\n    suggestField: {\n      type: 'string',\n      name: 'suggest_field'\n    },\n    suggestMode: {\n      type: 'enum',\n      'default': 'missing',\n      options: [\n        'missing',\n        'popular',\n        'always'\n      ],\n      name: 'suggest_mode'\n    },\n    suggestSize: {\n      type: 'number',\n      name: 'suggest_size'\n    },\n    suggestText: {\n      type: 'text',\n      name: 'suggest_text'\n    },\n    timeout: {\n      type: 'time'\n    },\n    trackScores: {\n      type: 'boolean',\n      name: 'track_scores'\n    },\n    version: {\n      type: 'boolean'\n    },\n    requestCache: {\n      type: 'boolean',\n      name: 'request_cache'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchExists](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/search-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n */\napi.searchExists = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    minScore: {\n      type: 'number',\n      name: 'min_score'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search/exists',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search/exists',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/exists'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchShards](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/search-shards.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.searchShards = ca({\n  params: {\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search_shards',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search_shards',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search_shards'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.searchTemplate = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'duration'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search/template',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search/template',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/template'\n    }\n  ],\n  method: 'POST'\n});\n\napi.snapshot = namespace();\n\n/**\n * Perform a [snapshot.create](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype.create = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.createRepository](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.verify - Whether to verify the repository after creation\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n */\napi.snapshot.prototype.createRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    },\n    verify: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>',\n    req: {\n      repository: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.delete](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype['delete'] = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [snapshot.deleteRepository](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n */\napi.snapshot.prototype.deleteRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>',\n    req: {\n      repository: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [snapshot.get](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n */\napi.snapshot.prototype.get = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'list'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [snapshot.getRepository](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n */\napi.snapshot.prototype.getRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_snapshot/<%=repository%>',\n      req: {\n        repository: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot'\n    }\n  ]\n});\n\n/**\n * Perform a [snapshot.restore](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype.restore = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_restore',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.status](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n */\napi.snapshot.prototype.status = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_status',\n      req: {\n        repository: {\n          type: 'string'\n        },\n        snapshot: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot/<%=repository%>/_status',\n      req: {\n        repository: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot/_status'\n    }\n  ]\n});\n\n/**\n * Perform a [snapshot.verifyRepository](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n */\napi.snapshot.prototype.verifyRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/_verify',\n    req: {\n      repository: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [suggest](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/search-suggesters.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n */\napi.suggest = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_suggest',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_suggest'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [termvectors](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/docs-termvectors.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.dfs - Specifies if distributed frequencies should be returned instead shard frequencies.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random).\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value.\n * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if request is real-time as opposed to near-real-time (default: true).\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n * @param {<<api-param-type-string,`String`>>} params.id - The id of the document, when not specified a doc param should be supplied.\n */\napi.termvectors = ca({\n  params: {\n    termStatistics: {\n      type: 'boolean',\n      'default': false,\n      required: false,\n      name: 'term_statistics'\n    },\n    fieldStatistics: {\n      type: 'boolean',\n      'default': true,\n      required: false,\n      name: 'field_statistics'\n    },\n    dfs: {\n      type: 'boolean',\n      'default': false,\n      required: false\n    },\n    fields: {\n      type: 'list',\n      required: false\n    },\n    offsets: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    positions: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    payloads: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    preference: {\n      type: 'string',\n      required: false\n    },\n    routing: {\n      type: 'string',\n      required: false\n    },\n    parent: {\n      type: 'string',\n      required: false\n    },\n    realtime: {\n      type: 'boolean',\n      required: false\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_termvectors',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_termvectors',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [update](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/docs-update.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.lang - The script language (default: groovy)\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document. Is is only used for routing and when for the upsert request\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-number,`Number`>>} params.retryOnConflict - Specify how many times should the operation be retried when a conflict occurs (default: 0)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {anything} params.script - The URL-encoded script definition (instead of using request body)\n * @param {anything} params.scriptId - The id of a stored script\n * @param {<<api-param-type-boolean,`Boolean`>>} params.scriptedUpsert - True if the script referenced in script or script_id should be called to perform inserts - defaults to false\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.update = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    fields: {\n      type: 'list'\n    },\n    lang: {\n      type: 'string'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    retryOnConflict: {\n      type: 'number',\n      name: 'retry_on_conflict'\n    },\n    routing: {\n      type: 'string'\n    },\n    script: {},\n    scriptId: {\n      name: 'script_id'\n    },\n    scriptedUpsert: {\n      type: 'boolean',\n      name: 'scripted_upsert'\n    },\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'duration'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_update',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [create](http://www.elastic.co/guide/en/elasticsearch/reference/2.0/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.create = ca.proxy(api.index, {\n  transform: function (params) {\n    params.op_type = 'create';\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/apis/1_7.js":"var ca = require('../client_action').makeFactoryWithModifier(function (spec) {\n  return require('../utils').merge(spec, {\n    params: {\n      filterPath: {\n        type: 'list',\n        name: 'filter_path'\n      }\n    }\n  });\n});\nvar namespace = require('../client_action').namespaceFactory;\nvar api = module.exports = {};\n\napi._namespaces = ['cat', 'cluster', 'indices', 'nodes', 'snapshot'];\n\n/**\n * Perform a [bulk](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-bulk.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Explicitely set the replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.type - Default document type for items which don't provide one\n * @param {<<api-param-type-string,`String`>>} params.index - Default index for items which don't provide one\n */\napi.bulk = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    type: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_bulk'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\napi.cat = namespace();\n\n/**\n * Perform a [cat.aliases](http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.cat.prototype.aliases = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/aliases/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/aliases'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.allocation](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-allocation.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information\n */\napi.cat.prototype.allocation = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/allocation/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/allocation'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.count](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-count.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.count = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/count/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/count'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.fielddata](http://www.elastic.co/guide/en/elasticsearch/reference/1.7/cat-fielddata.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return the fielddata size\n */\napi.cat.prototype.fielddata = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    },\n    fields: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/fielddata/<%=fields%>',\n      req: {\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/fielddata'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.health](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-health.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.ts=true] - Set to false to disable timestamping\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.health = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    ts: {\n      type: 'boolean',\n      'default': true\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/health'\n  }\n});\n\n/**\n * Perform a [cat.help](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n */\napi.cat.prototype.help = ca({\n  params: {\n    help: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat'\n  }\n});\n\n/**\n * Perform a [cat.indices](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-indices.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.pri - Set to true to return stats only for primary shards\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.indices = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    pri: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/indices/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/indices'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.master](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-master.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.master = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/master'\n  }\n});\n\n/**\n * Perform a [cat.nodes](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-nodes.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.nodes = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/nodes'\n  }\n});\n\n/**\n * Perform a [cat.pendingTasks](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-pending-tasks.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.pendingTasks = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/pending_tasks'\n  }\n});\n\n/**\n * Perform a [cat.plugins](http://www.elastic.co/guide/en/elasticsearch/reference/1.7/cat-plugins.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.plugins = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/plugins'\n  }\n});\n\n/**\n * Perform a [cat.recovery](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-recovery.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.recovery = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/recovery/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/recovery'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.segments](http://www.elastic.co/guide/en/elasticsearch/reference/1.7/cat-segments.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.v=true] - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.segments = ca({\n  params: {\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': true\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/segments/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/segments'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.shards](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-shards.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.shards = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/shards/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/shards'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.threadPool](http://www.elastic.co/guide/en/elasticsearch/reference/1.7/cat-thread-pool.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fullId - Enables displaying the complete node ids\n */\napi.cat.prototype.threadPool = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    },\n    fullId: {\n      type: 'boolean',\n      'default': false,\n      name: 'full_id'\n    }\n  },\n  url: {\n    fmt: '/_cat/thread_pool'\n  }\n});\n\n/**\n * Perform a [clearScroll](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.scrollId - A comma-separated list of scroll IDs to clear\n */\napi.clearScroll = ca({\n  urls: [\n    {\n      fmt: '/_search/scroll/<%=scrollId%>',\n      req: {\n        scrollId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/scroll'\n    }\n  ],\n  paramAsBody: 'scrollId',\n  method: 'DELETE'\n});\n\napi.cluster = namespace();\n\n/**\n * Perform a [cluster.getSettings](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.getSettings = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/settings'\n  }\n});\n\n/**\n * Perform a [cluster.health](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-health.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Specify the level of detail for returned information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-number,`Number`>>} params.waitForActiveShards - Wait until the specified number of shards is active\n * @param {<<api-param-type-string,`String`>>} params.waitForNodes - Wait until the specified number of nodes is available\n * @param {<<api-param-type-number,`Number`>>} params.waitForRelocatingShards - Wait until the specified number of relocating shards is finished\n * @param {<<api-param-type-string,`String`>>} params.waitForStatus - Wait until cluster is in a specific state\n * @param {<<api-param-type-string,`String`>>} params.index - Limit the information returned to a specific index\n */\napi.cluster.prototype.health = ca({\n  params: {\n    level: {\n      type: 'enum',\n      'default': 'cluster',\n      options: [\n        'cluster',\n        'indices',\n        'shards'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    },\n    waitForActiveShards: {\n      type: 'number',\n      name: 'wait_for_active_shards'\n    },\n    waitForNodes: {\n      type: 'string',\n      name: 'wait_for_nodes'\n    },\n    waitForRelocatingShards: {\n      type: 'number',\n      name: 'wait_for_relocating_shards'\n    },\n    waitForStatus: {\n      type: 'enum',\n      'default': null,\n      options: [\n        'green',\n        'yellow',\n        'red'\n      ],\n      name: 'wait_for_status'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/health/<%=index%>',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/health'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.pendingTasks](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-pending.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.cluster.prototype.pendingTasks = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_cluster/pending_tasks'\n  }\n});\n\n/**\n * Perform a [cluster.putSettings](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.putSettings = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/settings'\n  },\n  method: 'PUT'\n});\n\n/**\n * Perform a [cluster.reroute](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-reroute.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - Simulate the operation only and return the resulting state\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return an explanation of why the commands can or cannot be executed\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics. Defaults to all but metadata\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.reroute = ca({\n  params: {\n    dryRun: {\n      type: 'boolean',\n      name: 'dry_run'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    metric: {\n      type: 'list',\n      options: [\n        '_all',\n        'blocks',\n        'metadata',\n        'nodes',\n        'routing_table',\n        'master_node',\n        'version'\n      ]\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/reroute'\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [cluster.state](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-state.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n */\napi.cluster.prototype.state = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/state/<%=metric%>/<%=index%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'blocks',\n            'metadata',\n            'nodes',\n            'routing_table',\n            'routing_nodes',\n            'master_node',\n            'version'\n          ]\n        },\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/state/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'blocks',\n            'metadata',\n            'nodes',\n            'routing_table',\n            'routing_nodes',\n            'master_node',\n            'version'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/state'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.stats](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.cluster.prototype.stats = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/stats/nodes/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/stats'\n    }\n  ]\n});\n\n/**\n * Perform a [count](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-count.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n */\napi.count = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    minScore: {\n      type: 'number',\n      name: 'min_score'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_count'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [countPercolate](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to count percolate the document into. Defaults to index.\n * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to count percolate document into. Defaults to type.\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being count percolated.\n * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n */\napi.countPercolate = ca({\n  params: {\n    routing: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    percolateIndex: {\n      type: 'string',\n      name: 'percolate_index'\n    },\n    percolateType: {\n      type: 'string',\n      name: 'percolate_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate/count',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_percolate/count',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [delete](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-delete.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Specific write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi['delete'] = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteByQuery](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-delete-by-query.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-string,`String`>>} params.consistency - Specific write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the operation\n */\napi.deleteByQuery = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteScript](http://www.elastic.co/guide/en/elasticsearch/reference/1.7/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.deleteScript = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.7/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.deleteTemplate = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [exists](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.exists = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [explain](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-explain.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer for the query string query\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The default field for query string query (default: _all)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.explain = ca({\n  params: {\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    fields: {\n      type: 'list'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_explain',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [fieldStats](http://www.elastic.co/guide/en/elasticsearch/reference/1.7/search-field-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for to get field statistics for (min value, max value, and more)\n * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Defines if field stats should be returned on a per index level or on a cluster wide level\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.fieldStats = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    level: {\n      type: 'enum',\n      'default': 'cluster',\n      options: [\n        'indices',\n        'cluster'\n      ]\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_field_stats',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_field_stats'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [get](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.get = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getScript](http://www.elastic.co/guide/en/elasticsearch/reference/1.7/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.getScript = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getSource](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types\n */\napi.getSource = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.7/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.getTemplate = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [index](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.index = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'time'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\napi.indices = namespace();\n\n/**\n * Perform a [indices.analyze](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-analyze.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The name of the analyzer to use\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.charFilters - A comma-separated list of character filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>} params.field - Use the analyzer configured for this field (instead of passing the analyzer name)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.filters - A comma-separated list of filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index to scope the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.preferLocal - With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)\n * @param {<<api-param-type-string,`String`>>} params.text - The text on which the analysis should be performed (when request body is not used)\n * @param {<<api-param-type-string,`String`>>} params.tokenizer - The name of the tokenizer to use for the analysis\n * @param {<<api-param-type-string,`String`>>} [params.format=detailed] - Format of the output\n */\napi.indices.prototype.analyze = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    charFilters: {\n      type: 'list',\n      name: 'char_filters'\n    },\n    field: {\n      type: 'string'\n    },\n    filters: {\n      type: 'list'\n    },\n    index: {\n      type: 'string'\n    },\n    preferLocal: {\n      type: 'boolean',\n      name: 'prefer_local'\n    },\n    text: {\n      type: 'string'\n    },\n    tokenizer: {\n      type: 'string'\n    },\n    format: {\n      type: 'enum',\n      'default': 'detailed',\n      options: [\n        'detailed',\n        'text'\n      ]\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_analyze',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_analyze'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.clearCache](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-clearcache.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fieldData - Clear field data\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fielddata - Clear field data\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to clear when using the `field_data` parameter (default: all)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filter - Clear filter caches\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filterCache - Clear filter caches\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filterKeys - A comma-separated list of keys to clear when using the `filter_cache` parameter (default: all)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.id - Clear ID caches for parent/child\n * @param {<<api-param-type-boolean,`Boolean`>>} params.idCache - Clear ID caches for parent/child\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index name to limit the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.recycler - Clear the recycler cache\n * @param {<<api-param-type-boolean,`Boolean`>>} params.queryCache - Clear query cache\n */\napi.indices.prototype.clearCache = ca({\n  params: {\n    fieldData: {\n      type: 'boolean',\n      name: 'field_data'\n    },\n    fielddata: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    filter: {\n      type: 'boolean'\n    },\n    filterCache: {\n      type: 'boolean',\n      name: 'filter_cache'\n    },\n    filterKeys: {\n      type: 'boolean',\n      name: 'filter_keys'\n    },\n    id: {\n      type: 'boolean'\n    },\n    idCache: {\n      type: 'boolean',\n      name: 'id_cache'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    index: {\n      type: 'list'\n    },\n    recycler: {\n      type: 'boolean'\n    },\n    queryCache: {\n      type: 'boolean',\n      name: 'query_cache'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_cache/clear',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cache/clear'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.close](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.close = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_close',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.create](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-create-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.create = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.delete](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-delete-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices\n */\napi.indices.prototype['delete'] = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteAlias](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.\n */\napi.indices.prototype.deleteAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_alias/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteMapping](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-delete-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to delete (supports wildcards); use `_all` to delete all document types in the specified indices.\n */\napi.indices.prototype.deleteMapping = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/_mapping',\n    req: {\n      index: {\n        type: 'list'\n      },\n      type: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.deleteTemplate = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteWarmer](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of warmer names to delete (supports wildcards); use `_all` to delete all warmers in the specified indices. You must specify a name either in the uri or in the parameters.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to delete warmers from (supports wildcards); use `_all` to perform the operation on all indices.\n */\napi.indices.prototype.deleteWarmer = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    name: {\n      type: 'list'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_warmer/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.exists](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to check\n */\napi.indices.prototype.exists = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsAlias](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.existsAlias = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': [\n        'open',\n        'closed'\n      ],\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_alias',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.existsTemplate = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsType](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-types-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` to check the types across all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to check\n */\napi.indices.prototype.existsType = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      type: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.flush](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-flush.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitIfOngoing - If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. The default is false and will cause an exception to be thrown on the shard level if another flush operation is already running.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n */\napi.indices.prototype.flush = ca({\n  params: {\n    force: {\n      type: 'boolean'\n    },\n    waitIfOngoing: {\n      type: 'boolean',\n      name: 'wait_if_ongoing'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_flush',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_flush'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.flushSynced](http://www.elastic.co/guide/en/elasticsearch/reference/1.7/indices-synced-flush.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n */\napi.indices.prototype.flushSynced = ca({\n  urls: [\n    {\n      fmt: '/<%=index%>/_flush/synced',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_flush/synced'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.get](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Ignore unavailable indexes (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.feature - A comma-separated list of features\n */\napi.indices.prototype.get = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=feature%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        feature: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getAlias](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.getAlias = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_alias',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getAliases](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to filter\n */\napi.indices.prototype.getAliases = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_aliases/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_aliases',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_aliases/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_aliases'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getFieldMapping](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-field-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether the default mapping values should be returned as well\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.field - A comma-separated list of fields\n */\napi.indices.prototype.getFieldMapping = ca({\n  params: {\n    includeDefaults: {\n      type: 'boolean',\n      name: 'include_defaults'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>/field/<%=field%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        field: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping/field/<%=field%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        field: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>/field/<%=field%>',\n      req: {\n        type: {\n          type: 'list'\n        },\n        field: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/field/<%=field%>',\n      req: {\n        field: {\n          type: 'list'\n        }\n      }\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getMapping](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n */\napi.indices.prototype.getMapping = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>',\n      req: {\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getSettings](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the settings that should be included\n */\napi.indices.prototype.getSettings = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': [\n        'open',\n        'closed'\n      ],\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.getTemplate = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_template/<%=name%>',\n      req: {\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_template'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getUpgrade](http://www.elastic.co/guide/en/elasticsearch/reference/1.7/indices-upgrade.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.getUpgrade = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_upgrade',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_upgrade'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getWarmer](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the warmer (supports wildcards); leave empty to get all warmers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n */\napi.indices.prototype.getWarmer = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.open](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.open = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'closed',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_open',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.optimize](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-optimize.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flush - Specify whether the index should be flushed after performing the operation (default: true)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.maxNumSegments - The number of segments the index should be merged into (default: dynamic)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyExpungeDeletes - Specify whether the operation should only expunge deleted documents\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForMerge - Specify whether the request should block until the merge process is finished (default: true)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Force a merge operation to run, even if there is a single segment in the index (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.optimize = ca({\n  params: {\n    flush: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    maxNumSegments: {\n      type: 'number',\n      name: 'max_num_segments'\n    },\n    onlyExpungeDeletes: {\n      type: 'boolean',\n      name: 'only_expunge_deletes'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    waitForMerge: {\n      type: 'boolean',\n      name: 'wait_for_merge'\n    },\n    force: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_optimize',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_optimize'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.putAlias](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the alias to be created or updated\n */\napi.indices.prototype.putAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_alias/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putMapping](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-put-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreConflicts - Specify whether to ignore conflicts while updating the mapping (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.\n * @param {<<api-param-type-string,`String`>>} params.type - The name of the document type\n */\napi.indices.prototype.putMapping = ca({\n  params: {\n    ignoreConflicts: {\n      type: 'boolean',\n      name: 'ignore_conflicts'\n    },\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>',\n      req: {\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putSettings](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.putSettings = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.order - The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.create - Whether the index template should only be added if new or can also replace an existing one\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.putTemplate = ca({\n  params: {\n    order: {\n      type: 'number'\n    },\n    create: {\n      type: 'boolean',\n      'default': false\n    },\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putWarmer](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed) in the search request to warm\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices in the search request to warm. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both, in the search request to warm.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the warmer\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types\n */\napi.indices.prototype.putWarmer = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer/<%=name%>',\n      req: {\n        name: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.recovery](http://www.elastic.co/guide/en/elasticsearch/reference/1.7/indices-recovery.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Whether to display detailed information about shard recovery\n * @param {<<api-param-type-boolean,`Boolean`>>} params.activeOnly - Display only those recoveries that are currently on-going\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.recovery = ca({\n  params: {\n    detailed: {\n      type: 'boolean',\n      'default': false\n    },\n    activeOnly: {\n      type: 'boolean',\n      'default': false,\n      name: 'active_only'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_recovery',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_recovery'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.refresh](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-refresh.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Force a refresh even if not required\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.refresh = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    force: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_refresh',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_refresh'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.segments](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-segments.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.segments = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_segments',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_segments'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.stats](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>} [params.level=indices] - Return stats aggregated at cluster, index or shard level\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned the specific metrics.\n */\napi.indices.prototype.stats = ca({\n  params: {\n    completionFields: {\n      type: 'list',\n      name: 'completion_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    fields: {\n      type: 'list'\n    },\n    groups: {\n      type: 'list'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    level: {\n      type: 'enum',\n      'default': 'indices',\n      options: [\n        'cluster',\n        'indices',\n        'shards'\n      ]\n    },\n    types: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_stats/<%=metric%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'filter_cache',\n            'flush',\n            'get',\n            'id_cache',\n            'indexing',\n            'merge',\n            'percolate',\n            'query_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_stats/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'filter_cache',\n            'flush',\n            'get',\n            'id_cache',\n            'indexing',\n            'merge',\n            'percolate',\n            'query_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_stats',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_stats'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.status](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-status.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.recovery - Return information about shard recovery\n * @param {<<api-param-type-boolean,`Boolean`>>} params.snapshot - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.status = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    recovery: {\n      type: 'boolean'\n    },\n    snapshot: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_status',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_status'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.updateAliases](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Request timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.indices.prototype.updateAliases = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_aliases'\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.upgrade](http://www.elastic.co/guide/en/elasticsearch/reference/1.7/indices-upgrade.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Specify whether the request should block until the all segments are upgraded (default: true)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyAncientSegments - If true, only ancient (an older Lucene major release) segments will be upgraded\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.upgrade = ca({\n  params: {\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      name: 'wait_for_completion'\n    },\n    onlyAncientSegments: {\n      type: 'boolean',\n      name: 'only_ancient_segments'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_upgrade',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_upgrade'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.validateQuery](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-validate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return detailed information about the error\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-boolean,`Boolean`>>} params.rewrite - Provide a more detailed explanation showing the actual Lucene query that will be executed.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n */\napi.indices.prototype.validateQuery = ca({\n  params: {\n    explain: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    q: {\n      type: 'string'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    rewrite: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_validate/query'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [info](http://www.elastic.co/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.info = ca({\n  url: {\n    fmt: '/'\n  }\n});\n\n/**\n * Perform a [mget](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.mget = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mget'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mlt](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-more-like-this.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.boostTerms - The boost factor\n * @param {<<api-param-type-number,`Number`>>} params.maxDocFreq - The word occurrence frequency as count: words with higher occurrence in the corpus will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.maxQueryTerms - The maximum query terms to be included in the generated query\n * @param {<<api-param-type-number,`Number`>>} params.maxWordLength - The minimum length of the word: longer words will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.minDocFreq - The word occurrence frequency as count: words with lower occurrence in the corpus will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.minTermFreq - The term frequency as percent: terms with lower occurence in the source document will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.minWordLength - The minimum length of the word: shorter words will be ignored\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.mltFields - Specific fields to perform the query against\n * @param {<<api-param-type-number,`Number`>>} params.percentTermsToMatch - How many terms have to match in order to consider the document a match (default: 0.3)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-number,`Number`>>} params.searchFrom - The offset from which to return results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.searchIndices - A comma-separated list of indices to perform the query against (default: the index containing the document)\n * @param {<<api-param-type-string,`String`>>} params.searchScroll - A scroll search request definition\n * @param {<<api-param-type-number,`Number`>>} params.searchSize - The number of documents to return (default: 10)\n * @param {<<api-param-type-string,`String`>>} params.searchSource - A specific search request definition (instead of using the request body)\n * @param {<<api-param-type-string,`String`>>} params.searchType - Specific search type (eg. `dfs_then_fetch`, `count`, etc)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.searchTypes - A comma-separated list of types to perform the query against (default: the same type as the document)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stopWords - A list of stop words to be ignored\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.mlt = ca({\n  params: {\n    boostTerms: {\n      type: 'number',\n      name: 'boost_terms'\n    },\n    maxDocFreq: {\n      type: 'number',\n      name: 'max_doc_freq'\n    },\n    maxQueryTerms: {\n      type: 'number',\n      name: 'max_query_terms'\n    },\n    maxWordLength: {\n      type: 'number',\n      name: 'max_word_length'\n    },\n    minDocFreq: {\n      type: 'number',\n      name: 'min_doc_freq'\n    },\n    minTermFreq: {\n      type: 'number',\n      name: 'min_term_freq'\n    },\n    minWordLength: {\n      type: 'number',\n      name: 'min_word_length'\n    },\n    mltFields: {\n      type: 'list',\n      name: 'mlt_fields'\n    },\n    percentTermsToMatch: {\n      type: 'number',\n      name: 'percent_terms_to_match'\n    },\n    routing: {\n      type: 'string'\n    },\n    searchFrom: {\n      type: 'number',\n      name: 'search_from'\n    },\n    searchIndices: {\n      type: 'list',\n      name: 'search_indices'\n    },\n    searchScroll: {\n      type: 'string',\n      name: 'search_scroll'\n    },\n    searchSize: {\n      type: 'number',\n      name: 'search_size'\n    },\n    searchSource: {\n      type: 'string',\n      name: 'search_source'\n    },\n    searchType: {\n      type: 'string',\n      name: 'search_type'\n    },\n    searchTypes: {\n      type: 'list',\n      name: 'search_types'\n    },\n    stopWords: {\n      type: 'list',\n      name: 'stop_words'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_mlt',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [mpercolate](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated to use as default\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated to use as default.\n */\napi.mpercolate = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mpercolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mpercolate',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mpercolate'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [msearch](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-multi-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n */\napi.msearch = ca({\n  params: {\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_msearch'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mtermvectors](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-termvectors.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.ids - A comma-separated list of documents ids. You must define ids as parameter or set \"ids\" or \"docs\" in the request body\n * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if requests are real-time as opposed to near-real-time (default: true).\n * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n */\napi.mtermvectors = ca({\n  params: {\n    ids: {\n      type: 'list',\n      required: false\n    },\n    termStatistics: {\n      type: 'boolean',\n      'default': false,\n      required: false,\n      name: 'term_statistics'\n    },\n    fieldStatistics: {\n      type: 'boolean',\n      'default': true,\n      required: false,\n      name: 'field_statistics'\n    },\n    fields: {\n      type: 'list',\n      required: false\n    },\n    offsets: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    positions: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    payloads: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    preference: {\n      type: 'string',\n      required: false\n    },\n    routing: {\n      type: 'string',\n      required: false\n    },\n    parent: {\n      type: 'string',\n      required: false\n    },\n    realtime: {\n      type: 'boolean',\n      required: false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mtermvectors',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mtermvectors',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mtermvectors'\n    }\n  ],\n  method: 'POST'\n});\n\napi.nodes = namespace();\n\n/**\n * Perform a [nodes.hotThreads](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-hot-threads.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.interval - The interval for the second sampling of threads\n * @param {<<api-param-type-number,`Number`>>} params.snapshots - Number of samples of thread stacktrace (default: 10)\n * @param {<<api-param-type-number,`Number`>>} params.threads - Specify the number of threads to provide information for (default: 3)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreIdleThreads - Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue (default: true)\n * @param {<<api-param-type-string,`String`>>} params.type - The type to sample (default: cpu)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.nodes.prototype.hotThreads = ca({\n  params: {\n    interval: {\n      type: 'time'\n    },\n    snapshots: {\n      type: 'number'\n    },\n    threads: {\n      type: 'number'\n    },\n    ignoreIdleThreads: {\n      type: 'boolean',\n      name: 'ignore_idle_threads'\n    },\n    type: {\n      type: 'enum',\n      options: [\n        'cpu',\n        'wait',\n        'block'\n      ]\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/hotthreads',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/hotthreads'\n    }\n  ]\n});\n\n/**\n * Perform a [nodes.info](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-info.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - A comma-separated list of metrics you wish returned. Leave empty to return all.\n */\napi.nodes.prototype.info = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/<%=metric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            'settings',\n            'os',\n            'process',\n            'jvm',\n            'thread_pool',\n            'network',\n            'transport',\n            'http',\n            'plugins'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            'settings',\n            'os',\n            'process',\n            'jvm',\n            'thread_pool',\n            'network',\n            'transport',\n            'http',\n            'plugins'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes'\n    }\n  ]\n});\n\n/**\n * Perform a [nodes.shutdown](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-shutdown.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.delay - Set the delay for the operation (default: 1s)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.exit - Exit the JVM as well (default: true)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to perform the operation on; use `_local` to perform the operation on the node you're connected to, leave empty to perform the operation on all nodes\n */\napi.nodes.prototype.shutdown = ca({\n  params: {\n    delay: {\n      type: 'time'\n    },\n    exit: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/nodes/<%=nodeId%>/_shutdown',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_shutdown'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [nodes.stats](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>} [params.level=node] - Return indices stats aggregated at node, index or shard level\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indexMetric - Limit the information returned for `indices` metric to the specific index metrics. Isn't used if `indices` (or `all`) metric isn't specified.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.nodes.prototype.stats = ca({\n  params: {\n    completionFields: {\n      type: 'list',\n      name: 'completion_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    fields: {\n      type: 'list'\n    },\n    groups: {\n      type: 'boolean'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    level: {\n      type: 'enum',\n      'default': 'node',\n      options: [\n        'node',\n        'indices',\n        'shards'\n      ]\n    },\n    types: {\n      type: 'list'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>/<%=indexMetric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'network',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        },\n        indexMetric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'filter_cache',\n            'flush',\n            'get',\n            'id_cache',\n            'indexing',\n            'merge',\n            'percolate',\n            'query_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'network',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats/<%=metric%>/<%=indexMetric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'network',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        },\n        indexMetric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'filter_cache',\n            'flush',\n            'get',\n            'id_cache',\n            'indexing',\n            'merge',\n            'percolate',\n            'query_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'network',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats'\n    }\n  ]\n});\n\n/**\n * Perform a [percolate](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.percolateFormat - Return an array of matching query IDs instead of objects\n * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to percolate the document into. Defaults to index.\n * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to percolate document into. Defaults to type.\n * @param {<<api-param-type-string,`String`>>} params.percolateRouting - The routing value to use when percolating the existing document.\n * @param {<<api-param-type-string,`String`>>} params.percolatePreference - Which shard to prefer when executing the percolate request.\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being percolated.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated.\n * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n */\napi.percolate = ca({\n  params: {\n    routing: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    percolateFormat: {\n      type: 'enum',\n      options: [\n        'ids'\n      ],\n      name: 'percolate_format'\n    },\n    percolateIndex: {\n      type: 'string',\n      name: 'percolate_index'\n    },\n    percolateType: {\n      type: 'string',\n      name: 'percolate_type'\n    },\n    percolateRouting: {\n      type: 'string',\n      name: 'percolate_routing'\n    },\n    percolatePreference: {\n      type: 'string',\n      name: 'percolate_preference'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_percolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [ping](http://www.elastic.co/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.ping = ca({\n  url: {\n    fmt: '/'\n  },\n  requestTimeout: 3000,\n  method: 'HEAD'\n});\n\n/**\n * Perform a [putScript](http://www.elastic.co/guide/en/elasticsearch/reference/1.7/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.putScript = ca({\n  params: {\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [putTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.7/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.putTemplate = ca({\n  params: {\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [scroll](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.scrollId - The scroll ID\n */\napi.scroll = ca({\n  params: {\n    scroll: {\n      type: 'time'\n    },\n    scrollId: {\n      type: 'string',\n      name: 'scroll_id'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_search/scroll/<%=scrollId%>',\n      req: {\n        scrollId: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_search/scroll'\n    }\n  ],\n  paramAsBody: 'scrollId',\n  method: 'POST'\n});\n\n/**\n * Perform a [search](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields to return as the field data representation of a field for each hit\n * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n * @param {<<api-param-type-string,`String`>>} params.suggestField - Specify which field to use for suggestions\n * @param {<<api-param-type-string,`String`>>} [params.suggestMode=missing] - Specify suggest mode\n * @param {<<api-param-type-number,`Number`>>} params.suggestSize - How many suggestions to return in response\n * @param {<<api-param-type-string,`String`>>} params.suggestText - The source text for which the suggestions should be returned\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.trackScores - Whether to calculate and return scores even if they are not used for sorting\n * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n * @param {<<api-param-type-boolean,`Boolean`>>} params.queryCache - Specify if query cache should be used for this request or not, defaults to index level setting\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.search = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    from: {\n      type: 'number'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'time'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    },\n    size: {\n      type: 'number'\n    },\n    sort: {\n      type: 'list'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    stats: {\n      type: 'list'\n    },\n    suggestField: {\n      type: 'string',\n      name: 'suggest_field'\n    },\n    suggestMode: {\n      type: 'enum',\n      'default': 'missing',\n      options: [\n        'missing',\n        'popular',\n        'always'\n      ],\n      name: 'suggest_mode'\n    },\n    suggestSize: {\n      type: 'number',\n      name: 'suggest_size'\n    },\n    suggestText: {\n      type: 'string',\n      name: 'suggest_text'\n    },\n    timeout: {\n      type: 'time'\n    },\n    trackScores: {\n      type: 'boolean',\n      name: 'track_scores'\n    },\n    version: {\n      type: 'boolean'\n    },\n    queryCache: {\n      type: 'boolean',\n      name: 'query_cache'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchExists](http://www.elastic.co/guide/en/elasticsearch/reference/1.7/search-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n */\napi.searchExists = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    minScore: {\n      type: 'number',\n      name: 'min_score'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search/exists',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search/exists',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/exists'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchShards](http://www.elastic.co/guide/en/elasticsearch/reference/1.7/search-shards.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.searchShards = ca({\n  params: {\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search_shards',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search_shards',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_search_shards'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.searchTemplate = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'time'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search/template',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search/template',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/template'\n    }\n  ],\n  method: 'POST'\n});\n\napi.snapshot = namespace();\n\n/**\n * Perform a [snapshot.create](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype.create = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.createRepository](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.verify - Whether to verify the repository after creation\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n */\napi.snapshot.prototype.createRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    },\n    verify: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>',\n    req: {\n      repository: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.delete](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype['delete'] = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [snapshot.deleteRepository](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n */\napi.snapshot.prototype.deleteRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>',\n    req: {\n      repository: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [snapshot.get](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n */\napi.snapshot.prototype.get = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'list'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [snapshot.getRepository](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n */\napi.snapshot.prototype.getRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_snapshot/<%=repository%>',\n      req: {\n        repository: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot'\n    }\n  ]\n});\n\n/**\n * Perform a [snapshot.restore](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype.restore = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_restore',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.status](http://www.elastic.co/guide/en/elasticsearch/reference/1.7/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n */\napi.snapshot.prototype.status = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_status',\n      req: {\n        repository: {\n          type: 'string'\n        },\n        snapshot: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot/<%=repository%>/_status',\n      req: {\n        repository: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot/_status'\n    }\n  ]\n});\n\n/**\n * Perform a [snapshot.verifyRepository](http://www.elastic.co/guide/en/elasticsearch/reference/1.7/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n */\napi.snapshot.prototype.verifyRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/_verify',\n    req: {\n      repository: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [suggest](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-suggesters.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n */\napi.suggest = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_suggest',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_suggest'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [termvector](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-termvectors.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random).\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value.\n * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if request is real-time as opposed to near-real-time (default: true).\n * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n * @param {<<api-param-type-string,`String`>>} params.id - The id of the document.\n */\napi.termvector = ca({\n  params: {\n    termStatistics: {\n      type: 'boolean',\n      'default': false,\n      required: false,\n      name: 'term_statistics'\n    },\n    fieldStatistics: {\n      type: 'boolean',\n      'default': true,\n      required: false,\n      name: 'field_statistics'\n    },\n    fields: {\n      type: 'list',\n      required: false\n    },\n    offsets: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    positions: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    payloads: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    preference: {\n      type: 'string',\n      required: false\n    },\n    routing: {\n      type: 'string',\n      required: false\n    },\n    parent: {\n      type: 'string',\n      required: false\n    },\n    realtime: {\n      type: 'boolean',\n      required: false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_termvector',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_termvector',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [update](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-update.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.lang - The script language (default: groovy)\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document. Is is only used for routing and when for the upsert request\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-number,`Number`>>} params.retryOnConflict - Specify how many times should the operation be retried when a conflict occurs (default: 0)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.script - The URL-encoded script definition (instead of using request body)\n * @param {<<api-param-type-string,`String`>>} params.scriptId - The id of a stored script\n * @param {<<api-param-type-boolean,`Boolean`>>} params.scriptedUpsert - True if the script referenced in script or script_id should be called to perform inserts - defaults to false\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.update = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    fields: {\n      type: 'list'\n    },\n    lang: {\n      type: 'string'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    retryOnConflict: {\n      type: 'number',\n      name: 'retry_on_conflict'\n    },\n    routing: {\n      type: 'string'\n    },\n    script: {\n      type: 'string'\n    },\n    scriptId: {\n      type: 'string',\n      name: 'script_id'\n    },\n    scriptedUpsert: {\n      type: 'boolean',\n      name: 'scripted_upsert'\n    },\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'time'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_update',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [create](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.create = ca.proxy(api.index, {\n  transform: function (params) {\n    params.op_type = 'create';\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/apis/1_6.js":"var ca = require('../client_action').makeFactoryWithModifier(function (spec) {\n  return require('../utils').merge(spec, {\n    params: {\n      filterPath: {\n        type: 'list',\n        name: 'filter_path'\n      }\n    }\n  });\n});\nvar namespace = require('../client_action').namespaceFactory;\nvar api = module.exports = {};\n\napi._namespaces = ['cat', 'cluster', 'indices', 'nodes', 'snapshot'];\n\n/**\n * Perform a [bulk](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-bulk.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Explicitely set the replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.type - Default document type for items which don't provide one\n * @param {<<api-param-type-string,`String`>>} params.index - Default index for items which don't provide one\n */\napi.bulk = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    type: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_bulk'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\napi.cat = namespace();\n\n/**\n * Perform a [cat.aliases](http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.cat.prototype.aliases = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/aliases/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/aliases'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.allocation](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-allocation.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information\n */\napi.cat.prototype.allocation = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/allocation/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/allocation'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.count](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-count.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.count = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/count/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/count'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.fielddata](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-fielddata.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return the fielddata size\n */\napi.cat.prototype.fielddata = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    },\n    fields: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/fielddata/<%=fields%>',\n      req: {\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/fielddata'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.health](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-health.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.ts=true] - Set to false to disable timestamping\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.health = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    ts: {\n      type: 'boolean',\n      'default': true\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/health'\n  }\n});\n\n/**\n * Perform a [cat.help](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n */\napi.cat.prototype.help = ca({\n  params: {\n    help: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat'\n  }\n});\n\n/**\n * Perform a [cat.indices](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-indices.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.pri - Set to true to return stats only for primary shards\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.indices = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    pri: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/indices/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/indices'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.master](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-master.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.master = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/master'\n  }\n});\n\n/**\n * Perform a [cat.nodes](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-nodes.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.nodes = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/nodes'\n  }\n});\n\n/**\n * Perform a [cat.pendingTasks](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-pending-tasks.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.pendingTasks = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/pending_tasks'\n  }\n});\n\n/**\n * Perform a [cat.plugins](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-plugins.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.plugins = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/plugins'\n  }\n});\n\n/**\n * Perform a [cat.recovery](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-recovery.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.recovery = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/recovery/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/recovery'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.segments](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-segments.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.v=true] - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.segments = ca({\n  params: {\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': true\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/segments/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/segments'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.shards](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-shards.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.shards = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/shards/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/shards'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.threadPool](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cat-thread-pool.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fullId - Enables displaying the complete node ids\n */\napi.cat.prototype.threadPool = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    },\n    fullId: {\n      type: 'boolean',\n      'default': false,\n      name: 'full_id'\n    }\n  },\n  url: {\n    fmt: '/_cat/thread_pool'\n  }\n});\n\n/**\n * Perform a [clearScroll](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.scrollId - A comma-separated list of scroll IDs to clear\n */\napi.clearScroll = ca({\n  urls: [\n    {\n      fmt: '/_search/scroll/<%=scrollId%>',\n      req: {\n        scrollId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/scroll'\n    }\n  ],\n  paramAsBody: 'scrollId',\n  method: 'DELETE'\n});\n\napi.cluster = namespace();\n\n/**\n * Perform a [cluster.getSettings](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.getSettings = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/settings'\n  }\n});\n\n/**\n * Perform a [cluster.health](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-health.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Specify the level of detail for returned information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-number,`Number`>>} params.waitForActiveShards - Wait until the specified number of shards is active\n * @param {<<api-param-type-string,`String`>>} params.waitForNodes - Wait until the specified number of nodes is available\n * @param {<<api-param-type-number,`Number`>>} params.waitForRelocatingShards - Wait until the specified number of relocating shards is finished\n * @param {<<api-param-type-string,`String`>>} params.waitForStatus - Wait until cluster is in a specific state\n * @param {<<api-param-type-string,`String`>>} params.index - Limit the information returned to a specific index\n */\napi.cluster.prototype.health = ca({\n  params: {\n    level: {\n      type: 'enum',\n      'default': 'cluster',\n      options: [\n        'cluster',\n        'indices',\n        'shards'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    },\n    waitForActiveShards: {\n      type: 'number',\n      name: 'wait_for_active_shards'\n    },\n    waitForNodes: {\n      type: 'string',\n      name: 'wait_for_nodes'\n    },\n    waitForRelocatingShards: {\n      type: 'number',\n      name: 'wait_for_relocating_shards'\n    },\n    waitForStatus: {\n      type: 'enum',\n      'default': null,\n      options: [\n        'green',\n        'yellow',\n        'red'\n      ],\n      name: 'wait_for_status'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/health/<%=index%>',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/health'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.pendingTasks](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-pending.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.cluster.prototype.pendingTasks = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_cluster/pending_tasks'\n  }\n});\n\n/**\n * Perform a [cluster.putSettings](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.putSettings = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/settings'\n  },\n  method: 'PUT'\n});\n\n/**\n * Perform a [cluster.reroute](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-reroute.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - Simulate the operation only and return the resulting state\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return an explanation of why the commands can or cannot be executed\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics. Defaults to all but metadata\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.reroute = ca({\n  params: {\n    dryRun: {\n      type: 'boolean',\n      name: 'dry_run'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    metric: {\n      type: 'list',\n      options: [\n        '_all',\n        'blocks',\n        'metadata',\n        'nodes',\n        'routing_table',\n        'master_node',\n        'version'\n      ]\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/reroute'\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [cluster.state](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-state.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n */\napi.cluster.prototype.state = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/state/<%=metric%>/<%=index%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'blocks',\n            'metadata',\n            'nodes',\n            'routing_table',\n            'routing_nodes',\n            'master_node',\n            'version'\n          ]\n        },\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/state/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'blocks',\n            'metadata',\n            'nodes',\n            'routing_table',\n            'routing_nodes',\n            'master_node',\n            'version'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/state'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.stats](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.cluster.prototype.stats = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/stats/nodes/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/stats'\n    }\n  ]\n});\n\n/**\n * Perform a [count](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-count.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n */\napi.count = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    minScore: {\n      type: 'number',\n      name: 'min_score'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_count'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [countPercolate](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to count percolate the document into. Defaults to index.\n * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to count percolate document into. Defaults to type.\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being count percolated.\n * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n */\napi.countPercolate = ca({\n  params: {\n    routing: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    percolateIndex: {\n      type: 'string',\n      name: 'percolate_index'\n    },\n    percolateType: {\n      type: 'string',\n      name: 'percolate_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate/count',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_percolate/count',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [delete](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-delete.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Specific write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi['delete'] = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteByQuery](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-delete-by-query.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-string,`String`>>} params.consistency - Specific write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the operation\n */\napi.deleteByQuery = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteScript](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.deleteScript = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.deleteTemplate = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [exists](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.exists = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [explain](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-explain.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer for the query string query\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The default field for query string query (default: _all)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.explain = ca({\n  params: {\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    fields: {\n      type: 'list'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_explain',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [fieldStats](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-field-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for to get field statistics for (min value, max value, and more)\n * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Defines if field stats should be returned on a per index level or on a cluster wide level\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.fieldStats = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    level: {\n      type: 'enum',\n      'default': 'cluster',\n      options: [\n        'indices',\n        'cluster'\n      ]\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_field_stats',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_field_stats'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [get](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.get = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getScript](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.getScript = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getSource](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types\n */\napi.getSource = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.getTemplate = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [index](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.index = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'duration'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\napi.indices = namespace();\n\n/**\n * Perform a [indices.analyze](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-analyze.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The name of the analyzer to use\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.charFilters - A comma-separated list of character filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>} params.field - Use the analyzer configured for this field (instead of passing the analyzer name)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.filters - A comma-separated list of filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index to scope the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.preferLocal - With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)\n * @param {<<api-param-type-string,`String`>>} params.text - The text on which the analysis should be performed (when request body is not used)\n * @param {<<api-param-type-string,`String`>>} params.tokenizer - The name of the tokenizer to use for the analysis\n * @param {<<api-param-type-string,`String`>>} [params.format=detailed] - Format of the output\n */\napi.indices.prototype.analyze = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    charFilters: {\n      type: 'list',\n      name: 'char_filters'\n    },\n    field: {\n      type: 'string'\n    },\n    filters: {\n      type: 'list'\n    },\n    index: {\n      type: 'string'\n    },\n    preferLocal: {\n      type: 'boolean',\n      name: 'prefer_local'\n    },\n    text: {\n      type: 'string'\n    },\n    tokenizer: {\n      type: 'string'\n    },\n    format: {\n      type: 'enum',\n      'default': 'detailed',\n      options: [\n        'detailed',\n        'text'\n      ]\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_analyze',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_analyze'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.clearCache](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-clearcache.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fieldData - Clear field data\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fielddata - Clear field data\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to clear when using the `field_data` parameter (default: all)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filter - Clear filter caches\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filterCache - Clear filter caches\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filterKeys - A comma-separated list of keys to clear when using the `filter_cache` parameter (default: all)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.id - Clear ID caches for parent/child\n * @param {<<api-param-type-boolean,`Boolean`>>} params.idCache - Clear ID caches for parent/child\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index name to limit the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.recycler - Clear the recycler cache\n * @param {<<api-param-type-boolean,`Boolean`>>} params.queryCache - Clear query cache\n */\napi.indices.prototype.clearCache = ca({\n  params: {\n    fieldData: {\n      type: 'boolean',\n      name: 'field_data'\n    },\n    fielddata: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    filter: {\n      type: 'boolean'\n    },\n    filterCache: {\n      type: 'boolean',\n      name: 'filter_cache'\n    },\n    filterKeys: {\n      type: 'boolean',\n      name: 'filter_keys'\n    },\n    id: {\n      type: 'boolean'\n    },\n    idCache: {\n      type: 'boolean',\n      name: 'id_cache'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    index: {\n      type: 'list'\n    },\n    recycler: {\n      type: 'boolean'\n    },\n    queryCache: {\n      type: 'boolean',\n      name: 'query_cache'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_cache/clear',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cache/clear'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.close](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.close = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_close',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.create](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-create-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.create = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.delete](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-delete-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices\n */\napi.indices.prototype['delete'] = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteAlias](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.\n */\napi.indices.prototype.deleteAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_alias/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteMapping](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-delete-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to delete (supports wildcards); use `_all` to delete all document types in the specified indices.\n */\napi.indices.prototype.deleteMapping = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/_mapping',\n    req: {\n      index: {\n        type: 'list'\n      },\n      type: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.deleteTemplate = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteWarmer](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of warmer names to delete (supports wildcards); use `_all` to delete all warmers in the specified indices. You must specify a name either in the uri or in the parameters.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to delete warmers from (supports wildcards); use `_all` to perform the operation on all indices.\n */\napi.indices.prototype.deleteWarmer = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    name: {\n      type: 'list'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_warmer/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.exists](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to check\n */\napi.indices.prototype.exists = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsAlias](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.existsAlias = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': [\n        'open',\n        'closed'\n      ],\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_alias',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.existsTemplate = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsType](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-types-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` to check the types across all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to check\n */\napi.indices.prototype.existsType = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      type: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.flush](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-flush.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitIfOngoing - If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. The default is false and will cause an exception to be thrown on the shard level if another flush operation is already running.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n */\napi.indices.prototype.flush = ca({\n  params: {\n    force: {\n      type: 'boolean'\n    },\n    waitIfOngoing: {\n      type: 'boolean',\n      name: 'wait_if_ongoing'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_flush',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_flush'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.flushSynced](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-synced-flush.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n */\napi.indices.prototype.flushSynced = ca({\n  urls: [\n    {\n      fmt: '/<%=index%>/_flush/synced',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_flush/synced'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.get](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Ignore unavailable indexes (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.feature - A comma-separated list of features\n */\napi.indices.prototype.get = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=feature%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        feature: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getAlias](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.getAlias = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_alias',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getAliases](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to filter\n */\napi.indices.prototype.getAliases = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_aliases/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_aliases',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_aliases/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_aliases'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getFieldMapping](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-field-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether the default mapping values should be returned as well\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.field - A comma-separated list of fields\n */\napi.indices.prototype.getFieldMapping = ca({\n  params: {\n    includeDefaults: {\n      type: 'boolean',\n      name: 'include_defaults'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>/field/<%=field%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        field: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping/field/<%=field%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        field: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>/field/<%=field%>',\n      req: {\n        type: {\n          type: 'list'\n        },\n        field: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/field/<%=field%>',\n      req: {\n        field: {\n          type: 'list'\n        }\n      }\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getMapping](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n */\napi.indices.prototype.getMapping = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>',\n      req: {\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getSettings](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-get-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the settings that should be included\n */\napi.indices.prototype.getSettings = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': [\n        'open',\n        'closed'\n      ],\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.getTemplate = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_template/<%=name%>',\n      req: {\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_template'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getUpgrade](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-upgrade.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.getUpgrade = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_upgrade',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_upgrade'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getWarmer](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the warmer (supports wildcards); leave empty to get all warmers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n */\napi.indices.prototype.getWarmer = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.open](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.open = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'closed',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_open',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.optimize](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-optimize.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flush - Specify whether the index should be flushed after performing the operation (default: true)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.maxNumSegments - The number of segments the index should be merged into (default: dynamic)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyExpungeDeletes - Specify whether the operation should only expunge deleted documents\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForMerge - Specify whether the request should block until the merge process is finished (default: true)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Force a merge operation to run, even if there is a single segment in the index (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.optimize = ca({\n  params: {\n    flush: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    maxNumSegments: {\n      type: 'number',\n      name: 'max_num_segments'\n    },\n    onlyExpungeDeletes: {\n      type: 'boolean',\n      name: 'only_expunge_deletes'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    waitForMerge: {\n      type: 'boolean',\n      name: 'wait_for_merge'\n    },\n    force: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_optimize',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_optimize'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.putAlias](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the alias to be created or updated\n */\napi.indices.prototype.putAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_alias/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putMapping](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-put-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreConflicts - Specify whether to ignore conflicts while updating the mapping (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.\n * @param {<<api-param-type-string,`String`>>} params.type - The name of the document type\n */\napi.indices.prototype.putMapping = ca({\n  params: {\n    ignoreConflicts: {\n      type: 'boolean',\n      name: 'ignore_conflicts'\n    },\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>',\n      req: {\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putSettings](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.putSettings = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.order - The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.create - Whether the index template should only be added if new or can also replace an existing one\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.putTemplate = ca({\n  params: {\n    order: {\n      type: 'number'\n    },\n    create: {\n      type: 'boolean',\n      'default': false\n    },\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putWarmer](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed) in the search request to warm\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices in the search request to warm. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both, in the search request to warm.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the warmer\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types\n */\napi.indices.prototype.putWarmer = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer/<%=name%>',\n      req: {\n        name: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.recovery](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-recovery.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Whether to display detailed information about shard recovery\n * @param {<<api-param-type-boolean,`Boolean`>>} params.activeOnly - Display only those recoveries that are currently on-going\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.recovery = ca({\n  params: {\n    detailed: {\n      type: 'boolean',\n      'default': false\n    },\n    activeOnly: {\n      type: 'boolean',\n      'default': false,\n      name: 'active_only'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_recovery',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_recovery'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.refresh](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-refresh.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Force a refresh even if not required\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.refresh = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    force: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_refresh',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_refresh'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.segments](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-segments.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.segments = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_segments',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_segments'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.stats](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>} [params.level=indices] - Return stats aggregated at cluster, index or shard level\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned the specific metrics.\n */\napi.indices.prototype.stats = ca({\n  params: {\n    completionFields: {\n      type: 'list',\n      name: 'completion_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    fields: {\n      type: 'list'\n    },\n    groups: {\n      type: 'list'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    level: {\n      type: 'enum',\n      'default': 'indices',\n      options: [\n        'cluster',\n        'indices',\n        'shards'\n      ]\n    },\n    types: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_stats/<%=metric%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'filter_cache',\n            'flush',\n            'get',\n            'id_cache',\n            'indexing',\n            'merge',\n            'percolate',\n            'query_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_stats/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'filter_cache',\n            'flush',\n            'get',\n            'id_cache',\n            'indexing',\n            'merge',\n            'percolate',\n            'query_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_stats',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_stats'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.status](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-status.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.recovery - Return information about shard recovery\n * @param {<<api-param-type-boolean,`Boolean`>>} params.snapshot - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.status = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    recovery: {\n      type: 'boolean'\n    },\n    snapshot: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_status',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_status'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.updateAliases](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Request timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.indices.prototype.updateAliases = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_aliases'\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.upgrade](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/indices-upgrade.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Specify whether the request should block until the all segments are upgraded (default: true)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyAncientSegments - If true, only ancient (an older Lucene major release) segments will be upgraded\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.upgrade = ca({\n  params: {\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      name: 'wait_for_completion'\n    },\n    onlyAncientSegments: {\n      type: 'boolean',\n      name: 'only_ancient_segments'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_upgrade',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_upgrade'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.validateQuery](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-validate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return detailed information about the error\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-boolean,`Boolean`>>} params.rewrite - Provide a more detailed explanation showing the actual Lucene query that will be executed.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n */\napi.indices.prototype.validateQuery = ca({\n  params: {\n    explain: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    q: {\n      type: 'string'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    rewrite: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_validate/query'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [info](http://www.elastic.co/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.info = ca({\n  url: {\n    fmt: '/'\n  }\n});\n\n/**\n * Perform a [mget](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.mget = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mget'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mlt](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-more-like-this.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.boostTerms - The boost factor\n * @param {<<api-param-type-number,`Number`>>} params.maxDocFreq - The word occurrence frequency as count: words with higher occurrence in the corpus will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.maxQueryTerms - The maximum query terms to be included in the generated query\n * @param {<<api-param-type-number,`Number`>>} params.maxWordLength - The minimum length of the word: longer words will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.minDocFreq - The word occurrence frequency as count: words with lower occurrence in the corpus will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.minTermFreq - The term frequency as percent: terms with lower occurence in the source document will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.minWordLength - The minimum length of the word: shorter words will be ignored\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.mltFields - Specific fields to perform the query against\n * @param {<<api-param-type-number,`Number`>>} params.percentTermsToMatch - How many terms have to match in order to consider the document a match (default: 0.3)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-number,`Number`>>} params.searchFrom - The offset from which to return results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.searchIndices - A comma-separated list of indices to perform the query against (default: the index containing the document)\n * @param {<<api-param-type-string,`String`>>} params.searchScroll - A scroll search request definition\n * @param {<<api-param-type-number,`Number`>>} params.searchSize - The number of documents to return (default: 10)\n * @param {<<api-param-type-string,`String`>>} params.searchSource - A specific search request definition (instead of using the request body)\n * @param {<<api-param-type-string,`String`>>} params.searchType - Specific search type (eg. `dfs_then_fetch`, `count`, etc)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.searchTypes - A comma-separated list of types to perform the query against (default: the same type as the document)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stopWords - A list of stop words to be ignored\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.mlt = ca({\n  params: {\n    boostTerms: {\n      type: 'number',\n      name: 'boost_terms'\n    },\n    maxDocFreq: {\n      type: 'number',\n      name: 'max_doc_freq'\n    },\n    maxQueryTerms: {\n      type: 'number',\n      name: 'max_query_terms'\n    },\n    maxWordLength: {\n      type: 'number',\n      name: 'max_word_length'\n    },\n    minDocFreq: {\n      type: 'number',\n      name: 'min_doc_freq'\n    },\n    minTermFreq: {\n      type: 'number',\n      name: 'min_term_freq'\n    },\n    minWordLength: {\n      type: 'number',\n      name: 'min_word_length'\n    },\n    mltFields: {\n      type: 'list',\n      name: 'mlt_fields'\n    },\n    percentTermsToMatch: {\n      type: 'number',\n      name: 'percent_terms_to_match'\n    },\n    routing: {\n      type: 'string'\n    },\n    searchFrom: {\n      type: 'number',\n      name: 'search_from'\n    },\n    searchIndices: {\n      type: 'list',\n      name: 'search_indices'\n    },\n    searchScroll: {\n      type: 'string',\n      name: 'search_scroll'\n    },\n    searchSize: {\n      type: 'number',\n      name: 'search_size'\n    },\n    searchSource: {\n      type: 'string',\n      name: 'search_source'\n    },\n    searchType: {\n      type: 'string',\n      name: 'search_type'\n    },\n    searchTypes: {\n      type: 'list',\n      name: 'search_types'\n    },\n    stopWords: {\n      type: 'list',\n      name: 'stop_words'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_mlt',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [mpercolate](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated to use as default\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated to use as default.\n */\napi.mpercolate = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mpercolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mpercolate',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mpercolate'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [msearch](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-multi-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n */\napi.msearch = ca({\n  params: {\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_msearch'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mtermvectors](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-multi-termvectors.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.ids - A comma-separated list of documents ids. You must define ids as parameter or set \"ids\" or \"docs\" in the request body\n * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if requests are real-time as opposed to near-real-time (default: true).\n * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n * @param {<<api-param-type-string,`String`>>} params.id - The id of the document.\n */\napi.mtermvectors = ca({\n  params: {\n    ids: {\n      type: 'list',\n      required: false\n    },\n    termStatistics: {\n      type: 'boolean',\n      'default': false,\n      required: false,\n      name: 'term_statistics'\n    },\n    fieldStatistics: {\n      type: 'boolean',\n      'default': true,\n      required: false,\n      name: 'field_statistics'\n    },\n    fields: {\n      type: 'list',\n      required: false\n    },\n    offsets: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    positions: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    payloads: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    preference: {\n      type: 'string',\n      required: false\n    },\n    routing: {\n      type: 'string',\n      required: false\n    },\n    parent: {\n      type: 'string',\n      required: false\n    },\n    realtime: {\n      type: 'boolean',\n      required: false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mtermvectors',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mtermvectors',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mtermvectors'\n    }\n  ],\n  method: 'POST'\n});\n\napi.nodes = namespace();\n\n/**\n * Perform a [nodes.hotThreads](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-hot-threads.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.interval - The interval for the second sampling of threads\n * @param {<<api-param-type-number,`Number`>>} params.snapshots - Number of samples of thread stacktrace (default: 10)\n * @param {<<api-param-type-number,`Number`>>} params.threads - Specify the number of threads to provide information for (default: 3)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreIdleThreads - Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue (default: true)\n * @param {<<api-param-type-string,`String`>>} params.type - The type to sample (default: cpu)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.nodes.prototype.hotThreads = ca({\n  params: {\n    interval: {\n      type: 'time'\n    },\n    snapshots: {\n      type: 'number'\n    },\n    threads: {\n      type: 'number'\n    },\n    ignoreIdleThreads: {\n      type: 'boolean',\n      name: 'ignore_idle_threads'\n    },\n    type: {\n      type: 'enum',\n      options: [\n        'cpu',\n        'wait',\n        'block'\n      ]\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/hotthreads',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/hotthreads'\n    }\n  ]\n});\n\n/**\n * Perform a [nodes.info](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-info.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - A comma-separated list of metrics you wish returned. Leave empty to return all.\n */\napi.nodes.prototype.info = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/<%=metric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            'settings',\n            'os',\n            'process',\n            'jvm',\n            'thread_pool',\n            'network',\n            'transport',\n            'http',\n            'plugins'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            'settings',\n            'os',\n            'process',\n            'jvm',\n            'thread_pool',\n            'network',\n            'transport',\n            'http',\n            'plugins'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes'\n    }\n  ]\n});\n\n/**\n * Perform a [nodes.shutdown](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-shutdown.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.delay - Set the delay for the operation (default: 1s)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.exit - Exit the JVM as well (default: true)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to perform the operation on; use `_local` to perform the operation on the node you're connected to, leave empty to perform the operation on all nodes\n */\napi.nodes.prototype.shutdown = ca({\n  params: {\n    delay: {\n      type: 'time'\n    },\n    exit: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/nodes/<%=nodeId%>/_shutdown',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_shutdown'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [nodes.stats](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/cluster-nodes-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>} [params.level=node] - Return indices stats aggregated at node, index or shard level\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indexMetric - Limit the information returned for `indices` metric to the specific index metrics. Isn't used if `indices` (or `all`) metric isn't specified.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.nodes.prototype.stats = ca({\n  params: {\n    completionFields: {\n      type: 'list',\n      name: 'completion_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    fields: {\n      type: 'list'\n    },\n    groups: {\n      type: 'boolean'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    level: {\n      type: 'enum',\n      'default': 'node',\n      options: [\n        'node',\n        'indices',\n        'shards'\n      ]\n    },\n    types: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>/<%=indexMetric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'network',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        },\n        indexMetric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'filter_cache',\n            'flush',\n            'get',\n            'id_cache',\n            'indexing',\n            'merge',\n            'percolate',\n            'query_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'network',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats/<%=metric%>/<%=indexMetric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'network',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        },\n        indexMetric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'filter_cache',\n            'flush',\n            'get',\n            'id_cache',\n            'indexing',\n            'merge',\n            'percolate',\n            'query_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'network',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats'\n    }\n  ]\n});\n\n/**\n * Perform a [percolate](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.percolateFormat - Return an array of matching query IDs instead of objects\n * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to percolate the document into. Defaults to index.\n * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to percolate document into. Defaults to type.\n * @param {<<api-param-type-string,`String`>>} params.percolateRouting - The routing value to use when percolating the existing document.\n * @param {<<api-param-type-string,`String`>>} params.percolatePreference - Which shard to prefer when executing the percolate request.\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being percolated.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated.\n * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n */\napi.percolate = ca({\n  params: {\n    routing: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    percolateFormat: {\n      type: 'enum',\n      options: [\n        'ids'\n      ],\n      name: 'percolate_format'\n    },\n    percolateIndex: {\n      type: 'string',\n      name: 'percolate_index'\n    },\n    percolateType: {\n      type: 'string',\n      name: 'percolate_type'\n    },\n    percolateRouting: {\n      type: 'string',\n      name: 'percolate_routing'\n    },\n    percolatePreference: {\n      type: 'string',\n      name: 'percolate_preference'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_percolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [ping](http://www.elastic.co/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.ping = ca({\n  url: {\n    fmt: '/'\n  },\n  requestTimeout: 3000,\n  method: 'HEAD'\n});\n\n/**\n * Perform a [putScript](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.putScript = ca({\n  params: {\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [putTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.putTemplate = ca({\n  params: {\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [scroll](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.scrollId - The scroll ID\n */\napi.scroll = ca({\n  params: {\n    scroll: {\n      type: 'duration'\n    },\n    scrollId: {\n      type: 'string',\n      name: 'scroll_id'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_search/scroll/<%=scrollId%>',\n      req: {\n        scrollId: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_search/scroll'\n    }\n  ],\n  paramAsBody: 'scrollId',\n  method: 'POST'\n});\n\n/**\n * Perform a [search](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields to return as the field data representation of a field for each hit\n * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n * @param {<<api-param-type-string,`String`>>} params.suggestField - Specify which field to use for suggestions\n * @param {<<api-param-type-string,`String`>>} [params.suggestMode=missing] - Specify suggest mode\n * @param {<<api-param-type-number,`Number`>>} params.suggestSize - How many suggestions to return in response\n * @param {<<api-param-type-string,`String`>>} params.suggestText - The source text for which the suggestions should be returned\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.trackScores - Whether to calculate and return scores even if they are not used for sorting\n * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n * @param {<<api-param-type-boolean,`Boolean`>>} params.queryCache - Specify if query cache should be used for this request or not, defaults to index level setting\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.search = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    from: {\n      type: 'number'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'duration'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    },\n    size: {\n      type: 'number'\n    },\n    sort: {\n      type: 'list'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    stats: {\n      type: 'list'\n    },\n    suggestField: {\n      type: 'string',\n      name: 'suggest_field'\n    },\n    suggestMode: {\n      type: 'enum',\n      'default': 'missing',\n      options: [\n        'missing',\n        'popular',\n        'always'\n      ],\n      name: 'suggest_mode'\n    },\n    suggestSize: {\n      type: 'number',\n      name: 'suggest_size'\n    },\n    suggestText: {\n      type: 'text',\n      name: 'suggest_text'\n    },\n    timeout: {\n      type: 'time'\n    },\n    trackScores: {\n      type: 'boolean',\n      name: 'track_scores'\n    },\n    version: {\n      type: 'boolean'\n    },\n    queryCache: {\n      type: 'boolean',\n      name: 'query_cache'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchExists](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n */\napi.searchExists = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    minScore: {\n      type: 'number',\n      name: 'min_score'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search/exists',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search/exists',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/exists'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchShards](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-shards.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.searchShards = ca({\n  params: {\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search_shards',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search_shards',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_search_shards'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.searchTemplate = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'duration'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search/template',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search/template',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/template'\n    }\n  ],\n  method: 'POST'\n});\n\napi.snapshot = namespace();\n\n/**\n * Perform a [snapshot.create](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype.create = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.createRepository](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.verify - Whether to verify the repository after creation\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n */\napi.snapshot.prototype.createRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    },\n    verify: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>',\n    req: {\n      repository: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.delete](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype['delete'] = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [snapshot.deleteRepository](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n */\napi.snapshot.prototype.deleteRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>',\n    req: {\n      repository: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [snapshot.get](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n */\napi.snapshot.prototype.get = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'list'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [snapshot.getRepository](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n */\napi.snapshot.prototype.getRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_snapshot/<%=repository%>',\n      req: {\n        repository: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot'\n    }\n  ]\n});\n\n/**\n * Perform a [snapshot.restore](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype.restore = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_restore',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.status](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n */\napi.snapshot.prototype.status = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_status',\n      req: {\n        repository: {\n          type: 'string'\n        },\n        snapshot: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot/<%=repository%>/_status',\n      req: {\n        repository: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot/_status'\n    }\n  ]\n});\n\n/**\n * Perform a [snapshot.verifyRepository](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n */\napi.snapshot.prototype.verifyRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/_verify',\n    req: {\n      repository: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [suggest](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/search-suggesters.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n */\napi.suggest = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_suggest',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_suggest'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [termvector](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-termvectors.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random).\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value.\n * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if request is real-time as opposed to near-real-time (default: true).\n * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n * @param {<<api-param-type-string,`String`>>} params.id - The id of the document.\n */\napi.termvector = ca({\n  params: {\n    termStatistics: {\n      type: 'boolean',\n      'default': false,\n      required: false,\n      name: 'term_statistics'\n    },\n    fieldStatistics: {\n      type: 'boolean',\n      'default': true,\n      required: false,\n      name: 'field_statistics'\n    },\n    fields: {\n      type: 'list',\n      required: false\n    },\n    offsets: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    positions: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    payloads: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    preference: {\n      type: 'string',\n      required: false\n    },\n    routing: {\n      type: 'string',\n      required: false\n    },\n    parent: {\n      type: 'string',\n      required: false\n    },\n    realtime: {\n      type: 'boolean',\n      required: false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_termvector',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_termvector',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [update](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-update.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.lang - The script language (default: groovy)\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document. Is is only used for routing and when for the upsert request\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-number,`Number`>>} params.retryOnConflict - Specify how many times should the operation be retried when a conflict occurs (default: 0)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {anything} params.script - The URL-encoded script definition (instead of using request body)\n * @param {anything} params.scriptId - The id of a stored script\n * @param {<<api-param-type-boolean,`Boolean`>>} params.scriptedUpsert - True if the script referenced in script or script_id should be called to perform inserts - defaults to false\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.update = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    fields: {\n      type: 'list'\n    },\n    lang: {\n      type: 'string'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    retryOnConflict: {\n      type: 'number',\n      name: 'retry_on_conflict'\n    },\n    routing: {\n      type: 'string'\n    },\n    script: {},\n    scriptId: {\n      name: 'script_id'\n    },\n    scriptedUpsert: {\n      type: 'boolean',\n      name: 'scripted_upsert'\n    },\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'duration'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_update',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [create](http://www.elastic.co/guide/en/elasticsearch/reference/1.6/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.create = ca.proxy(api.index, {\n  transform: function (params) {\n    params.op_type = 'create';\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/apis/1_5.js":"var ca = require('../client_action').factory;\nvar namespace = require('../client_action').namespaceFactory;\nvar api = module.exports = {};\n\napi._namespaces = ['cat', 'cluster', 'indices', 'nodes', 'snapshot'];\n\n/**\n * Perform a [bulk](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/docs-bulk.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Explicitely set the replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.type - Default document type for items which don't provide one\n * @param {<<api-param-type-string,`String`>>} params.index - Default index for items which don't provide one\n */\napi.bulk = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    type: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_bulk'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\napi.cat = namespace();\n\n/**\n * Perform a [cat.aliases](http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.cat.prototype.aliases = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/aliases/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/aliases'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.allocation](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/cat-allocation.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information\n */\napi.cat.prototype.allocation = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/allocation/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/allocation'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.count](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/cat-count.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.count = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/count/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/count'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.fielddata](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/cat-fielddata.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return the fielddata size\n */\napi.cat.prototype.fielddata = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    },\n    fields: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/fielddata/<%=fields%>',\n      req: {\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/fielddata'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.health](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/cat-health.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.ts=true] - Set to false to disable timestamping\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.health = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    ts: {\n      type: 'boolean',\n      'default': true\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/health'\n  }\n});\n\n/**\n * Perform a [cat.help](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/cat.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n */\napi.cat.prototype.help = ca({\n  params: {\n    help: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat'\n  }\n});\n\n/**\n * Perform a [cat.indices](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/cat-indices.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.pri - Set to true to return stats only for primary shards\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.indices = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    pri: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/indices/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/indices'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.master](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/cat-master.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.master = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/master'\n  }\n});\n\n/**\n * Perform a [cat.nodes](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/cat-nodes.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.nodes = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/nodes'\n  }\n});\n\n/**\n * Perform a [cat.pendingTasks](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/cat-pending-tasks.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.pendingTasks = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/pending_tasks'\n  }\n});\n\n/**\n * Perform a [cat.plugins](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/cat-plugins.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.plugins = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/plugins'\n  }\n});\n\n/**\n * Perform a [cat.recovery](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/cat-recovery.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.recovery = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/recovery/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/recovery'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.segments](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/cat-segments.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.v=true] - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.segments = ca({\n  params: {\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': true\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/segments/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/segments'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.shards](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/cat-shards.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.shards = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/shards/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/shards'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.threadPool](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/cat-thread-pool.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fullId - Enables displaying the complete node ids\n */\napi.cat.prototype.threadPool = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    },\n    fullId: {\n      type: 'boolean',\n      'default': false,\n      name: 'full_id'\n    }\n  },\n  url: {\n    fmt: '/_cat/thread_pool'\n  }\n});\n\n/**\n * Perform a [clearScroll](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.scrollId - A comma-separated list of scroll IDs to clear\n */\napi.clearScroll = ca({\n  urls: [\n    {\n      fmt: '/_search/scroll/<%=scrollId%>',\n      req: {\n        scrollId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/scroll'\n    }\n  ],\n  paramAsBody: 'scrollId',\n  method: 'DELETE'\n});\n\napi.cluster = namespace();\n\n/**\n * Perform a [cluster.getSettings](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.getSettings = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/settings'\n  }\n});\n\n/**\n * Perform a [cluster.health](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/cluster-health.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Specify the level of detail for returned information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-number,`Number`>>} params.waitForActiveShards - Wait until the specified number of shards is active\n * @param {<<api-param-type-string,`String`>>} params.waitForNodes - Wait until the specified number of nodes is available\n * @param {<<api-param-type-number,`Number`>>} params.waitForRelocatingShards - Wait until the specified number of relocating shards is finished\n * @param {<<api-param-type-string,`String`>>} params.waitForStatus - Wait until cluster is in a specific state\n * @param {<<api-param-type-string,`String`>>} params.index - Limit the information returned to a specific index\n */\napi.cluster.prototype.health = ca({\n  params: {\n    level: {\n      type: 'enum',\n      'default': 'cluster',\n      options: [\n        'cluster',\n        'indices',\n        'shards'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    },\n    waitForActiveShards: {\n      type: 'number',\n      name: 'wait_for_active_shards'\n    },\n    waitForNodes: {\n      type: 'string',\n      name: 'wait_for_nodes'\n    },\n    waitForRelocatingShards: {\n      type: 'number',\n      name: 'wait_for_relocating_shards'\n    },\n    waitForStatus: {\n      type: 'enum',\n      'default': null,\n      options: [\n        'green',\n        'yellow',\n        'red'\n      ],\n      name: 'wait_for_status'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/health/<%=index%>',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/health'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.pendingTasks](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/cluster-pending.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.cluster.prototype.pendingTasks = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_cluster/pending_tasks'\n  }\n});\n\n/**\n * Perform a [cluster.putSettings](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.putSettings = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/settings'\n  },\n  method: 'PUT'\n});\n\n/**\n * Perform a [cluster.reroute](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/cluster-reroute.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - Simulate the operation only and return the resulting state\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return an explanation of why the commands can or cannot be executed\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics. Defaults to all but metadata\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.reroute = ca({\n  params: {\n    dryRun: {\n      type: 'boolean',\n      name: 'dry_run'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    metric: {\n      type: 'list',\n      options: [\n        '_all',\n        'blocks',\n        'metadata',\n        'nodes',\n        'routing_table',\n        'master_node',\n        'version'\n      ]\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/reroute'\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [cluster.state](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/cluster-state.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n */\napi.cluster.prototype.state = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/state/<%=metric%>/<%=index%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'blocks',\n            'metadata',\n            'nodes',\n            'routing_table',\n            'master_node',\n            'version'\n          ]\n        },\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/state/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'blocks',\n            'metadata',\n            'nodes',\n            'routing_table',\n            'master_node',\n            'version'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/state'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.stats](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/cluster-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.cluster.prototype.stats = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/stats/nodes/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/stats'\n    }\n  ]\n});\n\n/**\n * Perform a [count](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/search-count.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded query definition (instead of using the request body)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n */\napi.count = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    minScore: {\n      type: 'number',\n      name: 'min_score'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    source: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_count'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [countPercolate](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to count percolate the document into. Defaults to index.\n * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to count percolate document into. Defaults to type.\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being count percolated.\n * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n */\napi.countPercolate = ca({\n  params: {\n    source: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    percolateIndex: {\n      type: 'string',\n      name: 'percolate_index'\n    },\n    percolateType: {\n      type: 'string',\n      name: 'percolate_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate/count',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_percolate/count',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [delete](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/docs-delete.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Specific write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi['delete'] = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteByQuery](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/docs-delete-by-query.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-string,`String`>>} params.consistency - Specific write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded query definition (instead of using the request body)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the operation\n */\napi.deleteByQuery = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    source: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteScript](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.deleteScript = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.deleteTemplate = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [exists](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.exists = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [explain](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/search-explain.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer for the query string query\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The default field for query string query (default: _all)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded query definition (instead of using the request body)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.explain = ca({\n  params: {\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    fields: {\n      type: 'list'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    source: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_explain',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [get](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.get = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getScript](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.getScript = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getSource](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types\n */\napi.getSource = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.getTemplate = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [index](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.index = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'duration'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\napi.indices = namespace();\n\n/**\n * Perform a [indices.analyze](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-analyze.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The name of the analyzer to use\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.charFilters - A comma-separated list of character filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>} params.field - Use the analyzer configured for this field (instead of passing the analyzer name)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.filters - A comma-separated list of filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index to scope the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.preferLocal - With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)\n * @param {<<api-param-type-string,`String`>>} params.text - The text on which the analysis should be performed (when request body is not used)\n * @param {<<api-param-type-string,`String`>>} params.tokenizer - The name of the tokenizer to use for the analysis\n * @param {<<api-param-type-string,`String`>>} [params.format=detailed] - Format of the output\n */\napi.indices.prototype.analyze = ca({\n  params: {\n    source: {\n      type: 'string'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    charFilters: {\n      type: 'list',\n      name: 'char_filters'\n    },\n    field: {\n      type: 'string'\n    },\n    filters: {\n      type: 'list'\n    },\n    index: {\n      type: 'string'\n    },\n    preferLocal: {\n      type: 'boolean',\n      name: 'prefer_local'\n    },\n    text: {\n      type: 'string'\n    },\n    tokenizer: {\n      type: 'string'\n    },\n    format: {\n      type: 'enum',\n      'default': 'detailed',\n      options: [\n        'detailed',\n        'text'\n      ]\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_analyze',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_analyze'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.clearCache](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-clearcache.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fieldData - Clear field data\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fielddata - Clear field data\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to clear when using the `field_data` parameter (default: all)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filter - Clear filter caches\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filterCache - Clear filter caches\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filterKeys - A comma-separated list of keys to clear when using the `filter_cache` parameter (default: all)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.id - Clear ID caches for parent/child\n * @param {<<api-param-type-boolean,`Boolean`>>} params.idCache - Clear ID caches for parent/child\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index name to limit the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.recycler - Clear the recycler cache\n * @param {<<api-param-type-boolean,`Boolean`>>} params.queryCache - Clear query cache\n */\napi.indices.prototype.clearCache = ca({\n  params: {\n    fieldData: {\n      type: 'boolean',\n      name: 'field_data'\n    },\n    fielddata: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    filter: {\n      type: 'boolean'\n    },\n    filterCache: {\n      type: 'boolean',\n      name: 'filter_cache'\n    },\n    filterKeys: {\n      type: 'boolean',\n      name: 'filter_keys'\n    },\n    id: {\n      type: 'boolean'\n    },\n    idCache: {\n      type: 'boolean',\n      name: 'id_cache'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    index: {\n      type: 'list'\n    },\n    recycler: {\n      type: 'boolean'\n    },\n    queryCache: {\n      type: 'boolean',\n      name: 'query_cache'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_cache/clear',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cache/clear'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.close](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.close = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_close',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.create](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-create-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.create = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.delete](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-delete-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices\n */\napi.indices.prototype['delete'] = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteAlias](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.\n */\napi.indices.prototype.deleteAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_alias/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteMapping](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-delete-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to delete (supports wildcards); use `_all` to delete all document types in the specified indices.\n */\napi.indices.prototype.deleteMapping = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/_mapping',\n    req: {\n      index: {\n        type: 'list'\n      },\n      type: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.deleteTemplate = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteWarmer](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of warmer names to delete (supports wildcards); use `_all` to delete all warmers in the specified indices. You must specify a name either in the uri or in the parameters.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to delete warmers from (supports wildcards); use `_all` to perform the operation on all indices.\n */\napi.indices.prototype.deleteWarmer = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    name: {\n      type: 'list'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_warmer/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.exists](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to check\n */\napi.indices.prototype.exists = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsAlias](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.existsAlias = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': [\n        'open',\n        'closed'\n      ],\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_alias',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.existsTemplate = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsType](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-types-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` to check the types across all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to check\n */\napi.indices.prototype.existsType = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      type: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.flush](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-flush.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitIfOngoing - If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. The default is false and will cause an exception to be thrown on the shard level if another flush operation is already running.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n */\napi.indices.prototype.flush = ca({\n  params: {\n    force: {\n      type: 'boolean'\n    },\n    waitIfOngoing: {\n      type: 'boolean',\n      name: 'wait_if_ongoing'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_flush',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_flush'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.get](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-get-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Ignore unavailable indexes (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.feature - A comma-separated list of features\n */\napi.indices.prototype.get = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=feature%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        feature: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getAlias](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.getAlias = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_alias',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getAliases](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to filter\n */\napi.indices.prototype.getAliases = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_aliases/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_aliases',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_aliases/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_aliases'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getFieldMapping](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-get-field-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether the default mapping values should be returned as well\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.field - A comma-separated list of fields\n */\napi.indices.prototype.getFieldMapping = ca({\n  params: {\n    includeDefaults: {\n      type: 'boolean',\n      name: 'include_defaults'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>/field/<%=field%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        field: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping/field/<%=field%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        field: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>/field/<%=field%>',\n      req: {\n        type: {\n          type: 'list'\n        },\n        field: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/field/<%=field%>',\n      req: {\n        field: {\n          type: 'list'\n        }\n      }\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getMapping](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-get-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n */\napi.indices.prototype.getMapping = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>',\n      req: {\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getSettings](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-get-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the settings that should be included\n */\napi.indices.prototype.getSettings = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': [\n        'open',\n        'closed'\n      ],\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.getTemplate = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_template/<%=name%>',\n      req: {\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_template'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getUpgrade](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-upgrade.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.getUpgrade = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_upgrade',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_upgrade'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getWarmer](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the warmer (supports wildcards); leave empty to get all warmers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n */\napi.indices.prototype.getWarmer = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.open](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.open = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'closed',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_open',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.optimize](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-optimize.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flush - Specify whether the index should be flushed after performing the operation (default: true)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.maxNumSegments - The number of segments the index should be merged into (default: dynamic)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyExpungeDeletes - Specify whether the operation should only expunge deleted documents\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForMerge - Specify whether the request should block until the merge process is finished (default: true)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Force a merge operation to run, even if there is a single segment in the index (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.optimize = ca({\n  params: {\n    flush: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    maxNumSegments: {\n      type: 'number',\n      name: 'max_num_segments'\n    },\n    onlyExpungeDeletes: {\n      type: 'boolean',\n      name: 'only_expunge_deletes'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    waitForMerge: {\n      type: 'boolean',\n      name: 'wait_for_merge'\n    },\n    force: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_optimize',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_optimize'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.putAlias](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the alias to be created or updated\n */\napi.indices.prototype.putAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_alias/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putMapping](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-put-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreConflicts - Specify whether to ignore conflicts while updating the mapping (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.\n * @param {<<api-param-type-string,`String`>>} params.type - The name of the document type\n */\napi.indices.prototype.putMapping = ca({\n  params: {\n    ignoreConflicts: {\n      type: 'boolean',\n      name: 'ignore_conflicts'\n    },\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>',\n      req: {\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putSettings](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.putSettings = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.order - The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.create - Whether the index template should only be added if new or can also replace an existing one\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.putTemplate = ca({\n  params: {\n    order: {\n      type: 'number'\n    },\n    create: {\n      type: 'boolean',\n      'default': false\n    },\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putWarmer](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed) in the search request to warm\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices in the search request to warm. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both, in the search request to warm.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the warmer\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types\n */\napi.indices.prototype.putWarmer = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer/<%=name%>',\n      req: {\n        name: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.recovery](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-recovery.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Whether to display detailed information about shard recovery\n * @param {<<api-param-type-boolean,`Boolean`>>} params.activeOnly - Display only those recoveries that are currently on-going\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.recovery = ca({\n  params: {\n    detailed: {\n      type: 'boolean',\n      'default': false\n    },\n    activeOnly: {\n      type: 'boolean',\n      'default': false,\n      name: 'active_only'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_recovery',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_recovery'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.refresh](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-refresh.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Force a refresh even if not required\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.refresh = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    force: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_refresh',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_refresh'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.segments](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-segments.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.segments = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_segments',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_segments'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.stats](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>} [params.level=indices] - Return stats aggregated at cluster, index or shard level\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned the specific metrics.\n */\napi.indices.prototype.stats = ca({\n  params: {\n    completionFields: {\n      type: 'list',\n      name: 'completion_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    fields: {\n      type: 'list'\n    },\n    groups: {\n      type: 'list'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    level: {\n      type: 'enum',\n      'default': 'indices',\n      options: [\n        'cluster',\n        'indices',\n        'shards'\n      ]\n    },\n    types: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_stats/<%=metric%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'filter_cache',\n            'flush',\n            'get',\n            'id_cache',\n            'indexing',\n            'merge',\n            'percolate',\n            'query_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_stats/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'filter_cache',\n            'flush',\n            'get',\n            'id_cache',\n            'indexing',\n            'merge',\n            'percolate',\n            'query_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_stats',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_stats'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.status](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-status.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.recovery - Return information about shard recovery\n * @param {<<api-param-type-boolean,`Boolean`>>} params.snapshot - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.status = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    recovery: {\n      type: 'boolean'\n    },\n    snapshot: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_status',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_status'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.updateAliases](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Request timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.indices.prototype.updateAliases = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_aliases'\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.upgrade](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/indices-upgrade.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Specify whether the request should block until the all segments are upgraded (default: true)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.upgrade = ca({\n  params: {\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      name: 'wait_for_completion'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_upgrade',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_upgrade'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.validateQuery](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/search-validate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return detailed information about the error\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded query definition (instead of using the request body)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n */\napi.indices.prototype.validateQuery = ca({\n  params: {\n    explain: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    source: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_validate/query'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [info](http://www.elastic.co/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.info = ca({\n  url: {\n    fmt: '/'\n  }\n});\n\n/**\n * Perform a [mget](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/docs-multi-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.mget = ca({\n  params: {\n    source: {\n      type: 'string'\n    },\n    fields: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mget'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mlt](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/search-more-like-this.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition\n * @param {<<api-param-type-number,`Number`>>} params.boostTerms - The boost factor\n * @param {<<api-param-type-number,`Number`>>} params.maxDocFreq - The word occurrence frequency as count: words with higher occurrence in the corpus will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.maxQueryTerms - The maximum query terms to be included in the generated query\n * @param {<<api-param-type-number,`Number`>>} params.maxWordLength - The minimum length of the word: longer words will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.minDocFreq - The word occurrence frequency as count: words with lower occurrence in the corpus will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.minTermFreq - The term frequency as percent: terms with lower occurence in the source document will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.minWordLength - The minimum length of the word: shorter words will be ignored\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.mltFields - Specific fields to perform the query against\n * @param {<<api-param-type-number,`Number`>>} params.percentTermsToMatch - How many terms have to match in order to consider the document a match (default: 0.3)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-number,`Number`>>} params.searchFrom - The offset from which to return results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.searchIndices - A comma-separated list of indices to perform the query against (default: the index containing the document)\n * @param {<<api-param-type-string,`String`>>} params.searchScroll - A scroll search request definition\n * @param {<<api-param-type-number,`Number`>>} params.searchSize - The number of documents to return (default: 10)\n * @param {<<api-param-type-string,`String`>>} params.searchSource - A specific search request definition (instead of using the request body)\n * @param {<<api-param-type-string,`String`>>} params.searchType - Specific search type (eg. `dfs_then_fetch`, `count`, etc)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.searchTypes - A comma-separated list of types to perform the query against (default: the same type as the document)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stopWords - A list of stop words to be ignored\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.mlt = ca({\n  params: {\n    source: {\n      type: 'string'\n    },\n    boostTerms: {\n      type: 'number',\n      name: 'boost_terms'\n    },\n    maxDocFreq: {\n      type: 'number',\n      name: 'max_doc_freq'\n    },\n    maxQueryTerms: {\n      type: 'number',\n      name: 'max_query_terms'\n    },\n    maxWordLength: {\n      type: 'number',\n      name: 'max_word_length'\n    },\n    minDocFreq: {\n      type: 'number',\n      name: 'min_doc_freq'\n    },\n    minTermFreq: {\n      type: 'number',\n      name: 'min_term_freq'\n    },\n    minWordLength: {\n      type: 'number',\n      name: 'min_word_length'\n    },\n    mltFields: {\n      type: 'list',\n      name: 'mlt_fields'\n    },\n    percentTermsToMatch: {\n      type: 'number',\n      name: 'percent_terms_to_match'\n    },\n    routing: {\n      type: 'string'\n    },\n    searchFrom: {\n      type: 'number',\n      name: 'search_from'\n    },\n    searchIndices: {\n      type: 'list',\n      name: 'search_indices'\n    },\n    searchScroll: {\n      type: 'string',\n      name: 'search_scroll'\n    },\n    searchSize: {\n      type: 'number',\n      name: 'search_size'\n    },\n    searchSource: {\n      type: 'string',\n      name: 'search_source'\n    },\n    searchType: {\n      type: 'string',\n      name: 'search_type'\n    },\n    searchTypes: {\n      type: 'list',\n      name: 'search_types'\n    },\n    stopWords: {\n      type: 'list',\n      name: 'stop_words'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_mlt',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [mpercolate](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated to use as default\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated to use as default.\n */\napi.mpercolate = ca({\n  params: {\n    source: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mpercolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mpercolate',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mpercolate'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [msearch](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/search-multi-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n */\napi.msearch = ca({\n  params: {\n    source: {\n      type: 'string'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_msearch'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mtermvectors](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/docs-multi-termvectors.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.ids - A comma-separated list of documents ids. You must define ids as parameter or set \"ids\" or \"docs\" in the request body\n * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if requests are real-time as opposed to near-real-time (default: true).\n * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n * @param {<<api-param-type-string,`String`>>} params.id - The id of the document.\n */\napi.mtermvectors = ca({\n  params: {\n    source: {\n      type: 'string'\n    },\n    ids: {\n      type: 'list',\n      required: false\n    },\n    termStatistics: {\n      type: 'boolean',\n      'default': false,\n      required: false,\n      name: 'term_statistics'\n    },\n    fieldStatistics: {\n      type: 'boolean',\n      'default': true,\n      required: false,\n      name: 'field_statistics'\n    },\n    fields: {\n      type: 'list',\n      required: false\n    },\n    offsets: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    positions: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    payloads: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    preference: {\n      type: 'string',\n      required: false\n    },\n    routing: {\n      type: 'string',\n      required: false\n    },\n    parent: {\n      type: 'string',\n      required: false\n    },\n    realtime: {\n      type: 'boolean',\n      required: false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mtermvectors',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mtermvectors',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mtermvectors'\n    }\n  ],\n  method: 'POST'\n});\n\napi.nodes = namespace();\n\n/**\n * Perform a [nodes.hotThreads](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/cluster-nodes-hot-threads.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.interval - The interval for the second sampling of threads\n * @param {<<api-param-type-number,`Number`>>} params.snapshots - Number of samples of thread stacktrace (default: 10)\n * @param {<<api-param-type-number,`Number`>>} params.threads - Specify the number of threads to provide information for (default: 3)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreIdleThreads - Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue (default: true)\n * @param {<<api-param-type-string,`String`>>} params.type - The type to sample (default: cpu)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.nodes.prototype.hotThreads = ca({\n  params: {\n    interval: {\n      type: 'time'\n    },\n    snapshots: {\n      type: 'number'\n    },\n    threads: {\n      type: 'number'\n    },\n    ignoreIdleThreads: {\n      type: 'boolean',\n      name: 'ignore_idle_threads'\n    },\n    type: {\n      type: 'enum',\n      options: [\n        'cpu',\n        'wait',\n        'block'\n      ]\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/hotthreads',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/hotthreads'\n    }\n  ]\n});\n\n/**\n * Perform a [nodes.info](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/cluster-nodes-info.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - A comma-separated list of metrics you wish returned. Leave empty to return all.\n */\napi.nodes.prototype.info = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/<%=metric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            'settings',\n            'os',\n            'process',\n            'jvm',\n            'thread_pool',\n            'network',\n            'transport',\n            'http',\n            'plugins'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            'settings',\n            'os',\n            'process',\n            'jvm',\n            'thread_pool',\n            'network',\n            'transport',\n            'http',\n            'plugins'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes'\n    }\n  ]\n});\n\n/**\n * Perform a [nodes.shutdown](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/cluster-nodes-shutdown.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.delay - Set the delay for the operation (default: 1s)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.exit - Exit the JVM as well (default: true)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to perform the operation on; use `_local` to perform the operation on the node you're connected to, leave empty to perform the operation on all nodes\n */\napi.nodes.prototype.shutdown = ca({\n  params: {\n    delay: {\n      type: 'time'\n    },\n    exit: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/nodes/<%=nodeId%>/_shutdown',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_shutdown'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [nodes.stats](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/cluster-nodes-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>} [params.level=node] - Return indices stats aggregated at node, index or shard level\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indexMetric - Limit the information returned for `indices` metric to the specific index metrics. Isn't used if `indices` (or `all`) metric isn't specified.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.nodes.prototype.stats = ca({\n  params: {\n    completionFields: {\n      type: 'list',\n      name: 'completion_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    fields: {\n      type: 'list'\n    },\n    groups: {\n      type: 'boolean'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    level: {\n      type: 'enum',\n      'default': 'node',\n      options: [\n        'node',\n        'indices',\n        'shards'\n      ]\n    },\n    types: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>/<%=indexMetric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'network',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        },\n        indexMetric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'filter_cache',\n            'flush',\n            'get',\n            'id_cache',\n            'indexing',\n            'merge',\n            'percolate',\n            'query_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'network',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats/<%=metric%>/<%=indexMetric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'network',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        },\n        indexMetric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'filter_cache',\n            'flush',\n            'get',\n            'id_cache',\n            'indexing',\n            'merge',\n            'percolate',\n            'query_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'network',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats'\n    }\n  ]\n});\n\n/**\n * Perform a [percolate](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.percolateFormat - Return an array of matching query IDs instead of objects\n * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to percolate the document into. Defaults to index.\n * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to percolate document into. Defaults to type.\n * @param {<<api-param-type-string,`String`>>} params.percolateRouting - The routing value to use when percolating the existing document.\n * @param {<<api-param-type-string,`String`>>} params.percolatePreference - Which shard to prefer when executing the percolate request.\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being percolated.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated.\n * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n */\napi.percolate = ca({\n  params: {\n    source: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    percolateFormat: {\n      type: 'enum',\n      options: [\n        'ids'\n      ],\n      name: 'percolate_format'\n    },\n    percolateIndex: {\n      type: 'string',\n      name: 'percolate_index'\n    },\n    percolateType: {\n      type: 'string',\n      name: 'percolate_type'\n    },\n    percolateRouting: {\n      type: 'string',\n      name: 'percolate_routing'\n    },\n    percolatePreference: {\n      type: 'string',\n      name: 'percolate_preference'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_percolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [ping](http://www.elastic.co/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.ping = ca({\n  url: {\n    fmt: '/'\n  },\n  requestTimeout: 3000,\n  method: 'HEAD'\n});\n\n/**\n * Perform a [putScript](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.putScript = ca({\n  params: {\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [putTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.putTemplate = ca({\n  params: {\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [scroll](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.scrollId - The scroll ID\n */\napi.scroll = ca({\n  params: {\n    source: {\n      type: 'string'\n    },\n    scroll: {\n      type: 'duration'\n    },\n    scrollId: {\n      type: 'string',\n      name: 'scroll_id'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_search/scroll/<%=scrollId%>',\n      req: {\n        scrollId: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_search/scroll'\n    }\n  ],\n  paramAsBody: 'scrollId',\n  method: 'POST'\n});\n\n/**\n * Perform a [search](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/search-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields to return as the field data representation of a field for each hit\n * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indicesBoost - Comma-separated list of index boosts\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition using the Query DSL (instead of using request body)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n * @param {<<api-param-type-string,`String`>>} params.suggestField - Specify which field to use for suggestions\n * @param {<<api-param-type-string,`String`>>} [params.suggestMode=missing] - Specify suggest mode\n * @param {<<api-param-type-number,`Number`>>} params.suggestSize - How many suggestions to return in response\n * @param {<<api-param-type-string,`String`>>} params.suggestText - The source text for which the suggestions should be returned\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.trackScores - Whether to calculate and return scores even if they are not used for sorting\n * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n * @param {<<api-param-type-boolean,`Boolean`>>} params.queryCache - Specify if query cache should be used for this request or not, defaults to index level setting\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.search = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    from: {\n      type: 'number'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    indicesBoost: {\n      type: 'list',\n      name: 'indices_boost'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'duration'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    },\n    size: {\n      type: 'number'\n    },\n    sort: {\n      type: 'list'\n    },\n    source: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    stats: {\n      type: 'list'\n    },\n    suggestField: {\n      type: 'string',\n      name: 'suggest_field'\n    },\n    suggestMode: {\n      type: 'enum',\n      'default': 'missing',\n      options: [\n        'missing',\n        'popular',\n        'always'\n      ],\n      name: 'suggest_mode'\n    },\n    suggestSize: {\n      type: 'number',\n      name: 'suggest_size'\n    },\n    suggestText: {\n      type: 'text',\n      name: 'suggest_text'\n    },\n    timeout: {\n      type: 'time'\n    },\n    trackScores: {\n      type: 'boolean',\n      name: 'track_scores'\n    },\n    version: {\n      type: 'boolean'\n    },\n    queryCache: {\n      type: 'boolean',\n      name: 'query_cache'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchExists](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/search-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded query definition (instead of using the request body)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n */\napi.searchExists = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    minScore: {\n      type: 'number',\n      name: 'min_score'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    source: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search/exists',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search/exists',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/exists'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchShards](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/search-shards.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.searchShards = ca({\n  params: {\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search_shards',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search_shards',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_search_shards'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.searchTemplate = ca({\n  params: {\n    source: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'duration'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search/template',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search/template',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/template'\n    }\n  ],\n  method: 'POST'\n});\n\napi.snapshot = namespace();\n\n/**\n * Perform a [snapshot.create](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype.create = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_create',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.createRepository](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.verify - Whether to verify the repository after creation\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n */\napi.snapshot.prototype.createRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    },\n    verify: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>',\n    req: {\n      repository: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.delete](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype['delete'] = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [snapshot.deleteRepository](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n */\napi.snapshot.prototype.deleteRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>',\n    req: {\n      repository: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [snapshot.get](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n */\napi.snapshot.prototype.get = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'list'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [snapshot.getRepository](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n */\napi.snapshot.prototype.getRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_snapshot/<%=repository%>',\n      req: {\n        repository: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot'\n    }\n  ]\n});\n\n/**\n * Perform a [snapshot.restore](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype.restore = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_restore',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.status](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n */\napi.snapshot.prototype.status = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_status',\n      req: {\n        repository: {\n          type: 'string'\n        },\n        snapshot: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot/<%=repository%>/_status',\n      req: {\n        repository: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot/_status'\n    }\n  ]\n});\n\n/**\n * Perform a [snapshot.verifyRepository](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n */\napi.snapshot.prototype.verifyRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/_verify',\n    req: {\n      repository: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [suggest](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/search-suggesters.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition (instead of using request body)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n */\napi.suggest = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    source: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_suggest',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_suggest'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [termvector](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/docs-termvectors.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition\n * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random).\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value.\n * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if request is real-time as opposed to near-real-time (default: true).\n * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n * @param {<<api-param-type-string,`String`>>} params.id - The id of the document.\n */\napi.termvector = ca({\n  params: {\n    source: {\n      type: 'string'\n    },\n    termStatistics: {\n      type: 'boolean',\n      'default': false,\n      required: false,\n      name: 'term_statistics'\n    },\n    fieldStatistics: {\n      type: 'boolean',\n      'default': true,\n      required: false,\n      name: 'field_statistics'\n    },\n    fields: {\n      type: 'list',\n      required: false\n    },\n    offsets: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    positions: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    payloads: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    preference: {\n      type: 'string',\n      required: false\n    },\n    routing: {\n      type: 'string',\n      required: false\n    },\n    parent: {\n      type: 'string',\n      required: false\n    },\n    realtime: {\n      type: 'boolean',\n      required: false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_termvector',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_termvector',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [update](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/docs-update.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.lang - The script language (default: groovy)\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-number,`Number`>>} params.retryOnConflict - Specify how many times should the operation be retried when a conflict occurs (default: 0)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {anything} params.script - The URL-encoded script definition (instead of using request body)\n * @param {anything} params.scriptId - The id of a stored script\n * @param {<<api-param-type-boolean,`Boolean`>>} params.scriptedUpsert - True if the script referenced in script or script_id should be called to perform inserts - defaults to false\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.update = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    fields: {\n      type: 'list'\n    },\n    lang: {\n      type: 'string'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    retryOnConflict: {\n      type: 'number',\n      name: 'retry_on_conflict'\n    },\n    routing: {\n      type: 'string'\n    },\n    script: {},\n    scriptId: {\n      name: 'script_id'\n    },\n    scriptedUpsert: {\n      type: 'boolean',\n      name: 'scripted_upsert'\n    },\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'duration'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_update',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [create](http://www.elastic.co/guide/en/elasticsearch/reference/1.5/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.create = ca.proxy(api.index, {\n  transform: function (params) {\n    params.op_type = 'create';\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/apis/1_4.js":"var ca = require('../client_action').factory;\nvar namespace = require('../client_action').namespaceFactory;\nvar api = module.exports = {};\n\napi._namespaces = ['cat', 'cluster', 'indices', 'nodes', 'snapshot'];\n\n/**\n * Perform a [bulk](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/docs-bulk.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Explicitely set the replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.type - Default document type for items which don't provide one\n * @param {<<api-param-type-string,`String`>>} params.index - Default index for items which don't provide one\n */\napi.bulk = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    type: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_bulk'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\napi.cat = namespace();\n\n/**\n * Perform a [cat.aliases](http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.cat.prototype.aliases = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/aliases/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/aliases'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.allocation](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/cat-allocation.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information\n */\napi.cat.prototype.allocation = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/allocation/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/allocation'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.count](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/cat-count.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.count = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/count/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/count'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.fielddata](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/cat-fielddata.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return the fielddata size\n */\napi.cat.prototype.fielddata = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    },\n    fields: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/fielddata/<%=fields%>',\n      req: {\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/fielddata'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.health](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/cat-health.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.ts=true] - Set to false to disable timestamping\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.health = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    ts: {\n      type: 'boolean',\n      'default': true\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/health'\n  }\n});\n\n/**\n * Perform a [cat.help](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/cat.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n */\napi.cat.prototype.help = ca({\n  params: {\n    help: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat'\n  }\n});\n\n/**\n * Perform a [cat.indices](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/cat-indices.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.pri - Set to true to return stats only for primary shards\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.indices = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    pri: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/indices/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/indices'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.master](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/cat-master.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.master = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/master'\n  }\n});\n\n/**\n * Perform a [cat.nodes](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/cat-nodes.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.nodes = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/nodes'\n  }\n});\n\n/**\n * Perform a [cat.pendingTasks](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/cat-pending-tasks.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.pendingTasks = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/pending_tasks'\n  }\n});\n\n/**\n * Perform a [cat.plugins](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/cat-plugins.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.plugins = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/plugins'\n  }\n});\n\n/**\n * Perform a [cat.recovery](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/cat-recovery.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.recovery = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/recovery/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/recovery'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.segments](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/cat-segments.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.v=true] - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.segments = ca({\n  params: {\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': true\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/segments/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/segments'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.shards](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/cat-shards.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.shards = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/shards/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/shards'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.threadPool](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/cat-thread-pool.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fullId - Enables displaying the complete node ids\n */\napi.cat.prototype.threadPool = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    },\n    fullId: {\n      type: 'boolean',\n      'default': false,\n      name: 'full_id'\n    }\n  },\n  url: {\n    fmt: '/_cat/thread_pool'\n  }\n});\n\n/**\n * Perform a [clearScroll](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.scrollId - A comma-separated list of scroll IDs to clear\n */\napi.clearScroll = ca({\n  urls: [\n    {\n      fmt: '/_search/scroll/<%=scrollId%>',\n      req: {\n        scrollId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/scroll'\n    }\n  ],\n  paramAsBody: 'scrollId',\n  method: 'DELETE'\n});\n\napi.cluster = namespace();\n\n/**\n * Perform a [cluster.getSettings](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.getSettings = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/settings'\n  }\n});\n\n/**\n * Perform a [cluster.health](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/cluster-health.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Specify the level of detail for returned information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-number,`Number`>>} params.waitForActiveShards - Wait until the specified number of shards is active\n * @param {<<api-param-type-string,`String`>>} params.waitForNodes - Wait until the specified number of nodes is available\n * @param {<<api-param-type-number,`Number`>>} params.waitForRelocatingShards - Wait until the specified number of relocating shards is finished\n * @param {<<api-param-type-string,`String`>>} params.waitForStatus - Wait until cluster is in a specific state\n * @param {<<api-param-type-string,`String`>>} params.index - Limit the information returned to a specific index\n */\napi.cluster.prototype.health = ca({\n  params: {\n    level: {\n      type: 'enum',\n      'default': 'cluster',\n      options: [\n        'cluster',\n        'indices',\n        'shards'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    },\n    waitForActiveShards: {\n      type: 'number',\n      name: 'wait_for_active_shards'\n    },\n    waitForNodes: {\n      type: 'string',\n      name: 'wait_for_nodes'\n    },\n    waitForRelocatingShards: {\n      type: 'number',\n      name: 'wait_for_relocating_shards'\n    },\n    waitForStatus: {\n      type: 'enum',\n      'default': null,\n      options: [\n        'green',\n        'yellow',\n        'red'\n      ],\n      name: 'wait_for_status'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/health/<%=index%>',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/health'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.pendingTasks](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/cluster-pending.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.cluster.prototype.pendingTasks = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_cluster/pending_tasks'\n  }\n});\n\n/**\n * Perform a [cluster.putSettings](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n */\napi.cluster.prototype.putSettings = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  url: {\n    fmt: '/_cluster/settings'\n  },\n  method: 'PUT'\n});\n\n/**\n * Perform a [cluster.reroute](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/cluster-reroute.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - Simulate the operation only and return the resulting state\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return an explanation of why the commands can or cannot be executed\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics. Defaults to all but metadata\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.reroute = ca({\n  params: {\n    dryRun: {\n      type: 'boolean',\n      name: 'dry_run'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    metric: {\n      type: 'list',\n      options: [\n        '_all',\n        'blocks',\n        'metadata',\n        'nodes',\n        'routing_table',\n        'master_node',\n        'version'\n      ]\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/reroute'\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [cluster.state](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/cluster-state.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n */\napi.cluster.prototype.state = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/state/<%=metric%>/<%=index%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'blocks',\n            'metadata',\n            'nodes',\n            'routing_table',\n            'master_node',\n            'version'\n          ]\n        },\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/state/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'blocks',\n            'metadata',\n            'nodes',\n            'routing_table',\n            'master_node',\n            'version'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/state'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.stats](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/cluster-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.cluster.prototype.stats = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/stats/nodes/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/stats'\n    }\n  ]\n});\n\n/**\n * Perform a [count](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/search-count.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded query definition (instead of using the request body)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n */\napi.count = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    minScore: {\n      type: 'number',\n      name: 'min_score'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    source: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_count'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [countPercolate](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to count percolate the document into. Defaults to index.\n * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to count percolate document into. Defaults to type.\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being count percolated.\n * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n */\napi.countPercolate = ca({\n  params: {\n    source: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    percolateIndex: {\n      type: 'string',\n      name: 'percolate_index'\n    },\n    percolateType: {\n      type: 'string',\n      name: 'percolate_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate/count',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_percolate/count',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [delete](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/docs-delete.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Specific write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi['delete'] = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteByQuery](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/docs-delete-by-query.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-string,`String`>>} params.consistency - Specific write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded query definition (instead of using the request body)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the operation\n */\napi.deleteByQuery = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    source: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteScript](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.deleteScript = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.deleteTemplate = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [exists](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.exists = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [explain](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/search-explain.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer for the query string query\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The default field for query string query (default: _all)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded query definition (instead of using the request body)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.explain = ca({\n  params: {\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    fields: {\n      type: 'list'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    source: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_explain',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [get](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.get = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getScript](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.getScript = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getSource](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types\n */\napi.getSource = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.getTemplate = ca({\n  params: {\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [index](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.index = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'duration'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\napi.indices = namespace();\n\n/**\n * Perform a [indices.analyze](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-analyze.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The name of the analyzer to use\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.charFilters - A comma-separated list of character filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>} params.field - Use the analyzer configured for this field (instead of passing the analyzer name)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.filters - A comma-separated list of filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index to scope the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.preferLocal - With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)\n * @param {<<api-param-type-string,`String`>>} params.text - The text on which the analysis should be performed (when request body is not used)\n * @param {<<api-param-type-string,`String`>>} params.tokenizer - The name of the tokenizer to use for the analysis\n * @param {<<api-param-type-string,`String`>>} [params.format=detailed] - Format of the output\n */\napi.indices.prototype.analyze = ca({\n  params: {\n    source: {\n      type: 'string'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    charFilters: {\n      type: 'list',\n      name: 'char_filters'\n    },\n    field: {\n      type: 'string'\n    },\n    filters: {\n      type: 'list'\n    },\n    index: {\n      type: 'string'\n    },\n    preferLocal: {\n      type: 'boolean',\n      name: 'prefer_local'\n    },\n    text: {\n      type: 'string'\n    },\n    tokenizer: {\n      type: 'string'\n    },\n    format: {\n      type: 'enum',\n      'default': 'detailed',\n      options: [\n        'detailed',\n        'text'\n      ]\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_analyze',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_analyze'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.clearCache](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-clearcache.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fieldData - Clear field data\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fielddata - Clear field data\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to clear when using the `field_data` parameter (default: all)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filter - Clear filter caches\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filterCache - Clear filter caches\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filterKeys - A comma-separated list of keys to clear when using the `filter_cache` parameter (default: all)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.id - Clear ID caches for parent/child\n * @param {<<api-param-type-boolean,`Boolean`>>} params.idCache - Clear ID caches for parent/child\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index name to limit the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.recycler - Clear the recycler cache\n * @param {<<api-param-type-boolean,`Boolean`>>} params.queryCache - Clear query cache\n */\napi.indices.prototype.clearCache = ca({\n  params: {\n    fieldData: {\n      type: 'boolean',\n      name: 'field_data'\n    },\n    fielddata: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    filter: {\n      type: 'boolean'\n    },\n    filterCache: {\n      type: 'boolean',\n      name: 'filter_cache'\n    },\n    filterKeys: {\n      type: 'boolean',\n      name: 'filter_keys'\n    },\n    id: {\n      type: 'boolean'\n    },\n    idCache: {\n      type: 'boolean',\n      name: 'id_cache'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    index: {\n      type: 'list'\n    },\n    recycler: {\n      type: 'boolean'\n    },\n    queryCache: {\n      type: 'boolean',\n      name: 'query_cache'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_cache/clear',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cache/clear'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.close](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.close = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_close',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.create](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-create-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.create = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.delete](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-delete-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices\n */\napi.indices.prototype['delete'] = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteAlias](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.\n */\napi.indices.prototype.deleteAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_alias/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteMapping](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-delete-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to delete (supports wildcards); use `_all` to delete all document types in the specified indices.\n */\napi.indices.prototype.deleteMapping = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/_mapping',\n    req: {\n      index: {\n        type: 'list'\n      },\n      type: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.deleteTemplate = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteWarmer](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of warmer names to delete (supports wildcards); use `_all` to delete all warmers in the specified indices. You must specify a name either in the uri or in the parameters.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to delete warmers from (supports wildcards); use `_all` to perform the operation on all indices.\n */\napi.indices.prototype.deleteWarmer = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    name: {\n      type: 'list'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_warmer/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.exists](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to check\n */\napi.indices.prototype.exists = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsAlias](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.existsAlias = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': [\n        'open',\n        'closed'\n      ],\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_alias',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.existsTemplate = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsType](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-types-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` to check the types across all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to check\n */\napi.indices.prototype.existsType = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      type: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.flush](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-flush.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.full - If set to true a new index writer is created and settings that have been changed related to the index writer will be refreshed. Note: if a full flush is required for a setting to take effect this will be part of the settings update process and it not required to be executed by the user. (This setting can be considered as internal)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitIfOngoing - If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. The default is false and will cause an exception to be thrown on the shard level if another flush operation is already running.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n */\napi.indices.prototype.flush = ca({\n  params: {\n    force: {\n      type: 'boolean'\n    },\n    full: {\n      type: 'boolean'\n    },\n    waitIfOngoing: {\n      type: 'boolean',\n      name: 'wait_if_ongoing'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_flush',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_flush'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.get](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-get-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Ignore unavailable indexes (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.feature - A comma-separated list of features\n */\napi.indices.prototype.get = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=feature%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        feature: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getAlias](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.getAlias = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_alias',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getAliases](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to filter\n */\napi.indices.prototype.getAliases = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_aliases/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_aliases',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_aliases/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_aliases'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getFieldMapping](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-get-field-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether the default mapping values should be returned as well\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.field - A comma-separated list of fields\n */\napi.indices.prototype.getFieldMapping = ca({\n  params: {\n    includeDefaults: {\n      type: 'boolean',\n      name: 'include_defaults'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>/field/<%=field%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        field: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping/field/<%=field%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        field: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>/field/<%=field%>',\n      req: {\n        type: {\n          type: 'list'\n        },\n        field: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/field/<%=field%>',\n      req: {\n        field: {\n          type: 'list'\n        }\n      }\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getMapping](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-get-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n */\napi.indices.prototype.getMapping = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>',\n      req: {\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getSettings](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-get-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the settings that should be included\n */\napi.indices.prototype.getSettings = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': [\n        'open',\n        'closed'\n      ],\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.getTemplate = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_template/<%=name%>',\n      req: {\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_template'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getUpgrade](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-upgrade.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.getUpgrade = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_upgrade',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_upgrade'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getWarmer](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the warmer (supports wildcards); leave empty to get all warmers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n */\napi.indices.prototype.getWarmer = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.open](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.open = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'closed',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_open',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.optimize](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-optimize.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flush - Specify whether the index should be flushed after performing the operation (default: true)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.maxNumSegments - The number of segments the index should be merged into (default: dynamic)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyExpungeDeletes - Specify whether the operation should only expunge deleted documents\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForMerge - Specify whether the request should block until the merge process is finished (default: true)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Force a merge operation to run, even if there is a single segment in the index (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.optimize = ca({\n  params: {\n    flush: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    maxNumSegments: {\n      type: 'number',\n      name: 'max_num_segments'\n    },\n    onlyExpungeDeletes: {\n      type: 'boolean',\n      name: 'only_expunge_deletes'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    waitForMerge: {\n      type: 'boolean',\n      name: 'wait_for_merge'\n    },\n    force: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_optimize',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_optimize'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.putAlias](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the alias should point to (supports wildcards); use `_all` or omit to perform the operation on all indices.\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the alias to be created or updated\n */\napi.indices.prototype.putAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putMapping](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-put-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreConflicts - Specify whether to ignore conflicts while updating the mapping (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.\n * @param {<<api-param-type-string,`String`>>} params.type - The name of the document type\n */\napi.indices.prototype.putMapping = ca({\n  params: {\n    ignoreConflicts: {\n      type: 'boolean',\n      name: 'ignore_conflicts'\n    },\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>',\n      req: {\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putSettings](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.putSettings = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.order - The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.create - Whether the index template should only be added if new or can also replace an existing one\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.putTemplate = ca({\n  params: {\n    order: {\n      type: 'number'\n    },\n    create: {\n      type: 'boolean',\n      'default': false\n    },\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putWarmer](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed) in the search request to warm\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices in the search request to warm. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both, in the search request to warm.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the warmer\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types\n */\napi.indices.prototype.putWarmer = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer/<%=name%>',\n      req: {\n        name: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.recovery](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-recovery.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Whether to display detailed information about shard recovery\n * @param {<<api-param-type-boolean,`Boolean`>>} params.activeOnly - Display only those recoveries that are currently on-going\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.recovery = ca({\n  params: {\n    detailed: {\n      type: 'boolean',\n      'default': false\n    },\n    activeOnly: {\n      type: 'boolean',\n      'default': false,\n      name: 'active_only'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_recovery',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_recovery'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.refresh](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-refresh.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Force a refresh even if not required\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.refresh = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    force: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_refresh',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_refresh'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.segments](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-segments.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.segments = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_segments',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_segments'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.stats](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>} [params.level=indices] - Return stats aggregated at cluster, index or shard level\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned the specific metrics.\n */\napi.indices.prototype.stats = ca({\n  params: {\n    completionFields: {\n      type: 'list',\n      name: 'completion_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    fields: {\n      type: 'list'\n    },\n    groups: {\n      type: 'list'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    level: {\n      type: 'enum',\n      'default': 'indices',\n      options: [\n        'cluster',\n        'indices',\n        'shards'\n      ]\n    },\n    types: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_stats/<%=metric%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'filter_cache',\n            'flush',\n            'get',\n            'id_cache',\n            'indexing',\n            'merge',\n            'percolate',\n            'query_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_stats/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'filter_cache',\n            'flush',\n            'get',\n            'id_cache',\n            'indexing',\n            'merge',\n            'percolate',\n            'query_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_stats',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_stats'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.status](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-status.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.recovery - Return information about shard recovery\n * @param {<<api-param-type-boolean,`Boolean`>>} params.snapshot - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.status = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    recovery: {\n      type: 'boolean'\n    },\n    snapshot: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_status',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_status'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.updateAliases](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Request timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.indices.prototype.updateAliases = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_aliases'\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.upgrade](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/indices-upgrade.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Specify whether the request should block until the all segments are upgraded (default: true)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.upgrade = ca({\n  params: {\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      name: 'wait_for_completion'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_upgrade',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_upgrade'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.validateQuery](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/search-validate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return detailed information about the error\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded query definition (instead of using the request body)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n */\napi.indices.prototype.validateQuery = ca({\n  params: {\n    explain: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    source: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_validate/query'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [info](http://www.elastic.co/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.info = ca({\n  url: {\n    fmt: '/'\n  }\n});\n\n/**\n * Perform a [mget](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/docs-multi-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.mget = ca({\n  params: {\n    source: {\n      type: 'string'\n    },\n    fields: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mget'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mlt](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/search-more-like-this.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition\n * @param {<<api-param-type-number,`Number`>>} params.boostTerms - The boost factor\n * @param {<<api-param-type-number,`Number`>>} params.maxDocFreq - The word occurrence frequency as count: words with higher occurrence in the corpus will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.maxQueryTerms - The maximum query terms to be included in the generated query\n * @param {<<api-param-type-number,`Number`>>} params.maxWordLength - The minimum length of the word: longer words will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.minDocFreq - The word occurrence frequency as count: words with lower occurrence in the corpus will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.minTermFreq - The term frequency as percent: terms with lower occurence in the source document will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.minWordLength - The minimum length of the word: shorter words will be ignored\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.mltFields - Specific fields to perform the query against\n * @param {<<api-param-type-number,`Number`>>} params.percentTermsToMatch - How many terms have to match in order to consider the document a match (default: 0.3)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-number,`Number`>>} params.searchFrom - The offset from which to return results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.searchIndices - A comma-separated list of indices to perform the query against (default: the index containing the document)\n * @param {<<api-param-type-string,`String`>>} params.searchScroll - A scroll search request definition\n * @param {<<api-param-type-number,`Number`>>} params.searchSize - The number of documents to return (default: 10)\n * @param {<<api-param-type-string,`String`>>} params.searchSource - A specific search request definition (instead of using the request body)\n * @param {<<api-param-type-string,`String`>>} params.searchType - Specific search type (eg. `dfs_then_fetch`, `count`, etc)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.searchTypes - A comma-separated list of types to perform the query against (default: the same type as the document)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stopWords - A list of stop words to be ignored\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.mlt = ca({\n  params: {\n    source: {\n      type: 'string'\n    },\n    boostTerms: {\n      type: 'number',\n      name: 'boost_terms'\n    },\n    maxDocFreq: {\n      type: 'number',\n      name: 'max_doc_freq'\n    },\n    maxQueryTerms: {\n      type: 'number',\n      name: 'max_query_terms'\n    },\n    maxWordLength: {\n      type: 'number',\n      name: 'max_word_length'\n    },\n    minDocFreq: {\n      type: 'number',\n      name: 'min_doc_freq'\n    },\n    minTermFreq: {\n      type: 'number',\n      name: 'min_term_freq'\n    },\n    minWordLength: {\n      type: 'number',\n      name: 'min_word_length'\n    },\n    mltFields: {\n      type: 'list',\n      name: 'mlt_fields'\n    },\n    percentTermsToMatch: {\n      type: 'number',\n      name: 'percent_terms_to_match'\n    },\n    routing: {\n      type: 'string'\n    },\n    searchFrom: {\n      type: 'number',\n      name: 'search_from'\n    },\n    searchIndices: {\n      type: 'list',\n      name: 'search_indices'\n    },\n    searchScroll: {\n      type: 'string',\n      name: 'search_scroll'\n    },\n    searchSize: {\n      type: 'number',\n      name: 'search_size'\n    },\n    searchSource: {\n      type: 'string',\n      name: 'search_source'\n    },\n    searchType: {\n      type: 'string',\n      name: 'search_type'\n    },\n    searchTypes: {\n      type: 'list',\n      name: 'search_types'\n    },\n    stopWords: {\n      type: 'list',\n      name: 'stop_words'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_mlt',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [mpercolate](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated to use as default\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated to use as default.\n */\napi.mpercolate = ca({\n  params: {\n    source: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mpercolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mpercolate',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mpercolate'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [msearch](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/search-multi-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n */\napi.msearch = ca({\n  params: {\n    source: {\n      type: 'string'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_msearch'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mtermvectors](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/docs-multi-termvectors.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.ids - A comma-separated list of documents ids. You must define ids as parameter or set \"ids\" or \"docs\" in the request body\n * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n */\napi.mtermvectors = ca({\n  params: {\n    source: {\n      type: 'string'\n    },\n    ids: {\n      type: 'list',\n      required: false\n    },\n    termStatistics: {\n      type: 'boolean',\n      'default': false,\n      required: false,\n      name: 'term_statistics'\n    },\n    fieldStatistics: {\n      type: 'boolean',\n      'default': true,\n      required: false,\n      name: 'field_statistics'\n    },\n    fields: {\n      type: 'list',\n      required: false\n    },\n    offsets: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    positions: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    payloads: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    preference: {\n      type: 'string',\n      required: false\n    },\n    routing: {\n      type: 'string',\n      required: false\n    },\n    parent: {\n      type: 'string',\n      required: false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mtermvectors',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mtermvectors',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mtermvectors'\n    }\n  ],\n  method: 'POST'\n});\n\napi.nodes = namespace();\n\n/**\n * Perform a [nodes.hotThreads](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/cluster-nodes-hot-threads.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.interval - The interval for the second sampling of threads\n * @param {<<api-param-type-number,`Number`>>} params.snapshots - Number of samples of thread stacktrace (default: 10)\n * @param {<<api-param-type-number,`Number`>>} params.threads - Specify the number of threads to provide information for (default: 3)\n * @param {<<api-param-type-string,`String`>>} params.type - The type to sample (default: cpu)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.nodes.prototype.hotThreads = ca({\n  params: {\n    interval: {\n      type: 'time'\n    },\n    snapshots: {\n      type: 'number'\n    },\n    threads: {\n      type: 'number'\n    },\n    type: {\n      type: 'enum',\n      options: [\n        'cpu',\n        'wait',\n        'block'\n      ]\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/hotthreads',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/hotthreads'\n    }\n  ]\n});\n\n/**\n * Perform a [nodes.info](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/cluster-nodes-info.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - A comma-separated list of metrics you wish returned. Leave empty to return all.\n */\napi.nodes.prototype.info = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/<%=metric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            'settings',\n            'os',\n            'process',\n            'jvm',\n            'thread_pool',\n            'network',\n            'transport',\n            'http',\n            'plugins'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            'settings',\n            'os',\n            'process',\n            'jvm',\n            'thread_pool',\n            'network',\n            'transport',\n            'http',\n            'plugins'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes'\n    }\n  ]\n});\n\n/**\n * Perform a [nodes.shutdown](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/cluster-nodes-shutdown.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.delay - Set the delay for the operation (default: 1s)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.exit - Exit the JVM as well (default: true)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to perform the operation on; use `_local` to perform the operation on the node you're connected to, leave empty to perform the operation on all nodes\n */\napi.nodes.prototype.shutdown = ca({\n  params: {\n    delay: {\n      type: 'time'\n    },\n    exit: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/nodes/<%=nodeId%>/_shutdown',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_shutdown'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [nodes.stats](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/cluster-nodes-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>} [params.level=node] - Return indices stats aggregated at node, index or shard level\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indexMetric - Limit the information returned for `indices` metric to the specific index metrics. Isn't used if `indices` (or `all`) metric isn't specified.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.nodes.prototype.stats = ca({\n  params: {\n    completionFields: {\n      type: 'list',\n      name: 'completion_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    fields: {\n      type: 'list'\n    },\n    groups: {\n      type: 'boolean'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    level: {\n      type: 'enum',\n      'default': 'node',\n      options: [\n        'node',\n        'indices',\n        'shards'\n      ]\n    },\n    types: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>/<%=indexMetric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'network',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        },\n        indexMetric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'filter_cache',\n            'flush',\n            'get',\n            'id_cache',\n            'indexing',\n            'merge',\n            'percolate',\n            'query_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'network',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats/<%=metric%>/<%=indexMetric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'network',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        },\n        indexMetric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'filter_cache',\n            'flush',\n            'get',\n            'id_cache',\n            'indexing',\n            'merge',\n            'percolate',\n            'query_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'network',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats'\n    }\n  ]\n});\n\n/**\n * Perform a [percolate](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.percolateFormat - Return an array of matching query IDs instead of objects\n * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to percolate the document into. Defaults to index.\n * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to percolate document into. Defaults to type.\n * @param {<<api-param-type-string,`String`>>} params.percolateRouting - The routing value to use when percolating the existing document.\n * @param {<<api-param-type-string,`String`>>} params.percolatePreference - Which shard to prefer when executing the percolate request.\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being percolated.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated.\n * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n */\napi.percolate = ca({\n  params: {\n    source: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    percolateFormat: {\n      type: 'enum',\n      options: [\n        'ids'\n      ],\n      name: 'percolate_format'\n    },\n    percolateIndex: {\n      type: 'string',\n      name: 'percolate_index'\n    },\n    percolateType: {\n      type: 'string',\n      name: 'percolate_type'\n    },\n    percolateRouting: {\n      type: 'string',\n      name: 'percolate_routing'\n    },\n    percolatePreference: {\n      type: 'string',\n      name: 'percolate_preference'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_percolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [ping](http://www.elastic.co/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.ping = ca({\n  url: {\n    fmt: '/'\n  },\n  requestTimeout: 3000,\n  method: 'HEAD'\n});\n\n/**\n * Perform a [putScript](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.putScript = ca({\n  params: {\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [putTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.putTemplate = ca({\n  params: {\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [scroll](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.scrollId - The scroll ID\n */\napi.scroll = ca({\n  params: {\n    source: {\n      type: 'string'\n    },\n    scroll: {\n      type: 'duration'\n    },\n    scrollId: {\n      type: 'string',\n      name: 'scroll_id'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_search/scroll/<%=scrollId%>',\n      req: {\n        scrollId: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_search/scroll'\n    }\n  ],\n  paramAsBody: 'scrollId',\n  method: 'POST'\n});\n\n/**\n * Perform a [search](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/search-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields to return as the field data representation of a field for each hit\n * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indicesBoost - Comma-separated list of index boosts\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition using the Query DSL (instead of using request body)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n * @param {<<api-param-type-string,`String`>>} params.suggestField - Specify which field to use for suggestions\n * @param {<<api-param-type-string,`String`>>} [params.suggestMode=missing] - Specify suggest mode\n * @param {<<api-param-type-number,`Number`>>} params.suggestSize - How many suggestions to return in response\n * @param {<<api-param-type-string,`String`>>} params.suggestText - The source text for which the suggestions should be returned\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.trackScores - Whether to calculate and return scores even if they are not used for sorting\n * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n * @param {<<api-param-type-boolean,`Boolean`>>} params.queryCache - Specify if query cache should be used for this request or not, defaults to index level setting\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.search = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    from: {\n      type: 'number'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    indicesBoost: {\n      type: 'list',\n      name: 'indices_boost'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'duration'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    },\n    size: {\n      type: 'number'\n    },\n    sort: {\n      type: 'list'\n    },\n    source: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    terminateAfter: {\n      type: 'number',\n      name: 'terminate_after'\n    },\n    stats: {\n      type: 'list'\n    },\n    suggestField: {\n      type: 'string',\n      name: 'suggest_field'\n    },\n    suggestMode: {\n      type: 'enum',\n      'default': 'missing',\n      options: [\n        'missing',\n        'popular',\n        'always'\n      ],\n      name: 'suggest_mode'\n    },\n    suggestSize: {\n      type: 'number',\n      name: 'suggest_size'\n    },\n    suggestText: {\n      type: 'text',\n      name: 'suggest_text'\n    },\n    timeout: {\n      type: 'time'\n    },\n    trackScores: {\n      type: 'boolean',\n      name: 'track_scores'\n    },\n    version: {\n      type: 'boolean'\n    },\n    queryCache: {\n      type: 'boolean',\n      name: 'query_cache'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchExists](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/search-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded query definition (instead of using the request body)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n */\napi.searchExists = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    minScore: {\n      type: 'number',\n      name: 'min_score'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    source: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search/exists',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search/exists',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/exists'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchShards](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/search-shards.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.searchShards = ca({\n  params: {\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search_shards',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search_shards',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_search_shards'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.searchTemplate = ca({\n  params: {\n    source: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'duration'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search/template',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search/template',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/template'\n    }\n  ],\n  method: 'POST'\n});\n\napi.snapshot = namespace();\n\n/**\n * Perform a [snapshot.create](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype.create = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_create',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.createRepository](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.verify - Whether to verify the repository after creation\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n */\napi.snapshot.prototype.createRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    },\n    verify: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>',\n    req: {\n      repository: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.delete](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype['delete'] = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [snapshot.deleteRepository](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n */\napi.snapshot.prototype.deleteRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>',\n    req: {\n      repository: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [snapshot.get](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n */\napi.snapshot.prototype.get = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'list'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [snapshot.getRepository](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n */\napi.snapshot.prototype.getRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_snapshot/<%=repository%>',\n      req: {\n        repository: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot'\n    }\n  ]\n});\n\n/**\n * Perform a [snapshot.restore](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype.restore = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_restore',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.status](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n */\napi.snapshot.prototype.status = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_status',\n      req: {\n        repository: {\n          type: 'string'\n        },\n        snapshot: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot/<%=repository%>/_status',\n      req: {\n        repository: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot/_status'\n    }\n  ]\n});\n\n/**\n * Perform a [snapshot.verifyRepository](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n */\napi.snapshot.prototype.verifyRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/_verify',\n    req: {\n      repository: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [suggest](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/search-suggesters.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition (instead of using request body)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n */\napi.suggest = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    source: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_suggest',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_suggest'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [termvector](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/docs-termvectors.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition\n * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random).\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value.\n * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents.\n * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n * @param {<<api-param-type-string,`String`>>} params.id - The id of the document, when not specified a doc param should be supplied.\n */\napi.termvector = ca({\n  params: {\n    source: {\n      type: 'string'\n    },\n    termStatistics: {\n      type: 'boolean',\n      'default': false,\n      required: false,\n      name: 'term_statistics'\n    },\n    fieldStatistics: {\n      type: 'boolean',\n      'default': true,\n      required: false,\n      name: 'field_statistics'\n    },\n    fields: {\n      type: 'list',\n      required: false\n    },\n    offsets: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    positions: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    payloads: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    preference: {\n      type: 'string',\n      required: false\n    },\n    routing: {\n      type: 'string',\n      required: false\n    },\n    parent: {\n      type: 'string',\n      required: false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_termvector',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_termvector',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [update](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/docs-update.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.lang - The script language (default: groovy)\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-number,`Number`>>} params.retryOnConflict - Specify how many times should the operation be retried when a conflict occurs (default: 0)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {anything} params.script - The URL-encoded script definition (instead of using request body)\n * @param {anything} params.scriptId - The id of a stored script\n * @param {<<api-param-type-boolean,`Boolean`>>} params.scriptedUpsert - True if the script referenced in script or script_id should be called to perform inserts - defaults to false\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.update = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    fields: {\n      type: 'list'\n    },\n    lang: {\n      type: 'string'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    retryOnConflict: {\n      type: 'number',\n      name: 'retry_on_conflict'\n    },\n    routing: {\n      type: 'string'\n    },\n    script: {},\n    scriptId: {\n      name: 'script_id'\n    },\n    scriptedUpsert: {\n      type: 'boolean',\n      name: 'scripted_upsert'\n    },\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'duration'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_update',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [create](http://www.elastic.co/guide/en/elasticsearch/reference/1.4/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.create = ca.proxy(api.index, {\n  transform: function (params) {\n    params.op_type = 'create';\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/apis/1_3.js":"var ca = require('../client_action').factory;\nvar namespace = require('../client_action').namespaceFactory;\nvar api = module.exports = {};\n\napi._namespaces = ['cat', 'cluster', 'indices', 'nodes', 'snapshot'];\n\n/**\n * Perform a [bulk](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/docs-bulk.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Explicitely set the replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.type - Default document type for items which don't provide one\n * @param {<<api-param-type-string,`String`>>} params.index - Default index for items which don't provide one\n */\napi.bulk = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    type: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_bulk'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\napi.cat = namespace();\n\n/**\n * Perform a [cat.aliases](http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.cat.prototype.aliases = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/aliases/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/aliases'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.allocation](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/cat-allocation.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information\n */\napi.cat.prototype.allocation = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/allocation/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/allocation'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.count](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/cat-count.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.count = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/count/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/count'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.fielddata](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/cat-fielddata.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return the fielddata size\n */\napi.cat.prototype.fielddata = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    },\n    fields: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/fielddata/<%=fields%>',\n      req: {\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/fielddata'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.health](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/cat-health.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.ts=true] - Set to false to disable timestamping\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.health = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    ts: {\n      type: 'boolean',\n      'default': true\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/health'\n  }\n});\n\n/**\n * Perform a [cat.help](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/cat.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n */\napi.cat.prototype.help = ca({\n  params: {\n    help: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat'\n  }\n});\n\n/**\n * Perform a [cat.indices](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/cat-indices.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.pri - Set to true to return stats only for primary shards\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.indices = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    pri: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/indices/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/indices'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.master](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/cat-master.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.master = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/master'\n  }\n});\n\n/**\n * Perform a [cat.nodes](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/cat-nodes.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.nodes = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/nodes'\n  }\n});\n\n/**\n * Perform a [cat.pendingTasks](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/cat-pending-tasks.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.pendingTasks = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/pending_tasks'\n  }\n});\n\n/**\n * Perform a [cat.plugins](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/cat-plugins.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.plugins = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/plugins'\n  }\n});\n\n/**\n * Perform a [cat.recovery](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/cat-recovery.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.recovery = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/recovery/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/recovery'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.segments](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/cat-segments.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.v=true] - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.segments = ca({\n  params: {\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': true\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/segments/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/segments'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.shards](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/cat-shards.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.shards = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/shards/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/shards'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.threadPool](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/cat-thread-pool.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fullId - Enables displaying the complete node ids\n */\napi.cat.prototype.threadPool = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    },\n    fullId: {\n      type: 'boolean',\n      'default': false,\n      name: 'full_id'\n    }\n  },\n  url: {\n    fmt: '/_cat/thread_pool'\n  }\n});\n\n/**\n * Perform a [clearScroll](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.scrollId - A comma-separated list of scroll IDs to clear\n */\napi.clearScroll = ca({\n  urls: [\n    {\n      fmt: '/_search/scroll/<%=scrollId%>',\n      req: {\n        scrollId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/scroll'\n    }\n  ],\n  paramAsBody: 'scrollId',\n  method: 'DELETE'\n});\n\napi.cluster = namespace();\n\n/**\n * Perform a [cluster.getSettings](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.getSettings = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/settings'\n  }\n});\n\n/**\n * Perform a [cluster.health](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/cluster-health.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Specify the level of detail for returned information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-number,`Number`>>} params.waitForActiveShards - Wait until the specified number of shards is active\n * @param {<<api-param-type-string,`String`>>} params.waitForNodes - Wait until the specified number of nodes is available\n * @param {<<api-param-type-number,`Number`>>} params.waitForRelocatingShards - Wait until the specified number of relocating shards is finished\n * @param {<<api-param-type-string,`String`>>} params.waitForStatus - Wait until cluster is in a specific state\n * @param {<<api-param-type-string,`String`>>} params.index - Limit the information returned to a specific index\n */\napi.cluster.prototype.health = ca({\n  params: {\n    level: {\n      type: 'enum',\n      'default': 'cluster',\n      options: [\n        'cluster',\n        'indices',\n        'shards'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    },\n    waitForActiveShards: {\n      type: 'number',\n      name: 'wait_for_active_shards'\n    },\n    waitForNodes: {\n      type: 'string',\n      name: 'wait_for_nodes'\n    },\n    waitForRelocatingShards: {\n      type: 'number',\n      name: 'wait_for_relocating_shards'\n    },\n    waitForStatus: {\n      type: 'enum',\n      'default': null,\n      options: [\n        'green',\n        'yellow',\n        'red'\n      ],\n      name: 'wait_for_status'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/health/<%=index%>',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/health'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.pendingTasks](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/cluster-pending.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.cluster.prototype.pendingTasks = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_cluster/pending_tasks'\n  }\n});\n\n/**\n * Perform a [cluster.putSettings](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n */\napi.cluster.prototype.putSettings = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  url: {\n    fmt: '/_cluster/settings'\n  },\n  method: 'PUT'\n});\n\n/**\n * Perform a [cluster.reroute](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/cluster-reroute.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - Simulate the operation only and return the resulting state\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return an explanation of why the commands can or cannot be executed\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filterMetadata - Don't return cluster state metadata (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.reroute = ca({\n  params: {\n    dryRun: {\n      type: 'boolean',\n      name: 'dry_run'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    filterMetadata: {\n      type: 'boolean',\n      name: 'filter_metadata'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/reroute'\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [cluster.state](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/cluster-state.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n */\napi.cluster.prototype.state = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/state/<%=metric%>/<%=index%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'blocks',\n            'metadata',\n            'nodes',\n            'routing_table',\n            'master_node',\n            'version'\n          ]\n        },\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/state/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'blocks',\n            'metadata',\n            'nodes',\n            'routing_table',\n            'master_node',\n            'version'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/state'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.stats](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/cluster-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.cluster.prototype.stats = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/stats/nodes/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/stats'\n    }\n  ]\n});\n\n/**\n * Perform a [count](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/search-count.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded query definition (instead of using the request body)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n */\napi.count = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    minScore: {\n      type: 'number',\n      name: 'min_score'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    source: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_count'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [countPercolate](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to count percolate the document into. Defaults to index.\n * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to count percolate document into. Defaults to type.\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being count percolated.\n * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n */\napi.countPercolate = ca({\n  params: {\n    routing: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    percolateIndex: {\n      type: 'string',\n      name: 'percolate_index'\n    },\n    percolateType: {\n      type: 'string',\n      name: 'percolate_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate/count',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_percolate/count',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [delete](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/docs-delete.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Specific write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi['delete'] = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteByQuery](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/docs-delete-by-query.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-string,`String`>>} params.consistency - Specific write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded query definition (instead of using the request body)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the operation\n */\napi.deleteByQuery = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    source: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteScript](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.deleteScript = ca({\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.deleteTemplate = ca({\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [exists](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.exists = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [explain](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/search-explain.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer for the query string query\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The default field for query string query (default: _all)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded query definition (instead of using the request body)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.explain = ca({\n  params: {\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    fields: {\n      type: 'list'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    source: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_explain',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [get](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.get = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getScript](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.getScript = ca({\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getSource](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types\n */\napi.getSource = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.getTemplate = ca({\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [index](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.index = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'duration'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\napi.indices = namespace();\n\n/**\n * Perform a [indices.analyze](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-analyze.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The name of the analyzer to use\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.charFilters - A comma-separated list of character filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>} params.field - Use the analyzer configured for this field (instead of passing the analyzer name)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.filters - A comma-separated list of filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index to scope the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.preferLocal - With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)\n * @param {<<api-param-type-string,`String`>>} params.text - The text on which the analysis should be performed (when request body is not used)\n * @param {<<api-param-type-string,`String`>>} params.tokenizer - The name of the tokenizer to use for the analysis\n * @param {<<api-param-type-string,`String`>>} [params.format=detailed] - Format of the output\n */\napi.indices.prototype.analyze = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    charFilters: {\n      type: 'list',\n      name: 'char_filters'\n    },\n    field: {\n      type: 'string'\n    },\n    filters: {\n      type: 'list'\n    },\n    index: {\n      type: 'string'\n    },\n    preferLocal: {\n      type: 'boolean',\n      name: 'prefer_local'\n    },\n    text: {\n      type: 'string'\n    },\n    tokenizer: {\n      type: 'string'\n    },\n    format: {\n      type: 'enum',\n      'default': 'detailed',\n      options: [\n        'detailed',\n        'text'\n      ]\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_analyze',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_analyze'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.clearCache](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-clearcache.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fieldData - Clear field data\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fielddata - Clear field data\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to clear when using the `field_data` parameter (default: all)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filter - Clear filter caches\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filterCache - Clear filter caches\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filterKeys - A comma-separated list of keys to clear when using the `filter_cache` parameter (default: all)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.id - Clear ID caches for parent/child\n * @param {<<api-param-type-boolean,`Boolean`>>} params.idCache - Clear ID caches for parent/child\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index name to limit the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.recycler - Clear the recycler cache\n */\napi.indices.prototype.clearCache = ca({\n  params: {\n    fieldData: {\n      type: 'boolean',\n      name: 'field_data'\n    },\n    fielddata: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    filter: {\n      type: 'boolean'\n    },\n    filterCache: {\n      type: 'boolean',\n      name: 'filter_cache'\n    },\n    filterKeys: {\n      type: 'boolean',\n      name: 'filter_keys'\n    },\n    id: {\n      type: 'boolean'\n    },\n    idCache: {\n      type: 'boolean',\n      name: 'id_cache'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    index: {\n      type: 'list'\n    },\n    recycler: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_cache/clear',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cache/clear'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.close](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.close = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_close',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.create](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-create-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.create = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.delete](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-delete-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices\n */\napi.indices.prototype['delete'] = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteAlias](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.\n */\napi.indices.prototype.deleteAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_alias/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteMapping](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-delete-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to delete (supports wildcards); use `_all` to delete all document types in the specified indices.\n */\napi.indices.prototype.deleteMapping = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/_mapping',\n    req: {\n      index: {\n        type: 'list'\n      },\n      type: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.deleteTemplate = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteWarmer](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of warmer names to delete (supports wildcards); use `_all` to delete all warmers in the specified indices. You must specify a name either in the uri or in the parameters.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to delete warmers from (supports wildcards); use `_all` to perform the operation on all indices.\n */\napi.indices.prototype.deleteWarmer = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    name: {\n      type: 'list'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_warmer/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.exists](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-get-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to check\n */\napi.indices.prototype.exists = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsAlias](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.existsAlias = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': [\n        'open',\n        'closed'\n      ],\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_alias',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.existsTemplate = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsType](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-types-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` to check the types across all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to check\n */\napi.indices.prototype.existsType = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      type: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.flush](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-flush.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.full - If set to true a new index writer is created and settings that have been changed related to the index writer will be refreshed. Note: if a full flush is required for a setting to take effect this will be part of the settings update process and it not required to be executed by the user. (This setting can be considered as internal)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n */\napi.indices.prototype.flush = ca({\n  params: {\n    force: {\n      type: 'boolean'\n    },\n    full: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_flush',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_flush'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.getAlias](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.getAlias = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_alias',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getAliases](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to filter\n */\napi.indices.prototype.getAliases = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_aliases/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_aliases',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_aliases/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_aliases'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getFieldMapping](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-get-field-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether the default mapping values should be returned as well\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.field - A comma-separated list of fields\n */\napi.indices.prototype.getFieldMapping = ca({\n  params: {\n    includeDefaults: {\n      type: 'boolean',\n      name: 'include_defaults'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>/field/<%=field%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        field: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping/field/<%=field%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        field: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>/field/<%=field%>',\n      req: {\n        type: {\n          type: 'list'\n        },\n        field: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/field/<%=field%>',\n      req: {\n        field: {\n          type: 'list'\n        }\n      }\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getMapping](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-get-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n */\napi.indices.prototype.getMapping = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'list',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>',\n      req: {\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getSettings](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-get-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the settings that should be included\n */\napi.indices.prototype.getSettings = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': [\n        'open',\n        'closed'\n      ],\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.getTemplate = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_template/<%=name%>',\n      req: {\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_template'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getWarmer](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the warmer (supports wildcards); leave empty to get all warmers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n */\napi.indices.prototype.getWarmer = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.open](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.open = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'closed',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_open',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.optimize](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-optimize.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flush - Specify whether the index should be flushed after performing the operation (default: true)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.maxNumSegments - The number of segments the index should be merged into (default: dynamic)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyExpungeDeletes - Specify whether the operation should only expunge deleted documents\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForMerge - Specify whether the request should block until the merge process is finished (default: true)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Force a merge operation to run, even if there is a single segment in the index (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.optimize = ca({\n  params: {\n    flush: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    maxNumSegments: {\n      type: 'number',\n      name: 'max_num_segments'\n    },\n    onlyExpungeDeletes: {\n      type: 'boolean',\n      name: 'only_expunge_deletes'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    waitForMerge: {\n      type: 'boolean',\n      name: 'wait_for_merge'\n    },\n    force: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_optimize',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_optimize'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.putAlias](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the alias should point to (supports wildcards); use `_all` or omit to perform the operation on all indices.\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the alias to be created or updated\n */\napi.indices.prototype.putAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putMapping](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-put-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreConflicts - Specify whether to ignore conflicts while updating the mapping (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.\n * @param {<<api-param-type-string,`String`>>} params.type - The name of the document type\n */\napi.indices.prototype.putMapping = ca({\n  params: {\n    ignoreConflicts: {\n      type: 'boolean',\n      name: 'ignore_conflicts'\n    },\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>',\n      req: {\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putSettings](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.putSettings = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.order - The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.create - Whether the index template should only be added if new or can also replace an existing one\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.putTemplate = ca({\n  params: {\n    order: {\n      type: 'number'\n    },\n    create: {\n      type: 'boolean',\n      'default': false\n    },\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putWarmer](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed) in the search request to warm\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices in the search request to warm. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both, in the search request to warm.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the warmer\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types\n */\napi.indices.prototype.putWarmer = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer/<%=name%>',\n      req: {\n        name: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.recovery](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-recovery.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Whether to display detailed information about shard recovery\n * @param {<<api-param-type-boolean,`Boolean`>>} params.activeOnly - Display only those recoveries that are currently on-going\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.recovery = ca({\n  params: {\n    detailed: {\n      type: 'boolean',\n      'default': false\n    },\n    activeOnly: {\n      type: 'boolean',\n      'default': false,\n      name: 'active_only'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_recovery',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_recovery'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.refresh](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-refresh.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Force a refresh even if not required\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.refresh = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    force: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_refresh',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_refresh'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.segments](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-segments.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.segments = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_segments',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_segments'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.stats](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>} [params.level=indices] - Return stats aggregated at cluster, index or shard level\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned the specific metrics.\n */\napi.indices.prototype.stats = ca({\n  params: {\n    completionFields: {\n      type: 'list',\n      name: 'completion_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    fields: {\n      type: 'list'\n    },\n    groups: {\n      type: 'list'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    level: {\n      type: 'enum',\n      'default': 'indices',\n      options: [\n        'cluster',\n        'indices',\n        'shards'\n      ]\n    },\n    types: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_stats/<%=metric%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'filter_cache',\n            'flush',\n            'get',\n            'id_cache',\n            'indexing',\n            'merge',\n            'percolate',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_stats/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'filter_cache',\n            'flush',\n            'get',\n            'id_cache',\n            'indexing',\n            'merge',\n            'percolate',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_stats',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_stats'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.status](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-status.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.recovery - Return information about shard recovery\n * @param {<<api-param-type-boolean,`Boolean`>>} params.snapshot - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.status = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    recovery: {\n      type: 'boolean'\n    },\n    snapshot: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_status',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_status'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.updateAliases](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Request timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.indices.prototype.updateAliases = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_aliases'\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.validateQuery](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/search-validate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return detailed information about the error\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded query definition (instead of using the request body)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n */\napi.indices.prototype.validateQuery = ca({\n  params: {\n    explain: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    source: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_validate/query'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [info](http://www.elastic.co/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.info = ca({\n  url: {\n    fmt: '/'\n  }\n});\n\n/**\n * Perform a [mget](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/docs-multi-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.mget = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mget'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mlt](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/search-more-like-this.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.boostTerms - The boost factor\n * @param {<<api-param-type-number,`Number`>>} params.maxDocFreq - The word occurrence frequency as count: words with higher occurrence in the corpus will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.maxQueryTerms - The maximum query terms to be included in the generated query\n * @param {<<api-param-type-number,`Number`>>} params.maxWordLength - The minimum length of the word: longer words will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.minDocFreq - The word occurrence frequency as count: words with lower occurrence in the corpus will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.minTermFreq - The term frequency as percent: terms with lower occurence in the source document will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.minWordLength - The minimum length of the word: shorter words will be ignored\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.mltFields - Specific fields to perform the query against\n * @param {<<api-param-type-number,`Number`>>} params.percentTermsToMatch - How many terms have to match in order to consider the document a match (default: 0.3)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-number,`Number`>>} params.searchFrom - The offset from which to return results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.searchIndices - A comma-separated list of indices to perform the query against (default: the index containing the document)\n * @param {<<api-param-type-string,`String`>>} params.searchQueryHint - The search query hint\n * @param {<<api-param-type-string,`String`>>} params.searchScroll - A scroll search request definition\n * @param {<<api-param-type-number,`Number`>>} params.searchSize - The number of documents to return (default: 10)\n * @param {<<api-param-type-string,`String`>>} params.searchSource - A specific search request definition (instead of using the request body)\n * @param {<<api-param-type-string,`String`>>} params.searchType - Specific search type (eg. `dfs_then_fetch`, `count`, etc)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.searchTypes - A comma-separated list of types to perform the query against (default: the same type as the document)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stopWords - A list of stop words to be ignored\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.mlt = ca({\n  params: {\n    boostTerms: {\n      type: 'number',\n      name: 'boost_terms'\n    },\n    maxDocFreq: {\n      type: 'number',\n      name: 'max_doc_freq'\n    },\n    maxQueryTerms: {\n      type: 'number',\n      name: 'max_query_terms'\n    },\n    maxWordLength: {\n      type: 'number',\n      name: 'max_word_length'\n    },\n    minDocFreq: {\n      type: 'number',\n      name: 'min_doc_freq'\n    },\n    minTermFreq: {\n      type: 'number',\n      name: 'min_term_freq'\n    },\n    minWordLength: {\n      type: 'number',\n      name: 'min_word_length'\n    },\n    mltFields: {\n      type: 'list',\n      name: 'mlt_fields'\n    },\n    percentTermsToMatch: {\n      type: 'number',\n      name: 'percent_terms_to_match'\n    },\n    routing: {\n      type: 'string'\n    },\n    searchFrom: {\n      type: 'number',\n      name: 'search_from'\n    },\n    searchIndices: {\n      type: 'list',\n      name: 'search_indices'\n    },\n    searchQueryHint: {\n      type: 'string',\n      name: 'search_query_hint'\n    },\n    searchScroll: {\n      type: 'string',\n      name: 'search_scroll'\n    },\n    searchSize: {\n      type: 'number',\n      name: 'search_size'\n    },\n    searchSource: {\n      type: 'string',\n      name: 'search_source'\n    },\n    searchType: {\n      type: 'string',\n      name: 'search_type'\n    },\n    searchTypes: {\n      type: 'list',\n      name: 'search_types'\n    },\n    stopWords: {\n      type: 'list',\n      name: 'stop_words'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_mlt',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [mpercolate](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated to use as default\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated to use as default.\n */\napi.mpercolate = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mpercolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mpercolate',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mpercolate'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [msearch](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/search-multi-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n */\napi.msearch = ca({\n  params: {\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_msearch'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mtermvectors](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/docs-multi-termvectors.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.ids - A comma-separated list of documents ids. You must define ids as parameter or set \"ids\" or \"docs\" in the request body\n * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n * @param {<<api-param-type-string,`String`>>} params.id - The id of the document.\n */\napi.mtermvectors = ca({\n  params: {\n    ids: {\n      type: 'list',\n      required: false\n    },\n    termStatistics: {\n      type: 'boolean',\n      'default': false,\n      required: false,\n      name: 'term_statistics'\n    },\n    fieldStatistics: {\n      type: 'boolean',\n      'default': true,\n      required: false,\n      name: 'field_statistics'\n    },\n    fields: {\n      type: 'list',\n      required: false\n    },\n    offsets: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    positions: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    payloads: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    preference: {\n      type: 'string',\n      required: false\n    },\n    routing: {\n      type: 'string',\n      required: false\n    },\n    parent: {\n      type: 'string',\n      required: false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mtermvectors',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mtermvectors',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mtermvectors'\n    }\n  ],\n  method: 'POST'\n});\n\napi.nodes = namespace();\n\n/**\n * Perform a [nodes.hotThreads](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/cluster-nodes-hot-threads.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.interval - The interval for the second sampling of threads\n * @param {<<api-param-type-number,`Number`>>} params.snapshots - Number of samples of thread stacktrace (default: 10)\n * @param {<<api-param-type-number,`Number`>>} params.threads - Specify the number of threads to provide information for (default: 3)\n * @param {<<api-param-type-string,`String`>>} params.type - The type to sample (default: cpu)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.nodes.prototype.hotThreads = ca({\n  params: {\n    interval: {\n      type: 'time'\n    },\n    snapshots: {\n      type: 'number'\n    },\n    threads: {\n      type: 'number'\n    },\n    type: {\n      type: 'enum',\n      options: [\n        'cpu',\n        'wait',\n        'block'\n      ]\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/hotthreads',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/hotthreads'\n    }\n  ]\n});\n\n/**\n * Perform a [nodes.info](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/cluster-nodes-info.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - A comma-separated list of metrics you wish returned. Leave empty to return all.\n */\napi.nodes.prototype.info = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/<%=metric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            'settings',\n            'os',\n            'process',\n            'jvm',\n            'thread_pool',\n            'network',\n            'transport',\n            'http',\n            'plugins'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            'settings',\n            'os',\n            'process',\n            'jvm',\n            'thread_pool',\n            'network',\n            'transport',\n            'http',\n            'plugins'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes'\n    }\n  ]\n});\n\n/**\n * Perform a [nodes.shutdown](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/cluster-nodes-shutdown.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.delay - Set the delay for the operation (default: 1s)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.exit - Exit the JVM as well (default: true)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to perform the operation on; use `_local` to perform the operation on the node you're connected to, leave empty to perform the operation on all nodes\n */\napi.nodes.prototype.shutdown = ca({\n  params: {\n    delay: {\n      type: 'time'\n    },\n    exit: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/nodes/<%=nodeId%>/_shutdown',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_shutdown'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [nodes.stats](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/cluster-nodes-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>} [params.level=node] - Return indices stats aggregated at node, index or shard level\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indexMetric - Limit the information returned for `indices` metric to the specific index metrics. Isn't used if `indices` (or `all`) metric isn't specified.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.nodes.prototype.stats = ca({\n  params: {\n    completionFields: {\n      type: 'list',\n      name: 'completion_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    fields: {\n      type: 'list'\n    },\n    groups: {\n      type: 'boolean'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    level: {\n      type: 'enum',\n      'default': 'node',\n      options: [\n        'node',\n        'indices',\n        'shards'\n      ]\n    },\n    types: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>/<%=indexMetric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'network',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        },\n        indexMetric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'filter_cache',\n            'flush',\n            'get',\n            'id_cache',\n            'indexing',\n            'merge',\n            'percolate',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'network',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats/<%=metric%>/<%=indexMetric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'network',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        },\n        indexMetric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'filter_cache',\n            'flush',\n            'get',\n            'id_cache',\n            'indexing',\n            'merge',\n            'percolate',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'network',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats'\n    }\n  ]\n});\n\n/**\n * Perform a [percolate](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to percolate the document into. Defaults to index.\n * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to percolate document into. Defaults to type.\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being percolated.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated.\n * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n */\napi.percolate = ca({\n  params: {\n    routing: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    percolateIndex: {\n      type: 'string',\n      name: 'percolate_index'\n    },\n    percolateType: {\n      type: 'string',\n      name: 'percolate_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_percolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [ping](http://www.elastic.co/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.ping = ca({\n  url: {\n    fmt: '/'\n  },\n  requestTimeout: 3000,\n  method: 'HEAD'\n});\n\n/**\n * Perform a [putScript](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.putScript = ca({\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [putTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.putTemplate = ca({\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [scroll](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.scrollId - The scroll ID\n */\napi.scroll = ca({\n  params: {\n    scroll: {\n      type: 'duration'\n    },\n    scrollId: {\n      type: 'string',\n      name: 'scroll_id'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_search/scroll/<%=scrollId%>',\n      req: {\n        scrollId: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_search/scroll'\n    }\n  ],\n  paramAsBody: 'scrollId',\n  method: 'POST'\n});\n\n/**\n * Perform a [search](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/search-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields to return as the field data representation of a field for each hit\n * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indicesBoost - Comma-separated list of index boosts\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition using the Query DSL (instead of using request body)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n * @param {<<api-param-type-string,`String`>>} params.suggestField - Specify which field to use for suggestions\n * @param {<<api-param-type-string,`String`>>} [params.suggestMode=missing] - Specify suggest mode\n * @param {<<api-param-type-number,`Number`>>} params.suggestSize - How many suggestions to return in response\n * @param {<<api-param-type-string,`String`>>} params.suggestText - The source text for which the suggestions should be returned\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.trackScores - Whether to calculate and return scores even if they are not used for sorting\n * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.search = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    from: {\n      type: 'number'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    indicesBoost: {\n      type: 'list',\n      name: 'indices_boost'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'duration'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    },\n    size: {\n      type: 'number'\n    },\n    sort: {\n      type: 'list'\n    },\n    source: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    stats: {\n      type: 'list'\n    },\n    suggestField: {\n      type: 'string',\n      name: 'suggest_field'\n    },\n    suggestMode: {\n      type: 'enum',\n      'default': 'missing',\n      options: [\n        'missing',\n        'popular',\n        'always'\n      ],\n      name: 'suggest_mode'\n    },\n    suggestSize: {\n      type: 'number',\n      name: 'suggest_size'\n    },\n    suggestText: {\n      type: 'text',\n      name: 'suggest_text'\n    },\n    timeout: {\n      type: 'time'\n    },\n    trackScores: {\n      type: 'boolean',\n      name: 'track_scores'\n    },\n    version: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchShards](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/search-shards.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.searchShards = ca({\n  params: {\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search_shards',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search_shards',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_search_shards'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.searchTemplate = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'duration'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search/template',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search/template',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/template'\n    }\n  ],\n  method: 'POST'\n});\n\napi.snapshot = namespace();\n\n/**\n * Perform a [snapshot.create](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype.create = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_create',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.createRepository](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n */\napi.snapshot.prototype.createRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>',\n    req: {\n      repository: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.delete](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype['delete'] = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [snapshot.deleteRepository](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n */\napi.snapshot.prototype.deleteRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>',\n    req: {\n      repository: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [snapshot.get](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n */\napi.snapshot.prototype.get = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'list'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [snapshot.getRepository](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n */\napi.snapshot.prototype.getRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_snapshot/<%=repository%>',\n      req: {\n        repository: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot'\n    }\n  ]\n});\n\n/**\n * Perform a [snapshot.restore](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype.restore = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_restore',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.status](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n */\napi.snapshot.prototype.status = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_status',\n      req: {\n        repository: {\n          type: 'string'\n        },\n        snapshot: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot/<%=repository%>/_status',\n      req: {\n        repository: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot/_status'\n    }\n  ]\n});\n\n/**\n * Perform a [suggest](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/search-suggesters.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition (instead of using request body)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n */\napi.suggest = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    source: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_suggest',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_suggest'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [termvector](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/docs-termvectors.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random).\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value.\n * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents.\n * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n * @param {<<api-param-type-string,`String`>>} params.id - The id of the document.\n */\napi.termvector = ca({\n  params: {\n    termStatistics: {\n      type: 'boolean',\n      'default': false,\n      required: false,\n      name: 'term_statistics'\n    },\n    fieldStatistics: {\n      type: 'boolean',\n      'default': true,\n      required: false,\n      name: 'field_statistics'\n    },\n    fields: {\n      type: 'list',\n      required: false\n    },\n    offsets: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    positions: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    payloads: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    preference: {\n      type: 'string',\n      required: false\n    },\n    routing: {\n      type: 'string',\n      required: false\n    },\n    parent: {\n      type: 'string',\n      required: false\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_termvector',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [update](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/docs-update.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.lang - The script language (default: mvel)\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-number,`Number`>>} params.retryOnConflict - Specify how many times should the operation be retried when a conflict occurs (default: 0)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {anything} params.script - The URL-encoded script definition (instead of using request body)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.update = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    fields: {\n      type: 'list'\n    },\n    lang: {\n      type: 'string'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    retryOnConflict: {\n      type: 'number',\n      name: 'retry_on_conflict'\n    },\n    routing: {\n      type: 'string'\n    },\n    script: {},\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'duration'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_update',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [create](http://www.elastic.co/guide/en/elasticsearch/reference/1.3/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.create = ca.proxy(api.index, {\n  transform: function (params) {\n    params.op_type = 'create';\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/apis/1_2.js":"var ca = require('../client_action').factory;\nvar namespace = require('../client_action').namespaceFactory;\nvar api = module.exports = {};\n\napi._namespaces = ['cat', 'cluster', 'indices', 'nodes', 'snapshot'];\n\n/**\n * Perform a [bulk](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/docs-bulk.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Explicitely set the replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.type - Default document type for items which don't provide one\n * @param {<<api-param-type-string,`String`>>} params.index - Default index for items which don't provide one\n */\napi.bulk = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    type: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_bulk'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\napi.cat = namespace();\n\n/**\n * Perform a [cat.aliases](http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.cat.prototype.aliases = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/aliases/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/aliases'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.allocation](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/cat-allocation.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information\n */\napi.cat.prototype.allocation = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/allocation/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/allocation'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.count](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/cat-count.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.count = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/count/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/count'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.fielddata](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/cat-fielddata.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return the fielddata size\n */\napi.cat.prototype.fielddata = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    },\n    fields: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/fielddata/<%=fields%>',\n      req: {\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/fielddata'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.health](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/cat-health.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.ts=true] - Set to false to disable timestamping\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.health = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    ts: {\n      type: 'boolean',\n      'default': true\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/health'\n  }\n});\n\n/**\n * Perform a [cat.help](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/cat.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n */\napi.cat.prototype.help = ca({\n  params: {\n    help: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat'\n  }\n});\n\n/**\n * Perform a [cat.indices](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/cat-indices.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.pri - Set to true to return stats only for primary shards\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.indices = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    pri: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/indices/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/indices'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.master](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/cat-master.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.master = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/master'\n  }\n});\n\n/**\n * Perform a [cat.nodes](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/cat-nodes.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.nodes = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/nodes'\n  }\n});\n\n/**\n * Perform a [cat.pendingTasks](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/cat-pending-tasks.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.pendingTasks = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/pending_tasks'\n  }\n});\n\n/**\n * Perform a [cat.plugins](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/cat-plugins.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.plugins = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/plugins'\n  }\n});\n\n/**\n * Perform a [cat.recovery](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/cat-recovery.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.recovery = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/recovery/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/recovery'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.shards](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/cat-shards.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.shards = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/shards/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/shards'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.threadPool](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/cat-thread-pool.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fullId - Enables displaying the complete node ids\n */\napi.cat.prototype.threadPool = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    },\n    fullId: {\n      type: 'boolean',\n      'default': false,\n      name: 'full_id'\n    }\n  },\n  url: {\n    fmt: '/_cat/thread_pool'\n  }\n});\n\n/**\n * Perform a [clearScroll](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.scrollId - A comma-separated list of scroll IDs to clear\n */\napi.clearScroll = ca({\n  urls: [\n    {\n      fmt: '/_search/scroll/<%=scrollId%>',\n      req: {\n        scrollId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/scroll'\n    }\n  ],\n  paramAsBody: 'scrollId',\n  method: 'DELETE'\n});\n\napi.cluster = namespace();\n\n/**\n * Perform a [cluster.getSettings](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.getSettings = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/settings'\n  }\n});\n\n/**\n * Perform a [cluster.health](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/cluster-health.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Specify the level of detail for returned information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-number,`Number`>>} params.waitForActiveShards - Wait until the specified number of shards is active\n * @param {<<api-param-type-string,`String`>>} params.waitForNodes - Wait until the specified number of nodes is available\n * @param {<<api-param-type-number,`Number`>>} params.waitForRelocatingShards - Wait until the specified number of relocating shards is finished\n * @param {<<api-param-type-string,`String`>>} params.waitForStatus - Wait until cluster is in a specific state\n * @param {<<api-param-type-string,`String`>>} params.index - Limit the information returned to a specific index\n */\napi.cluster.prototype.health = ca({\n  params: {\n    level: {\n      type: 'enum',\n      'default': 'cluster',\n      options: [\n        'cluster',\n        'indices',\n        'shards'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    },\n    waitForActiveShards: {\n      type: 'number',\n      name: 'wait_for_active_shards'\n    },\n    waitForNodes: {\n      type: 'string',\n      name: 'wait_for_nodes'\n    },\n    waitForRelocatingShards: {\n      type: 'number',\n      name: 'wait_for_relocating_shards'\n    },\n    waitForStatus: {\n      type: 'enum',\n      'default': null,\n      options: [\n        'green',\n        'yellow',\n        'red'\n      ],\n      name: 'wait_for_status'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/health/<%=index%>',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/health'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.pendingTasks](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/cluster-pending.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.cluster.prototype.pendingTasks = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_cluster/pending_tasks'\n  }\n});\n\n/**\n * Perform a [cluster.putSettings](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n */\napi.cluster.prototype.putSettings = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  url: {\n    fmt: '/_cluster/settings'\n  },\n  method: 'PUT'\n});\n\n/**\n * Perform a [cluster.reroute](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/cluster-reroute.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - Simulate the operation only and return the resulting state\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return an explanation of why the commands can or cannot be executed\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filterMetadata - Don't return cluster state metadata (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.reroute = ca({\n  params: {\n    dryRun: {\n      type: 'boolean',\n      name: 'dry_run'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    filterMetadata: {\n      type: 'boolean',\n      name: 'filter_metadata'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/reroute'\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [cluster.state](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/cluster-state.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n */\napi.cluster.prototype.state = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/state/<%=metric%>/<%=index%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'blocks',\n            'metadata',\n            'nodes',\n            'routing_table',\n            'master_node',\n            'version'\n          ]\n        },\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/state/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'blocks',\n            'metadata',\n            'nodes',\n            'routing_table',\n            'master_node',\n            'version'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/state'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.stats](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/cluster-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.cluster.prototype.stats = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/stats/nodes/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/stats'\n    }\n  ]\n});\n\n/**\n * Perform a [count](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/search-count.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded query definition (instead of using the request body)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n */\napi.count = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    minScore: {\n      type: 'number',\n      name: 'min_score'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    source: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_count'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [countPercolate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to count percolate the document into. Defaults to index.\n * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to count percolate document into. Defaults to type.\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being count percolated.\n * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n */\napi.countPercolate = ca({\n  params: {\n    routing: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    percolateIndex: {\n      type: 'string',\n      name: 'percolate_index'\n    },\n    percolateType: {\n      type: 'string',\n      name: 'percolate_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate/count',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_percolate/count',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [delete](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/docs-delete.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Specific write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi['delete'] = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteByQuery](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/docs-delete-by-query.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-string,`String`>>} params.consistency - Specific write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded query definition (instead of using the request body)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the operation\n */\napi.deleteByQuery = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    source: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  method: 'DELETE'\n});\n\n/**\n * Perform a [exists](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.exists = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [explain](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/search-explain.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer for the query string query\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The default field for query string query (default: _all)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded query definition (instead of using the request body)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.explain = ca({\n  params: {\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    fields: {\n      type: 'list'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    source: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_explain',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [get](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.get = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getSource](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types\n */\napi.getSource = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [index](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.index = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'duration'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\napi.indices = namespace();\n\n/**\n * Perform a [indices.analyze](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-analyze.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The name of the analyzer to use\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.charFilters - A comma-separated list of character filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>} params.field - Use the analyzer configured for this field (instead of passing the analyzer name)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.filters - A comma-separated list of filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index to scope the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.preferLocal - With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)\n * @param {<<api-param-type-string,`String`>>} params.text - The text on which the analysis should be performed (when request body is not used)\n * @param {<<api-param-type-string,`String`>>} params.tokenizer - The name of the tokenizer to use for the analysis\n * @param {<<api-param-type-string,`String`>>} [params.format=detailed] - Format of the output\n */\napi.indices.prototype.analyze = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    charFilters: {\n      type: 'list',\n      name: 'char_filters'\n    },\n    field: {\n      type: 'string'\n    },\n    filters: {\n      type: 'list'\n    },\n    index: {\n      type: 'string'\n    },\n    preferLocal: {\n      type: 'boolean',\n      name: 'prefer_local'\n    },\n    text: {\n      type: 'string'\n    },\n    tokenizer: {\n      type: 'string'\n    },\n    format: {\n      type: 'enum',\n      'default': 'detailed',\n      options: [\n        'detailed',\n        'text'\n      ]\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_analyze',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_analyze'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.clearCache](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-clearcache.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fieldData - Clear field data\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fielddata - Clear field data\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to clear when using the `field_data` parameter (default: all)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filter - Clear filter caches\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filterCache - Clear filter caches\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filterKeys - A comma-separated list of keys to clear when using the `filter_cache` parameter (default: all)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.id - Clear ID caches for parent/child\n * @param {<<api-param-type-boolean,`Boolean`>>} params.idCache - Clear ID caches for parent/child\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index name to limit the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.recycler - Clear the recycler cache\n */\napi.indices.prototype.clearCache = ca({\n  params: {\n    fieldData: {\n      type: 'boolean',\n      name: 'field_data'\n    },\n    fielddata: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    filter: {\n      type: 'boolean'\n    },\n    filterCache: {\n      type: 'boolean',\n      name: 'filter_cache'\n    },\n    filterKeys: {\n      type: 'boolean',\n      name: 'filter_keys'\n    },\n    id: {\n      type: 'boolean'\n    },\n    idCache: {\n      type: 'boolean',\n      name: 'id_cache'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    index: {\n      type: 'list'\n    },\n    recycler: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_cache/clear',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cache/clear'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.close](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.close = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_close',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.create](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-create-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.create = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.delete](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-delete-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices\n */\napi.indices.prototype['delete'] = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteAlias](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.\n */\napi.indices.prototype.deleteAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_alias/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteMapping](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-delete-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to delete (supports wildcards); use `_all` to delete all document types in the specified indices.\n */\napi.indices.prototype.deleteMapping = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/_mapping',\n    req: {\n      index: {\n        type: 'list'\n      },\n      type: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteTemplate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.deleteTemplate = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteWarmer](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of warmer names to delete (supports wildcards); use `_all` to delete all warmers in the specified indices. You must specify a name either in the uri or in the parameters.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to delete warmers from (supports wildcards); use `_all` to perform the operation on all indices.\n */\napi.indices.prototype.deleteWarmer = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    name: {\n      type: 'list'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_warmer/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.exists](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-get-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to check\n */\napi.indices.prototype.exists = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsAlias](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.existsAlias = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': [\n        'open',\n        'closed'\n      ],\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_alias',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsTemplate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.existsTemplate = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsType](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-types-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` to check the types across all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to check\n */\napi.indices.prototype.existsType = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      type: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.flush](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-flush.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.full - If set to true a new index writer is created and settings that have been changed related to the index writer will be refreshed. Note: if a full flush is required for a setting to take effect this will be part of the settings update process and it not required to be executed by the user. (This setting can be considered as internal)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n */\napi.indices.prototype.flush = ca({\n  params: {\n    force: {\n      type: 'boolean'\n    },\n    full: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_flush',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_flush'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.getAlias](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.getAlias = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_alias',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getAliases](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to filter\n */\napi.indices.prototype.getAliases = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_aliases/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_aliases',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_aliases/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_aliases'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getFieldMapping](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-get-field-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether the default mapping values should be returned as well\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.field - A comma-separated list of fields\n */\napi.indices.prototype.getFieldMapping = ca({\n  params: {\n    includeDefaults: {\n      type: 'boolean',\n      name: 'include_defaults'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>/field/<%=field%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        field: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping/field/<%=field%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        field: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>/field/<%=field%>',\n      req: {\n        type: {\n          type: 'list'\n        },\n        field: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/field/<%=field%>',\n      req: {\n        field: {\n          type: 'list'\n        }\n      }\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getMapping](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-get-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n */\napi.indices.prototype.getMapping = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>',\n      req: {\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getSettings](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-get-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the settings that should be included\n */\napi.indices.prototype.getSettings = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': [\n        'open',\n        'closed'\n      ],\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getTemplate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.getTemplate = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_template/<%=name%>',\n      req: {\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_template'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getWarmer](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the warmer (supports wildcards); leave empty to get all warmers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n */\napi.indices.prototype.getWarmer = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.open](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.open = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'closed',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_open',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.optimize](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-optimize.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flush - Specify whether the index should be flushed after performing the operation (default: true)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.maxNumSegments - The number of segments the index should be merged into (default: dynamic)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyExpungeDeletes - Specify whether the operation should only expunge deleted documents\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForMerge - Specify whether the request should block until the merge process is finished (default: true)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Force a merge operation to run, even if there is a single segment in the index (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.optimize = ca({\n  params: {\n    flush: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    maxNumSegments: {\n      type: 'number',\n      name: 'max_num_segments'\n    },\n    onlyExpungeDeletes: {\n      type: 'boolean',\n      name: 'only_expunge_deletes'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    waitForMerge: {\n      type: 'boolean',\n      name: 'wait_for_merge'\n    },\n    force: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_optimize',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_optimize'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.putAlias](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the alias should point to (supports wildcards); use `_all` or omit to perform the operation on all indices.\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the alias to be created or updated\n */\napi.indices.prototype.putAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putMapping](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-put-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreConflicts - Specify whether to ignore conflicts while updating the mapping (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.\n * @param {<<api-param-type-string,`String`>>} params.type - The name of the document type\n */\napi.indices.prototype.putMapping = ca({\n  params: {\n    ignoreConflicts: {\n      type: 'boolean',\n      name: 'ignore_conflicts'\n    },\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>',\n      req: {\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putSettings](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.putSettings = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putTemplate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.order - The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.putTemplate = ca({\n  params: {\n    order: {\n      type: 'number'\n    },\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putWarmer](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed) in the search request to warm\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices in the search request to warm. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both, in the search request to warm.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the warmer\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types\n */\napi.indices.prototype.putWarmer = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer/<%=name%>',\n      req: {\n        name: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.recovery](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-recovery.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Whether to display detailed information about shard recovery\n * @param {<<api-param-type-boolean,`Boolean`>>} params.activeOnly - Display only those recoveries that are currently on-going\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.recovery = ca({\n  params: {\n    detailed: {\n      type: 'boolean',\n      'default': false\n    },\n    activeOnly: {\n      type: 'boolean',\n      'default': false,\n      name: 'active_only'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_recovery',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_recovery'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.refresh](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-refresh.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Force a refresh even if not required\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.refresh = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    force: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_refresh',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_refresh'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.segments](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-segments.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.segments = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_segments',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_segments'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.stats](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>} [params.level=indices] - Return stats aggregated at cluster, index or shard level\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned the specific metrics.\n */\napi.indices.prototype.stats = ca({\n  params: {\n    completionFields: {\n      type: 'list',\n      name: 'completion_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    fields: {\n      type: 'list'\n    },\n    groups: {\n      type: 'list'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    level: {\n      type: 'enum',\n      'default': 'indices',\n      options: [\n        'cluster',\n        'indices',\n        'shards'\n      ]\n    },\n    types: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_stats/<%=metric%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'filter_cache',\n            'flush',\n            'get',\n            'id_cache',\n            'indexing',\n            'merge',\n            'percolate',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_stats/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'filter_cache',\n            'flush',\n            'get',\n            'id_cache',\n            'indexing',\n            'merge',\n            'percolate',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_stats',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_stats'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.status](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-status.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.recovery - Return information about shard recovery\n * @param {<<api-param-type-boolean,`Boolean`>>} params.snapshot - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.status = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    recovery: {\n      type: 'boolean'\n    },\n    snapshot: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_status',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_status'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.updateAliases](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Request timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.indices.prototype.updateAliases = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_aliases'\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.validateQuery](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/search-validate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return detailed information about the error\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded query definition (instead of using the request body)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n */\napi.indices.prototype.validateQuery = ca({\n  params: {\n    explain: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    source: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_validate/query'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [info](http://www.elasticsearch.org/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.info = ca({\n  url: {\n    fmt: '/'\n  }\n});\n\n/**\n * Perform a [mget](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/docs-multi-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.mget = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mget'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mlt](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/search-more-like-this.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.boostTerms - The boost factor\n * @param {<<api-param-type-number,`Number`>>} params.maxDocFreq - The word occurrence frequency as count: words with higher occurrence in the corpus will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.maxQueryTerms - The maximum query terms to be included in the generated query\n * @param {<<api-param-type-number,`Number`>>} params.maxWordLength - The minimum length of the word: longer words will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.minDocFreq - The word occurrence frequency as count: words with lower occurrence in the corpus will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.minTermFreq - The term frequency as percent: terms with lower occurence in the source document will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.minWordLength - The minimum length of the word: shorter words will be ignored\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.mltFields - Specific fields to perform the query against\n * @param {<<api-param-type-number,`Number`>>} params.percentTermsToMatch - How many terms have to match in order to consider the document a match (default: 0.3)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-number,`Number`>>} params.searchFrom - The offset from which to return results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.searchIndices - A comma-separated list of indices to perform the query against (default: the index containing the document)\n * @param {<<api-param-type-string,`String`>>} params.searchQueryHint - The search query hint\n * @param {<<api-param-type-string,`String`>>} params.searchScroll - A scroll search request definition\n * @param {<<api-param-type-number,`Number`>>} params.searchSize - The number of documents to return (default: 10)\n * @param {<<api-param-type-string,`String`>>} params.searchSource - A specific search request definition (instead of using the request body)\n * @param {<<api-param-type-string,`String`>>} params.searchType - Specific search type (eg. `dfs_then_fetch`, `count`, etc)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.searchTypes - A comma-separated list of types to perform the query against (default: the same type as the document)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stopWords - A list of stop words to be ignored\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.mlt = ca({\n  params: {\n    boostTerms: {\n      type: 'number',\n      name: 'boost_terms'\n    },\n    maxDocFreq: {\n      type: 'number',\n      name: 'max_doc_freq'\n    },\n    maxQueryTerms: {\n      type: 'number',\n      name: 'max_query_terms'\n    },\n    maxWordLength: {\n      type: 'number',\n      name: 'max_word_length'\n    },\n    minDocFreq: {\n      type: 'number',\n      name: 'min_doc_freq'\n    },\n    minTermFreq: {\n      type: 'number',\n      name: 'min_term_freq'\n    },\n    minWordLength: {\n      type: 'number',\n      name: 'min_word_length'\n    },\n    mltFields: {\n      type: 'list',\n      name: 'mlt_fields'\n    },\n    percentTermsToMatch: {\n      type: 'number',\n      name: 'percent_terms_to_match'\n    },\n    routing: {\n      type: 'string'\n    },\n    searchFrom: {\n      type: 'number',\n      name: 'search_from'\n    },\n    searchIndices: {\n      type: 'list',\n      name: 'search_indices'\n    },\n    searchQueryHint: {\n      type: 'string',\n      name: 'search_query_hint'\n    },\n    searchScroll: {\n      type: 'string',\n      name: 'search_scroll'\n    },\n    searchSize: {\n      type: 'number',\n      name: 'search_size'\n    },\n    searchSource: {\n      type: 'string',\n      name: 'search_source'\n    },\n    searchType: {\n      type: 'string',\n      name: 'search_type'\n    },\n    searchTypes: {\n      type: 'list',\n      name: 'search_types'\n    },\n    stopWords: {\n      type: 'list',\n      name: 'stop_words'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_mlt',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [mpercolate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated to use as default\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated to use as default.\n */\napi.mpercolate = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mpercolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mpercolate',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mpercolate'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [msearch](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/search-multi-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n */\napi.msearch = ca({\n  params: {\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_msearch'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mtermvectors](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/docs-multi-termvectors.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.ids - A comma-separated list of documents ids. You must define ids as parameter or set \"ids\" or \"docs\" in the request body\n * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n * @param {<<api-param-type-string,`String`>>} params.id - The id of the document.\n */\napi.mtermvectors = ca({\n  params: {\n    ids: {\n      type: 'list',\n      required: false\n    },\n    termStatistics: {\n      type: 'boolean',\n      'default': false,\n      required: false,\n      name: 'term_statistics'\n    },\n    fieldStatistics: {\n      type: 'boolean',\n      'default': true,\n      required: false,\n      name: 'field_statistics'\n    },\n    fields: {\n      type: 'list',\n      required: false\n    },\n    offsets: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    positions: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    payloads: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    preference: {\n      type: 'string',\n      required: false\n    },\n    routing: {\n      type: 'string',\n      required: false\n    },\n    parent: {\n      type: 'string',\n      required: false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mtermvectors',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mtermvectors',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mtermvectors'\n    }\n  ],\n  method: 'POST'\n});\n\napi.nodes = namespace();\n\n/**\n * Perform a [nodes.hotThreads](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/cluster-nodes-hot-threads.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.interval - The interval for the second sampling of threads\n * @param {<<api-param-type-number,`Number`>>} params.snapshots - Number of samples of thread stacktrace (default: 10)\n * @param {<<api-param-type-number,`Number`>>} params.threads - Specify the number of threads to provide information for (default: 3)\n * @param {<<api-param-type-string,`String`>>} params.type - The type to sample (default: cpu)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.nodes.prototype.hotThreads = ca({\n  params: {\n    interval: {\n      type: 'time'\n    },\n    snapshots: {\n      type: 'number'\n    },\n    threads: {\n      type: 'number'\n    },\n    type: {\n      type: 'enum',\n      options: [\n        'cpu',\n        'wait',\n        'block'\n      ]\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/hotthreads',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/hotthreads'\n    }\n  ]\n});\n\n/**\n * Perform a [nodes.info](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/cluster-nodes-info.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - A comma-separated list of metrics you wish returned. Leave empty to return all.\n */\napi.nodes.prototype.info = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/<%=metric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            'settings',\n            'os',\n            'process',\n            'jvm',\n            'thread_pool',\n            'network',\n            'transport',\n            'http',\n            'plugins'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            'settings',\n            'os',\n            'process',\n            'jvm',\n            'thread_pool',\n            'network',\n            'transport',\n            'http',\n            'plugins'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes'\n    }\n  ]\n});\n\n/**\n * Perform a [nodes.shutdown](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/cluster-nodes-shutdown.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.delay - Set the delay for the operation (default: 1s)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.exit - Exit the JVM as well (default: true)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to perform the operation on; use `_local` to perform the operation on the node you're connected to, leave empty to perform the operation on all nodes\n */\napi.nodes.prototype.shutdown = ca({\n  params: {\n    delay: {\n      type: 'time'\n    },\n    exit: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/nodes/<%=nodeId%>/_shutdown',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_shutdown'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [nodes.stats](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/cluster-nodes-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>} [params.level=node] - Return indices stats aggregated at node, index or shard level\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indexMetric - Limit the information returned for `indices` metric to the specific index metrics. Isn't used if `indices` (or `all`) metric isn't specified.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.nodes.prototype.stats = ca({\n  params: {\n    completionFields: {\n      type: 'list',\n      name: 'completion_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    fields: {\n      type: 'list'\n    },\n    groups: {\n      type: 'boolean'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    level: {\n      type: 'enum',\n      'default': 'node',\n      options: [\n        'node',\n        'indices',\n        'shards'\n      ]\n    },\n    types: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>/<%=indexMetric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'network',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        },\n        indexMetric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'filter_cache',\n            'flush',\n            'get',\n            'id_cache',\n            'indexing',\n            'merge',\n            'percolate',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'network',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats/<%=metric%>/<%=indexMetric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'network',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        },\n        indexMetric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'filter_cache',\n            'flush',\n            'get',\n            'id_cache',\n            'indexing',\n            'merge',\n            'percolate',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'network',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats'\n    }\n  ]\n});\n\n/**\n * Perform a [percolate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to percolate the document into. Defaults to index.\n * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to percolate document into. Defaults to type.\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being percolated.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated.\n * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n */\napi.percolate = ca({\n  params: {\n    routing: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    percolateIndex: {\n      type: 'string',\n      name: 'percolate_index'\n    },\n    percolateType: {\n      type: 'string',\n      name: 'percolate_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_percolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [ping](http://www.elasticsearch.org/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.ping = ca({\n  url: {\n    fmt: '/'\n  },\n  requestTimeout: 3000,\n  method: 'HEAD'\n});\n\n/**\n * Perform a [scroll](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.scrollId - The scroll ID\n */\napi.scroll = ca({\n  params: {\n    scroll: {\n      type: 'duration'\n    },\n    scrollId: {\n      type: 'string',\n      name: 'scroll_id'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_search/scroll/<%=scrollId%>',\n      req: {\n        scrollId: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_search/scroll'\n    }\n  ],\n  paramAsBody: 'scrollId',\n  method: 'POST'\n});\n\n/**\n * Perform a [search](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/search-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return as part of a hit\n * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indicesBoost - Comma-separated list of index boosts\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition using the Query DSL (instead of using request body)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n * @param {<<api-param-type-string,`String`>>} params.suggestField - Specify which field to use for suggestions\n * @param {<<api-param-type-string,`String`>>} [params.suggestMode=missing] - Specify suggest mode\n * @param {<<api-param-type-number,`Number`>>} params.suggestSize - How many suggestions to return in response\n * @param {<<api-param-type-string,`String`>>} params.suggestText - The source text for which the suggestions should be returned\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.trackScores - Whether to calculate and return scores even if they are not used for sorting\n * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.search = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    from: {\n      type: 'number'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    indicesBoost: {\n      type: 'list',\n      name: 'indices_boost'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'duration'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    },\n    size: {\n      type: 'number'\n    },\n    sort: {\n      type: 'list'\n    },\n    source: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    stats: {\n      type: 'list'\n    },\n    suggestField: {\n      type: 'string',\n      name: 'suggest_field'\n    },\n    suggestMode: {\n      type: 'enum',\n      'default': 'missing',\n      options: [\n        'missing',\n        'popular',\n        'always'\n      ],\n      name: 'suggest_mode'\n    },\n    suggestSize: {\n      type: 'number',\n      name: 'suggest_size'\n    },\n    suggestText: {\n      type: 'text',\n      name: 'suggest_text'\n    },\n    timeout: {\n      type: 'time'\n    },\n    trackScores: {\n      type: 'boolean',\n      name: 'track_scores'\n    },\n    version: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchShards](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/search-shards.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.searchShards = ca({\n  params: {\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search_shards',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search_shards',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_search_shards'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchTemplate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.searchTemplate = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'duration'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search/template',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search/template',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/template'\n    }\n  ],\n  method: 'POST'\n});\n\napi.snapshot = namespace();\n\n/**\n * Perform a [snapshot.create](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype.create = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_create',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.createRepository](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n */\napi.snapshot.prototype.createRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>',\n    req: {\n      repository: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.delete](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype['delete'] = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [snapshot.deleteRepository](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n */\napi.snapshot.prototype.deleteRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>',\n    req: {\n      repository: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [snapshot.get](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n */\napi.snapshot.prototype.get = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'list'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [snapshot.getRepository](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n */\napi.snapshot.prototype.getRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_snapshot/<%=repository%>',\n      req: {\n        repository: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot'\n    }\n  ]\n});\n\n/**\n * Perform a [snapshot.restore](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype.restore = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_restore',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.status](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n */\napi.snapshot.prototype.status = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_status',\n      req: {\n        repository: {\n          type: 'string'\n        },\n        snapshot: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot/<%=repository%>/_status',\n      req: {\n        repository: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot/_status'\n    }\n  ]\n});\n\n/**\n * Perform a [suggest](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/search-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition (instead of using request body)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n */\napi.suggest = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    source: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_suggest',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_suggest'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [termvector](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/docs-termvectors.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random).\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value.\n * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents.\n * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n * @param {<<api-param-type-string,`String`>>} params.id - The id of the document.\n */\napi.termvector = ca({\n  params: {\n    termStatistics: {\n      type: 'boolean',\n      'default': false,\n      required: false,\n      name: 'term_statistics'\n    },\n    fieldStatistics: {\n      type: 'boolean',\n      'default': true,\n      required: false,\n      name: 'field_statistics'\n    },\n    fields: {\n      type: 'list',\n      required: false\n    },\n    offsets: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    positions: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    payloads: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    preference: {\n      type: 'string',\n      required: false\n    },\n    routing: {\n      type: 'string',\n      required: false\n    },\n    parent: {\n      type: 'string',\n      required: false\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_termvector',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [update](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/docs-update.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.lang - The script language (default: mvel)\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-number,`Number`>>} params.retryOnConflict - Specify how many times should the operation be retried when a conflict occurs (default: 0)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {anything} params.script - The URL-encoded script definition (instead of using request body)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.update = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    fields: {\n      type: 'list'\n    },\n    lang: {\n      type: 'string'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    retryOnConflict: {\n      type: 'number',\n      name: 'retry_on_conflict'\n    },\n    routing: {\n      type: 'string'\n    },\n    script: {},\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'duration'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_update',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [create](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.2/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.create = ca.proxy(api.index, {\n  transform: function (params) {\n    params.op_type = 'create';\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/apis/1_1.js":"var ca = require('../client_action').factory;\nvar namespace = require('../client_action').namespaceFactory;\nvar api = module.exports = {};\n\napi._namespaces = ['cat', 'cluster', 'indices', 'nodes', 'snapshot'];\n\n/**\n * Perform a [bulk](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/docs-bulk.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Explicitely set the replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.type - Default document type for items which don't provide one\n * @param {<<api-param-type-string,`String`>>} params.index - Default index for items which don't provide one\n */\napi.bulk = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    type: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_bulk'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\napi.cat = namespace();\n\n/**\n * Perform a [cat.aliases](http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.cat.prototype.aliases = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/aliases/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/aliases'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.allocation](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/cat-allocation.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information\n */\napi.cat.prototype.allocation = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/allocation/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/allocation'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.count](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/cat-count.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.count = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/count/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/count'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.health](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/cat-health.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.ts=true] - Set to false to disable timestamping\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.health = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    ts: {\n      type: 'boolean',\n      'default': true\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/health'\n  }\n});\n\n/**\n * Perform a [cat.help](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/cat.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n */\napi.cat.prototype.help = ca({\n  params: {\n    help: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat'\n  }\n});\n\n/**\n * Perform a [cat.indices](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/cat-indices.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.pri - Set to true to return stats only for primary shards\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.indices = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    pri: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/indices/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/indices'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.master](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/cat-master.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.master = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/master'\n  }\n});\n\n/**\n * Perform a [cat.nodes](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/cat-nodes.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.nodes = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/nodes'\n  }\n});\n\n/**\n * Perform a [cat.pendingTasks](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/cat-pending-tasks.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.pendingTasks = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/pending_tasks'\n  }\n});\n\n/**\n * Perform a [cat.plugins](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/cat-plugins.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.plugins = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/plugins'\n  }\n});\n\n/**\n * Perform a [cat.recovery](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/cat-recovery.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.recovery = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/recovery/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/recovery'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.shards](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/cat-shards.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.shards = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/shards/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/shards'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.threadPool](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/cat-thread-pool.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fullId - Enables displaying the complete node ids\n */\napi.cat.prototype.threadPool = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    },\n    fullId: {\n      type: 'boolean',\n      'default': false,\n      name: 'full_id'\n    }\n  },\n  url: {\n    fmt: '/_cat/thread_pool'\n  }\n});\n\n/**\n * Perform a [clearScroll](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.scrollId - A comma-separated list of scroll IDs to clear\n */\napi.clearScroll = ca({\n  urls: [\n    {\n      fmt: '/_search/scroll/<%=scrollId%>',\n      req: {\n        scrollId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/scroll'\n    }\n  ],\n  paramAsBody: 'scrollId',\n  method: 'DELETE'\n});\n\napi.cluster = namespace();\n\n/**\n * Perform a [cluster.getSettings](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.getSettings = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/settings'\n  }\n});\n\n/**\n * Perform a [cluster.health](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/cluster-health.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Specify the level of detail for returned information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-number,`Number`>>} params.waitForActiveShards - Wait until the specified number of shards is active\n * @param {<<api-param-type-string,`String`>>} params.waitForNodes - Wait until the specified number of nodes is available\n * @param {<<api-param-type-number,`Number`>>} params.waitForRelocatingShards - Wait until the specified number of relocating shards is finished\n * @param {<<api-param-type-string,`String`>>} params.waitForStatus - Wait until cluster is in a specific state\n * @param {<<api-param-type-string,`String`>>} params.index - Limit the information returned to a specific index\n */\napi.cluster.prototype.health = ca({\n  params: {\n    level: {\n      type: 'enum',\n      'default': 'cluster',\n      options: [\n        'cluster',\n        'indices',\n        'shards'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    },\n    waitForActiveShards: {\n      type: 'number',\n      name: 'wait_for_active_shards'\n    },\n    waitForNodes: {\n      type: 'string',\n      name: 'wait_for_nodes'\n    },\n    waitForRelocatingShards: {\n      type: 'number',\n      name: 'wait_for_relocating_shards'\n    },\n    waitForStatus: {\n      type: 'enum',\n      'default': null,\n      options: [\n        'green',\n        'yellow',\n        'red'\n      ],\n      name: 'wait_for_status'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/health/<%=index%>',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/health'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.pendingTasks](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/cluster-pending.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.cluster.prototype.pendingTasks = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_cluster/pending_tasks'\n  }\n});\n\n/**\n * Perform a [cluster.putSettings](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n */\napi.cluster.prototype.putSettings = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  url: {\n    fmt: '/_cluster/settings'\n  },\n  method: 'PUT'\n});\n\n/**\n * Perform a [cluster.reroute](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/cluster-reroute.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - Simulate the operation only and return the resulting state\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return an explanation of why the commands can or cannot be executed\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filterMetadata - Don't return cluster state metadata (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.reroute = ca({\n  params: {\n    dryRun: {\n      type: 'boolean',\n      name: 'dry_run'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    filterMetadata: {\n      type: 'boolean',\n      name: 'filter_metadata'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/reroute'\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [cluster.state](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/cluster-state.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indexTemplates - A comma separated list to return specific index templates when returning metadata\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n */\napi.cluster.prototype.state = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    indexTemplates: {\n      type: 'list',\n      name: 'index_templates'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/state/<%=metric%>/<%=index%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'blocks',\n            'metadata',\n            'nodes',\n            'routing_table',\n            'master_node',\n            'version'\n          ]\n        },\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/state/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'blocks',\n            'metadata',\n            'nodes',\n            'routing_table',\n            'master_node',\n            'version'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/state'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.stats](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/cluster-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.cluster.prototype.stats = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/stats/nodes/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/stats'\n    }\n  ]\n});\n\n/**\n * Perform a [count](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/search-count.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded query definition (instead of using the request body)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n */\napi.count = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    minScore: {\n      type: 'number',\n      name: 'min_score'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    source: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_count'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [countPercolate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to count percolate the document into. Defaults to index.\n * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to count percolate document into. Defaults to type.\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being count percolated.\n * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n */\napi.countPercolate = ca({\n  params: {\n    routing: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    percolateIndex: {\n      type: 'string',\n      name: 'percolate_index'\n    },\n    percolateType: {\n      type: 'string',\n      name: 'percolate_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate/count',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_percolate/count',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [delete](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/docs-delete.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Specific write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi['delete'] = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteByQuery](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/docs-delete-by-query.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-string,`String`>>} params.consistency - Specific write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded query definition (instead of using the request body)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the operation\n */\napi.deleteByQuery = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    source: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  method: 'DELETE'\n});\n\n/**\n * Perform a [exists](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.exists = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [explain](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/search-explain.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer for the query string query\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The default field for query string query (default: _all)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded query definition (instead of using the request body)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.explain = ca({\n  params: {\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    fields: {\n      type: 'list'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    source: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_explain',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [get](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.get = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getSource](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types\n */\napi.getSource = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [index](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.index = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'duration'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\napi.indices = namespace();\n\n/**\n * Perform a [indices.analyze](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-analyze.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The name of the analyzer to use\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.charFilters - A comma-separated list of character filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>} params.field - Use the analyzer configured for this field (instead of passing the analyzer name)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.filters - A comma-separated list of filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index to scope the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.preferLocal - With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)\n * @param {<<api-param-type-string,`String`>>} params.text - The text on which the analysis should be performed (when request body is not used)\n * @param {<<api-param-type-string,`String`>>} params.tokenizer - The name of the tokenizer to use for the analysis\n * @param {<<api-param-type-string,`String`>>} [params.format=detailed] - Format of the output\n */\napi.indices.prototype.analyze = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    charFilters: {\n      type: 'list',\n      name: 'char_filters'\n    },\n    field: {\n      type: 'string'\n    },\n    filters: {\n      type: 'list'\n    },\n    index: {\n      type: 'string'\n    },\n    preferLocal: {\n      type: 'boolean',\n      name: 'prefer_local'\n    },\n    text: {\n      type: 'string'\n    },\n    tokenizer: {\n      type: 'string'\n    },\n    format: {\n      type: 'enum',\n      'default': 'detailed',\n      options: [\n        'detailed',\n        'text'\n      ]\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_analyze',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_analyze'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.clearCache](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-clearcache.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fieldData - Clear field data\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fielddata - Clear field data\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to clear when using the `field_data` parameter (default: all)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filter - Clear filter caches\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filterCache - Clear filter caches\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filterKeys - A comma-separated list of keys to clear when using the `filter_cache` parameter (default: all)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.id - Clear ID caches for parent/child\n * @param {<<api-param-type-boolean,`Boolean`>>} params.idCache - Clear ID caches for parent/child\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index name to limit the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.recycler - Clear the recycler cache\n */\napi.indices.prototype.clearCache = ca({\n  params: {\n    fieldData: {\n      type: 'boolean',\n      name: 'field_data'\n    },\n    fielddata: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    filter: {\n      type: 'boolean'\n    },\n    filterCache: {\n      type: 'boolean',\n      name: 'filter_cache'\n    },\n    filterKeys: {\n      type: 'boolean',\n      name: 'filter_keys'\n    },\n    id: {\n      type: 'boolean'\n    },\n    idCache: {\n      type: 'boolean',\n      name: 'id_cache'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    index: {\n      type: 'list'\n    },\n    recycler: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_cache/clear',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cache/clear'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.close](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.close = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_close',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.create](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-create-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.create = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.delete](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-delete-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices\n */\napi.indices.prototype['delete'] = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteAlias](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.\n */\napi.indices.prototype.deleteAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_alias/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteMapping](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-delete-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to delete (supports wildcards); use `_all` to delete all document types in the specified indices.\n */\napi.indices.prototype.deleteMapping = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/_mapping',\n    req: {\n      index: {\n        type: 'list'\n      },\n      type: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteTemplate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.deleteTemplate = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteWarmer](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of warmer names to delete (supports wildcards); use `_all` to delete all warmers in the specified indices. You must specify a name either in the uri or in the parameters.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to delete warmers from (supports wildcards); use `_all` to perform the operation on all indices.\n */\napi.indices.prototype.deleteWarmer = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    name: {\n      type: 'list'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_warmer/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.exists](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-get-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to check\n */\napi.indices.prototype.exists = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsAlias](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.existsAlias = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': [\n        'open',\n        'closed'\n      ],\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_alias',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsTemplate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.existsTemplate = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsType](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-types-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` to check the types across all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to check\n */\napi.indices.prototype.existsType = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      type: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.flush](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-flush.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.full - If set to true a new index writer is created and settings that have been changed related to the index writer will be refreshed. Note: if a full flush is required for a setting to take effect this will be part of the settings update process and it not required to be executed by the user. (This setting can be considered as internal)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n */\napi.indices.prototype.flush = ca({\n  params: {\n    force: {\n      type: 'boolean'\n    },\n    full: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_flush',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_flush'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.getAlias](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.getAlias = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_alias',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getAliases](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to filter\n */\napi.indices.prototype.getAliases = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_aliases/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_aliases',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_aliases/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_aliases'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getFieldMapping](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-get-field-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether the default mapping values should be returned as well\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.field - A comma-separated list of fields\n */\napi.indices.prototype.getFieldMapping = ca({\n  params: {\n    includeDefaults: {\n      type: 'boolean',\n      name: 'include_defaults'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>/field/<%=field%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        field: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping/field/<%=field%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        field: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>/field/<%=field%>',\n      req: {\n        type: {\n          type: 'list'\n        },\n        field: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/field/<%=field%>',\n      req: {\n        field: {\n          type: 'list'\n        }\n      }\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getMapping](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-get-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n */\napi.indices.prototype.getMapping = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>',\n      req: {\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getSettings](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-get-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the settings that should be included\n */\napi.indices.prototype.getSettings = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': [\n        'open',\n        'closed'\n      ],\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getTemplate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.getTemplate = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_template/<%=name%>',\n      req: {\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_template'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getWarmer](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the warmer (supports wildcards); leave empty to get all warmers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n */\napi.indices.prototype.getWarmer = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.open](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.open = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'closed',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_open',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.optimize](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-optimize.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flush - Specify whether the index should be flushed after performing the operation (default: true)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.maxNumSegments - The number of segments the index should be merged into (default: dynamic)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyExpungeDeletes - Specify whether the operation should only expunge deleted documents\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForMerge - Specify whether the request should block until the merge process is finished (default: true)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Force a merge operation to run, even if there is a single segment in the index (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.optimize = ca({\n  params: {\n    flush: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    maxNumSegments: {\n      type: 'number',\n      name: 'max_num_segments'\n    },\n    onlyExpungeDeletes: {\n      type: 'boolean',\n      name: 'only_expunge_deletes'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    waitForMerge: {\n      type: 'boolean',\n      name: 'wait_for_merge'\n    },\n    force: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_optimize',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_optimize'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.putAlias](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the alias should point to (supports wildcards); use `_all` or omit to perform the operation on all indices.\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the alias to be created or updated\n */\napi.indices.prototype.putAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putMapping](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-put-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreConflicts - Specify whether to ignore conflicts while updating the mapping (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.\n * @param {<<api-param-type-string,`String`>>} params.type - The name of the document type\n */\napi.indices.prototype.putMapping = ca({\n  params: {\n    ignoreConflicts: {\n      type: 'boolean',\n      name: 'ignore_conflicts'\n    },\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>',\n      req: {\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putSettings](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.putSettings = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putTemplate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.order - The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.putTemplate = ca({\n  params: {\n    order: {\n      type: 'number'\n    },\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putWarmer](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed) in the search request to warm\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices in the search request to warm. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both, in the search request to warm.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the warmer\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types\n */\napi.indices.prototype.putWarmer = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer/<%=name%>',\n      req: {\n        name: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.recovery](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-recovery.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Whether to display detailed information about shard recovery\n * @param {<<api-param-type-boolean,`Boolean`>>} params.activeOnly - Display only those recoveries that are currently on-going\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.recovery = ca({\n  params: {\n    detailed: {\n      type: 'boolean',\n      'default': false\n    },\n    activeOnly: {\n      type: 'boolean',\n      'default': false,\n      name: 'active_only'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_recovery',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_recovery'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.refresh](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-refresh.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Force a refresh even if not required\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.refresh = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    force: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_refresh',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_refresh'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.segments](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-segments.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.segments = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_segments',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_segments'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.snapshotIndex](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-gateway-snapshot.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n */\napi.indices.prototype.snapshotIndex = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_gateway/snapshot',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_gateway/snapshot'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.stats](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>} [params.level=indices] - Return stats aggregated at cluster, index or shard level\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned the specific metrics.\n */\napi.indices.prototype.stats = ca({\n  params: {\n    completionFields: {\n      type: 'list',\n      name: 'completion_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    fields: {\n      type: 'list'\n    },\n    groups: {\n      type: 'boolean'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    level: {\n      type: 'enum',\n      'default': 'indices',\n      options: [\n        'cluster',\n        'indices',\n        'shards'\n      ]\n    },\n    types: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_stats/<%=metric%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'filter_cache',\n            'flush',\n            'get',\n            'id_cache',\n            'indexing',\n            'merge',\n            'percolate',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_stats/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'filter_cache',\n            'flush',\n            'get',\n            'id_cache',\n            'indexing',\n            'merge',\n            'percolate',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_stats',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_stats'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.status](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-status.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.recovery - Return information about shard recovery\n * @param {<<api-param-type-boolean,`Boolean`>>} params.snapshot - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.status = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    recovery: {\n      type: 'boolean'\n    },\n    snapshot: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_status',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_status'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.updateAliases](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Request timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.indices.prototype.updateAliases = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_aliases'\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.validateQuery](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/search-validate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return detailed information about the error\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded query definition (instead of using the request body)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n */\napi.indices.prototype.validateQuery = ca({\n  params: {\n    explain: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    source: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_validate/query'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [info](http://www.elasticsearch.org/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.info = ca({\n  url: {\n    fmt: '/'\n  }\n});\n\n/**\n * Perform a [mget](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/docs-multi-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.mget = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mget'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mlt](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/search-more-like-this.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.boostTerms - The boost factor\n * @param {<<api-param-type-number,`Number`>>} params.maxDocFreq - The word occurrence frequency as count: words with higher occurrence in the corpus will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.maxQueryTerms - The maximum query terms to be included in the generated query\n * @param {<<api-param-type-number,`Number`>>} params.maxWordLength - The minimum length of the word: longer words will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.minDocFreq - The word occurrence frequency as count: words with lower occurrence in the corpus will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.minTermFreq - The term frequency as percent: terms with lower occurence in the source document will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.minWordLength - The minimum length of the word: shorter words will be ignored\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.mltFields - Specific fields to perform the query against\n * @param {<<api-param-type-number,`Number`>>} params.percentTermsToMatch - How many terms have to match in order to consider the document a match (default: 0.3)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-number,`Number`>>} params.searchFrom - The offset from which to return results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.searchIndices - A comma-separated list of indices to perform the query against (default: the index containing the document)\n * @param {<<api-param-type-string,`String`>>} params.searchQueryHint - The search query hint\n * @param {<<api-param-type-string,`String`>>} params.searchScroll - A scroll search request definition\n * @param {<<api-param-type-number,`Number`>>} params.searchSize - The number of documents to return (default: 10)\n * @param {<<api-param-type-string,`String`>>} params.searchSource - A specific search request definition (instead of using the request body)\n * @param {<<api-param-type-string,`String`>>} params.searchType - Specific search type (eg. `dfs_then_fetch`, `count`, etc)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.searchTypes - A comma-separated list of types to perform the query against (default: the same type as the document)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stopWords - A list of stop words to be ignored\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.mlt = ca({\n  params: {\n    boostTerms: {\n      type: 'number',\n      name: 'boost_terms'\n    },\n    maxDocFreq: {\n      type: 'number',\n      name: 'max_doc_freq'\n    },\n    maxQueryTerms: {\n      type: 'number',\n      name: 'max_query_terms'\n    },\n    maxWordLength: {\n      type: 'number',\n      name: 'max_word_length'\n    },\n    minDocFreq: {\n      type: 'number',\n      name: 'min_doc_freq'\n    },\n    minTermFreq: {\n      type: 'number',\n      name: 'min_term_freq'\n    },\n    minWordLength: {\n      type: 'number',\n      name: 'min_word_length'\n    },\n    mltFields: {\n      type: 'list',\n      name: 'mlt_fields'\n    },\n    percentTermsToMatch: {\n      type: 'number',\n      name: 'percent_terms_to_match'\n    },\n    routing: {\n      type: 'string'\n    },\n    searchFrom: {\n      type: 'number',\n      name: 'search_from'\n    },\n    searchIndices: {\n      type: 'list',\n      name: 'search_indices'\n    },\n    searchQueryHint: {\n      type: 'string',\n      name: 'search_query_hint'\n    },\n    searchScroll: {\n      type: 'string',\n      name: 'search_scroll'\n    },\n    searchSize: {\n      type: 'number',\n      name: 'search_size'\n    },\n    searchSource: {\n      type: 'string',\n      name: 'search_source'\n    },\n    searchType: {\n      type: 'string',\n      name: 'search_type'\n    },\n    searchTypes: {\n      type: 'list',\n      name: 'search_types'\n    },\n    stopWords: {\n      type: 'list',\n      name: 'stop_words'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_mlt',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [mpercolate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated to use as default\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated to use as default.\n */\napi.mpercolate = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mpercolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mpercolate',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mpercolate'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [msearch](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/search-multi-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n */\napi.msearch = ca({\n  params: {\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_msearch'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mtermvectors](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/docs-multi-termvectors.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.ids - A comma-separated list of documents ids. You must define ids as parameter or set \"ids\" or \"docs\" in the request body\n * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n * @param {<<api-param-type-string,`String`>>} params.id - The id of the document.\n */\napi.mtermvectors = ca({\n  params: {\n    ids: {\n      type: 'list',\n      required: false\n    },\n    termStatistics: {\n      type: 'boolean',\n      'default': false,\n      required: false,\n      name: 'term_statistics'\n    },\n    fieldStatistics: {\n      type: 'boolean',\n      'default': true,\n      required: false,\n      name: 'field_statistics'\n    },\n    fields: {\n      type: 'list',\n      required: false\n    },\n    offsets: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    positions: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    payloads: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    preference: {\n      type: 'string',\n      required: false\n    },\n    routing: {\n      type: 'string',\n      required: false\n    },\n    parent: {\n      type: 'string',\n      required: false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mtermvectors',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mtermvectors',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mtermvectors'\n    }\n  ],\n  method: 'POST'\n});\n\napi.nodes = namespace();\n\n/**\n * Perform a [nodes.hotThreads](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/cluster-nodes-hot-threads.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.interval - The interval for the second sampling of threads\n * @param {<<api-param-type-number,`Number`>>} params.snapshots - Number of samples of thread stacktrace (default: 10)\n * @param {<<api-param-type-number,`Number`>>} params.threads - Specify the number of threads to provide information for (default: 3)\n * @param {<<api-param-type-string,`String`>>} params.type - The type to sample (default: cpu)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.nodes.prototype.hotThreads = ca({\n  params: {\n    interval: {\n      type: 'time'\n    },\n    snapshots: {\n      type: 'number'\n    },\n    threads: {\n      type: 'number'\n    },\n    type: {\n      type: 'enum',\n      options: [\n        'cpu',\n        'wait',\n        'block'\n      ]\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/hotthreads',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/hotthreads'\n    }\n  ]\n});\n\n/**\n * Perform a [nodes.info](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/cluster-nodes-info.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - A comma-separated list of metrics you wish returned. Leave empty to return all.\n */\napi.nodes.prototype.info = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/<%=metric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            'settings',\n            'os',\n            'process',\n            'jvm',\n            'thread_pool',\n            'network',\n            'transport',\n            'http',\n            'plugins'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            'settings',\n            'os',\n            'process',\n            'jvm',\n            'thread_pool',\n            'network',\n            'transport',\n            'http',\n            'plugins'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes'\n    }\n  ]\n});\n\n/**\n * Perform a [nodes.shutdown](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/cluster-nodes-shutdown.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.delay - Set the delay for the operation (default: 1s)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.exit - Exit the JVM as well (default: true)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to perform the operation on; use `_local` to perform the operation on the node you're connected to, leave empty to perform the operation on all nodes\n */\napi.nodes.prototype.shutdown = ca({\n  params: {\n    delay: {\n      type: 'time'\n    },\n    exit: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/nodes/<%=nodeId%>/_shutdown',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_shutdown'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [nodes.stats](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/cluster-nodes-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>} [params.level=node] - Return indices stats aggregated at node, index or shard level\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indexMetric - Limit the information returned for `indices` metric to the specific index metrics. Isn't used if `indices` (or `all`) metric isn't specified.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.nodes.prototype.stats = ca({\n  params: {\n    completionFields: {\n      type: 'list',\n      name: 'completion_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    fields: {\n      type: 'list'\n    },\n    groups: {\n      type: 'boolean'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    level: {\n      type: 'enum',\n      'default': 'node',\n      options: [\n        'node',\n        'indices',\n        'shards'\n      ]\n    },\n    types: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>/<%=indexMetric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'network',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        },\n        indexMetric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'filter_cache',\n            'flush',\n            'get',\n            'id_cache',\n            'indexing',\n            'merge',\n            'percolate',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'network',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats/<%=metric%>/<%=indexMetric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'network',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        },\n        indexMetric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'filter_cache',\n            'flush',\n            'get',\n            'id_cache',\n            'indexing',\n            'merge',\n            'percolate',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'network',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats'\n    }\n  ]\n});\n\n/**\n * Perform a [percolate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to percolate the document into. Defaults to index.\n * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to percolate document into. Defaults to type.\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being percolated.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated.\n * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n */\napi.percolate = ca({\n  params: {\n    routing: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    percolateIndex: {\n      type: 'string',\n      name: 'percolate_index'\n    },\n    percolateType: {\n      type: 'string',\n      name: 'percolate_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_percolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [ping](http://www.elasticsearch.org/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.ping = ca({\n  url: {\n    fmt: '/'\n  },\n  requestTimeout: 3000,\n  method: 'HEAD'\n});\n\n/**\n * Perform a [scroll](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.scrollId - The scroll ID\n */\napi.scroll = ca({\n  params: {\n    scroll: {\n      type: 'duration'\n    },\n    scrollId: {\n      type: 'string',\n      name: 'scroll_id'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_search/scroll/<%=scrollId%>',\n      req: {\n        scrollId: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_search/scroll'\n    }\n  ],\n  paramAsBody: 'scrollId',\n  method: 'POST'\n});\n\n/**\n * Perform a [search](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/search-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return as part of a hit\n * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indicesBoost - Comma-separated list of index boosts\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition using the Query DSL (instead of using request body)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n * @param {<<api-param-type-string,`String`>>} params.suggestField - Specify which field to use for suggestions\n * @param {<<api-param-type-string,`String`>>} [params.suggestMode=missing] - Specify suggest mode\n * @param {<<api-param-type-number,`Number`>>} params.suggestSize - How many suggestions to return in response\n * @param {<<api-param-type-string,`String`>>} params.suggestText - The source text for which the suggestions should be returned\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.trackScores - Whether to calculate and return scores even if they are not used for sorting\n * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.search = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    from: {\n      type: 'number'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    indicesBoost: {\n      type: 'list',\n      name: 'indices_boost'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'duration'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    },\n    size: {\n      type: 'number'\n    },\n    sort: {\n      type: 'list'\n    },\n    source: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    stats: {\n      type: 'list'\n    },\n    suggestField: {\n      type: 'string',\n      name: 'suggest_field'\n    },\n    suggestMode: {\n      type: 'enum',\n      'default': 'missing',\n      options: [\n        'missing',\n        'popular',\n        'always'\n      ],\n      name: 'suggest_mode'\n    },\n    suggestSize: {\n      type: 'number',\n      name: 'suggest_size'\n    },\n    suggestText: {\n      type: 'text',\n      name: 'suggest_text'\n    },\n    timeout: {\n      type: 'time'\n    },\n    trackScores: {\n      type: 'boolean',\n      name: 'track_scores'\n    },\n    version: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchTemplate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/search-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.searchTemplate = ca({\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search/template',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search/template',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/template'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchShards](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/search-shards.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.searchShards = ca({\n  params: {\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search_shards',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search_shards',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_search_shards'\n    }\n  ],\n  method: 'POST'\n});\n\napi.snapshot = namespace();\n\n/**\n * Perform a [snapshot.create](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype.create = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_create',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.createRepository](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n */\napi.snapshot.prototype.createRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>',\n    req: {\n      repository: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.delete](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype['delete'] = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [snapshot.deleteRepository](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n */\napi.snapshot.prototype.deleteRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>',\n    req: {\n      repository: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [snapshot.get](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n */\napi.snapshot.prototype.get = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'list'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [snapshot.getRepository](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n */\napi.snapshot.prototype.getRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_snapshot/<%=repository%>',\n      req: {\n        repository: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot'\n    }\n  ]\n});\n\n/**\n * Perform a [snapshot.restore](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype.restore = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_restore',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.status](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n */\napi.snapshot.prototype.status = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_status',\n      req: {\n        repository: {\n          type: 'string'\n        },\n        snapshot: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot/<%=repository%>/_status',\n      req: {\n        repository: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot/_status'\n    }\n  ]\n});\n\n/**\n * Perform a [suggest](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/search-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition (instead of using request body)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n */\napi.suggest = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    source: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_suggest',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_suggest'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [termvector](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/docs-termvectors.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random).\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value.\n * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents.\n * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n * @param {<<api-param-type-string,`String`>>} params.id - The id of the document.\n */\napi.termvector = ca({\n  params: {\n    termStatistics: {\n      type: 'boolean',\n      'default': false,\n      required: false,\n      name: 'term_statistics'\n    },\n    fieldStatistics: {\n      type: 'boolean',\n      'default': true,\n      required: false,\n      name: 'field_statistics'\n    },\n    fields: {\n      type: 'list',\n      required: false\n    },\n    offsets: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    positions: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    payloads: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    preference: {\n      type: 'string',\n      required: false\n    },\n    routing: {\n      type: 'string',\n      required: false\n    },\n    parent: {\n      type: 'string',\n      required: false\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_termvector',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [update](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/docs-update.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.lang - The script language (default: mvel)\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-number,`Number`>>} params.retryOnConflict - Specify how many times should the operation be retried when a conflict occurs (default: 0)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {anything} params.script - The URL-encoded script definition (instead of using request body)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.update = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    fields: {\n      type: 'list'\n    },\n    lang: {\n      type: 'string'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    retryOnConflict: {\n      type: 'number',\n      name: 'retry_on_conflict'\n    },\n    routing: {\n      type: 'string'\n    },\n    script: {},\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'duration'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_update',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [create](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.1/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.create = ca.proxy(api.index, {\n  transform: function (params) {\n    params.op_type = 'create';\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/apis/1_0.js":"var ca = require('../client_action').factory;\nvar namespace = require('../client_action').namespaceFactory;\nvar api = module.exports = {};\n\napi._namespaces = ['cat', 'cluster', 'indices', 'nodes', 'snapshot'];\n\n/**\n * Perform a [bulk](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-bulk.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Explicitely set the replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.type - Default document type for items which don't provide one\n * @param {<<api-param-type-string,`String`>>} params.index - Default index for items which don't provide one\n */\napi.bulk = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    type: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_bulk'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\napi.cat = namespace();\n\n/**\n * Perform a [cat.aliases](http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.cat.prototype.aliases = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/aliases/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/aliases'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.allocation](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-allocation.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information\n */\napi.cat.prototype.allocation = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/allocation/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/allocation'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.count](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-count.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.count = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/count/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/count'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.health](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-health.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.ts=true] - Set to false to disable timestamping\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.health = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    ts: {\n      type: 'boolean',\n      'default': true\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/health'\n  }\n});\n\n/**\n * Perform a [cat.help](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n */\napi.cat.prototype.help = ca({\n  params: {\n    help: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat'\n  }\n});\n\n/**\n * Perform a [cat.indices](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-indices.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.pri - Set to true to return stats only for primary shards\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.indices = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    pri: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/indices/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/indices'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.master](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-master.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.master = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/master'\n  }\n});\n\n/**\n * Perform a [cat.nodes](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-nodes.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.nodes = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/nodes'\n  }\n});\n\n/**\n * Perform a [cat.pendingTasks](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-pending-tasks.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.pendingTasks = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/pending_tasks'\n  }\n});\n\n/**\n * Perform a [cat.recovery](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-recovery.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.recovery = ca({\n  params: {\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/recovery/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/recovery'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.shards](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cat-shards.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.shards = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/shards/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/shards'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.threadPool](http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat-thread-pool.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fullId - Enables displaying the complete node ids\n */\napi.cat.prototype.threadPool = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    },\n    fullId: {\n      type: 'boolean',\n      'default': false,\n      name: 'full_id'\n    }\n  },\n  url: {\n    fmt: '/_cat/thread_pool'\n  }\n});\n\n/**\n * Perform a [clearScroll](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.scrollId - A comma-separated list of scroll IDs to clear\n */\napi.clearScroll = ca({\n  urls: [\n    {\n      fmt: '/_search/scroll/<%=scrollId%>',\n      req: {\n        scrollId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/scroll'\n    }\n  ],\n  paramAsBody: 'scrollId',\n  method: 'DELETE'\n});\n\napi.cluster = namespace();\n\n/**\n * Perform a [cluster.getSettings](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.getSettings = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/settings'\n  }\n});\n\n/**\n * Perform a [cluster.health](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-health.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Specify the level of detail for returned information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-number,`Number`>>} params.waitForActiveShards - Wait until the specified number of shards is active\n * @param {<<api-param-type-string,`String`>>} params.waitForNodes - Wait until the specified number of nodes is available\n * @param {<<api-param-type-number,`Number`>>} params.waitForRelocatingShards - Wait until the specified number of relocating shards is finished\n * @param {<<api-param-type-string,`String`>>} params.waitForStatus - Wait until cluster is in a specific state\n * @param {<<api-param-type-string,`String`>>} params.index - Limit the information returned to a specific index\n */\napi.cluster.prototype.health = ca({\n  params: {\n    level: {\n      type: 'enum',\n      'default': 'cluster',\n      options: [\n        'cluster',\n        'indices',\n        'shards'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    },\n    waitForActiveShards: {\n      type: 'number',\n      name: 'wait_for_active_shards'\n    },\n    waitForNodes: {\n      type: 'string',\n      name: 'wait_for_nodes'\n    },\n    waitForRelocatingShards: {\n      type: 'number',\n      name: 'wait_for_relocating_shards'\n    },\n    waitForStatus: {\n      type: 'enum',\n      'default': null,\n      options: [\n        'green',\n        'yellow',\n        'red'\n      ],\n      name: 'wait_for_status'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/health/<%=index%>',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/health'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.pendingTasks](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-pending.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.cluster.prototype.pendingTasks = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_cluster/pending_tasks'\n  }\n});\n\n/**\n * Perform a [cluster.putSettings](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n */\napi.cluster.prototype.putSettings = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  url: {\n    fmt: '/_cluster/settings'\n  },\n  method: 'PUT'\n});\n\n/**\n * Perform a [cluster.reroute](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-reroute.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - Simulate the operation only and return the resulting state\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filterMetadata - Don't return cluster state metadata (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.reroute = ca({\n  params: {\n    dryRun: {\n      type: 'boolean',\n      name: 'dry_run'\n    },\n    filterMetadata: {\n      type: 'boolean',\n      name: 'filter_metadata'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/reroute'\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [cluster.state](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-state.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indexTemplates - A comma separated list to return specific index templates when returning metadata\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n */\napi.cluster.prototype.state = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    indexTemplates: {\n      type: 'list',\n      name: 'index_templates'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/state/<%=metric%>/<%=index%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'blocks',\n            'metadata',\n            'nodes',\n            'routing_table',\n            'master_node',\n            'version'\n          ]\n        },\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/state/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'blocks',\n            'metadata',\n            'nodes',\n            'routing_table',\n            'master_node',\n            'version'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/state'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.stats](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.cluster.prototype.stats = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/stats/nodes/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/stats'\n    }\n  ]\n});\n\n/**\n * Perform a [count](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-count.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded query definition (instead of using the request body)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n */\napi.count = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    minScore: {\n      type: 'number',\n      name: 'min_score'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    source: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_count'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [countPercolate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to count percolate the document into. Defaults to index.\n * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to count percolate document into. Defaults to type.\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being count percolated.\n * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n */\napi.countPercolate = ca({\n  params: {\n    routing: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    percolateIndex: {\n      type: 'string',\n      name: 'percolate_index'\n    },\n    percolateType: {\n      type: 'string',\n      name: 'percolate_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate/count',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_percolate/count',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [delete](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Specific write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi['delete'] = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteByQuery](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-delete-by-query.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-string,`String`>>} params.consistency - Specific write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded query definition (instead of using the request body)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the operation\n */\napi.deleteByQuery = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    source: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  method: 'DELETE'\n});\n\n/**\n * Perform a [exists](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.exists = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [explain](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-explain.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer for the query string query\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The default field for query string query (default: _all)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded query definition (instead of using the request body)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.explain = ca({\n  params: {\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    fields: {\n      type: 'list'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    source: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_explain',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [get](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.get = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getSource](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types\n */\napi.getSource = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [index](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.index = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'duration'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\napi.indices = namespace();\n\n/**\n * Perform a [indices.analyze](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-analyze.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The name of the analyzer to use\n * @param {<<api-param-type-string,`String`>>} params.field - Use the analyzer configured for this field (instead of passing the analyzer name)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.filters - A comma-separated list of filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index to scope the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.preferLocal - With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)\n * @param {<<api-param-type-string,`String`>>} params.text - The text on which the analysis should be performed (when request body is not used)\n * @param {<<api-param-type-string,`String`>>} params.tokenizer - The name of the tokenizer to use for the analysis\n * @param {<<api-param-type-string,`String`>>} [params.format=detailed] - Format of the output\n */\napi.indices.prototype.analyze = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    field: {\n      type: 'string'\n    },\n    filters: {\n      type: 'list'\n    },\n    index: {\n      type: 'string'\n    },\n    preferLocal: {\n      type: 'boolean',\n      name: 'prefer_local'\n    },\n    text: {\n      type: 'string'\n    },\n    tokenizer: {\n      type: 'string'\n    },\n    format: {\n      type: 'enum',\n      'default': 'detailed',\n      options: [\n        'detailed',\n        'text'\n      ]\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_analyze',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_analyze'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.clearCache](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-clearcache.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fieldData - Clear field data\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fielddata - Clear field data\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to clear when using the `field_data` parameter (default: all)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filter - Clear filter caches\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filterCache - Clear filter caches\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filterKeys - A comma-separated list of keys to clear when using the `filter_cache` parameter (default: all)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.id - Clear ID caches for parent/child\n * @param {<<api-param-type-boolean,`Boolean`>>} params.idCache - Clear ID caches for parent/child\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index name to limit the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.recycler - Clear the recycler cache\n */\napi.indices.prototype.clearCache = ca({\n  params: {\n    fieldData: {\n      type: 'boolean',\n      name: 'field_data'\n    },\n    fielddata: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    filter: {\n      type: 'boolean'\n    },\n    filterCache: {\n      type: 'boolean',\n      name: 'filter_cache'\n    },\n    filterKeys: {\n      type: 'boolean',\n      name: 'filter_keys'\n    },\n    id: {\n      type: 'boolean'\n    },\n    idCache: {\n      type: 'boolean',\n      name: 'id_cache'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    index: {\n      type: 'list'\n    },\n    recycler: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_cache/clear',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cache/clear'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.close](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.close = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_close',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.create](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-create-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.create = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.delete](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-delete-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices\n */\napi.indices.prototype['delete'] = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteAlias](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.\n */\napi.indices.prototype.deleteAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_alias/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteMapping](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-delete-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to delete (supports wildcards); use `_all` to delete all document types in the specified indices.\n */\napi.indices.prototype.deleteMapping = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/_mapping',\n    req: {\n      index: {\n        type: 'list'\n      },\n      type: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteTemplate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.deleteTemplate = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteWarmer](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of warmer names to delete (supports wildcards); use `_all` to delete all warmers in the specified indices. You must specify a name either in the uri or in the parameters.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to delete warmers from (supports wildcards); use `_all` to perform the operation on all indices.\n */\napi.indices.prototype.deleteWarmer = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    name: {\n      type: 'list'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_warmer/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.exists](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to check\n */\napi.indices.prototype.exists = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsAlias](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.existsAlias = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': [\n        'open',\n        'closed'\n      ],\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_alias',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsTemplate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.existsTemplate = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsType](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-types-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` to check the types across all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to check\n */\napi.indices.prototype.existsType = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      type: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.flush](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-flush.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.full - If set to true a new index writer is created and settings that have been changed related to the index writer will be refreshed. Note: if a full flush is required for a setting to take effect this will be part of the settings update process and it not required to be executed by the user. (This setting can be considered as internal)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n */\napi.indices.prototype.flush = ca({\n  params: {\n    force: {\n      type: 'boolean'\n    },\n    full: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_flush',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_flush'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.getAlias](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.getAlias = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_alias',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getAliases](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to filter\n */\napi.indices.prototype.getAliases = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_aliases/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_aliases',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_aliases/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_aliases'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getFieldMapping](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-field-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether the default mapping values should be returned as well\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.field - A comma-separated list of fields\n */\napi.indices.prototype.getFieldMapping = ca({\n  params: {\n    includeDefaults: {\n      type: 'boolean',\n      name: 'include_defaults'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>/field/<%=field%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        field: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping/field/<%=field%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        field: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>/field/<%=field%>',\n      req: {\n        type: {\n          type: 'list'\n        },\n        field: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/field/<%=field%>',\n      req: {\n        field: {\n          type: 'list'\n        }\n      }\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getMapping](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n */\napi.indices.prototype.getMapping = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>',\n      req: {\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getSettings](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-get-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the settings that should be included\n */\napi.indices.prototype.getSettings = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': [\n        'open',\n        'closed'\n      ],\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getTemplate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.getTemplate = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_template/<%=name%>',\n      req: {\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_template'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getWarmer](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the warmer (supports wildcards); leave empty to get all warmers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n */\napi.indices.prototype.getWarmer = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.open](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.open = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'closed',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_open',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.optimize](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-optimize.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flush - Specify whether the index should be flushed after performing the operation (default: true)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.maxNumSegments - The number of segments the index should be merged into (default: dynamic)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyExpungeDeletes - Specify whether the operation should only expunge deleted documents\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForMerge - Specify whether the request should block until the merge process is finished (default: true)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.optimize = ca({\n  params: {\n    flush: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    maxNumSegments: {\n      type: 'number',\n      name: 'max_num_segments'\n    },\n    onlyExpungeDeletes: {\n      type: 'boolean',\n      name: 'only_expunge_deletes'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    waitForMerge: {\n      type: 'boolean',\n      name: 'wait_for_merge'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_optimize',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_optimize'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.putAlias](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the alias should point to (supports wildcards); use `_all` or omit to perform the operation on all indices.\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the alias to be created or updated\n */\napi.indices.prototype.putAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putMapping](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-put-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreConflicts - Specify whether to ignore conflicts while updating the mapping (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.\n * @param {<<api-param-type-string,`String`>>} params.type - The name of the document type\n */\napi.indices.prototype.putMapping = ca({\n  params: {\n    ignoreConflicts: {\n      type: 'boolean',\n      name: 'ignore_conflicts'\n    },\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>',\n      req: {\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putSettings](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.putSettings = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putTemplate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.order - The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.putTemplate = ca({\n  params: {\n    order: {\n      type: 'number'\n    },\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putWarmer](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed) in the search request to warm\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices in the search request to warm. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both, in the search request to warm.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the warmer\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types\n */\napi.indices.prototype.putWarmer = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_warmer/<%=name%>',\n      req: {\n        name: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.refresh](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-refresh.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Force a refresh even if not required\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.refresh = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    force: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_refresh',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_refresh'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.segments](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-segments.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.segments = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_segments',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_segments'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.snapshotIndex](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-gateway-snapshot.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n */\napi.indices.prototype.snapshotIndex = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_gateway/snapshot',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_gateway/snapshot'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.stats](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>} [params.level=indices] - Return stats aggregated at cluster, index or shard level\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned the specific metrics.\n */\napi.indices.prototype.stats = ca({\n  params: {\n    completionFields: {\n      type: 'list',\n      name: 'completion_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    fields: {\n      type: 'list'\n    },\n    groups: {\n      type: 'boolean'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    level: {\n      type: 'enum',\n      'default': 'indices',\n      options: [\n        'cluster',\n        'indices',\n        'shards'\n      ]\n    },\n    types: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_stats/<%=metric%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'filter_cache',\n            'flush',\n            'get',\n            'id_cache',\n            'indexing',\n            'merge',\n            'percolate',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_stats/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'filter_cache',\n            'flush',\n            'get',\n            'id_cache',\n            'indexing',\n            'merge',\n            'percolate',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_stats',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_stats'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.status](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-status.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.recovery - Return information about shard recovery\n * @param {<<api-param-type-boolean,`Boolean`>>} params.snapshot - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.status = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    recovery: {\n      type: 'boolean'\n    },\n    snapshot: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_status',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_status'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.updateAliases](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Request timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.indices.prototype.updateAliases = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_aliases'\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.validateQuery](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-validate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return detailed information about the error\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded query definition (instead of using the request body)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n */\napi.indices.prototype.validateQuery = ca({\n  params: {\n    explain: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    source: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_validate/query'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [info](http://www.elasticsearch.org/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.info = ca({\n  url: {\n    fmt: '/'\n  }\n});\n\n/**\n * Perform a [mget](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.mget = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mget'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mlt](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-more-like-this.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.boostTerms - The boost factor\n * @param {<<api-param-type-number,`Number`>>} params.maxDocFreq - The word occurrence frequency as count: words with higher occurrence in the corpus will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.maxQueryTerms - The maximum query terms to be included in the generated query\n * @param {<<api-param-type-number,`Number`>>} params.maxWordLength - The minimum length of the word: longer words will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.minDocFreq - The word occurrence frequency as count: words with lower occurrence in the corpus will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.minTermFreq - The term frequency as percent: terms with lower occurence in the source document will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.minWordLength - The minimum length of the word: shorter words will be ignored\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.mltFields - Specific fields to perform the query against\n * @param {<<api-param-type-number,`Number`>>} params.percentTermsToMatch - How many terms have to match in order to consider the document a match (default: 0.3)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-number,`Number`>>} params.searchFrom - The offset from which to return results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.searchIndices - A comma-separated list of indices to perform the query against (default: the index containing the document)\n * @param {<<api-param-type-string,`String`>>} params.searchQueryHint - The search query hint\n * @param {<<api-param-type-string,`String`>>} params.searchScroll - A scroll search request definition\n * @param {<<api-param-type-number,`Number`>>} params.searchSize - The number of documents to return (default: 10)\n * @param {<<api-param-type-string,`String`>>} params.searchSource - A specific search request definition (instead of using the request body)\n * @param {<<api-param-type-string,`String`>>} params.searchType - Specific search type (eg. `dfs_then_fetch`, `count`, etc)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.searchTypes - A comma-separated list of types to perform the query against (default: the same type as the document)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stopWords - A list of stop words to be ignored\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.mlt = ca({\n  params: {\n    boostTerms: {\n      type: 'number',\n      name: 'boost_terms'\n    },\n    maxDocFreq: {\n      type: 'number',\n      name: 'max_doc_freq'\n    },\n    maxQueryTerms: {\n      type: 'number',\n      name: 'max_query_terms'\n    },\n    maxWordLength: {\n      type: 'number',\n      name: 'max_word_length'\n    },\n    minDocFreq: {\n      type: 'number',\n      name: 'min_doc_freq'\n    },\n    minTermFreq: {\n      type: 'number',\n      name: 'min_term_freq'\n    },\n    minWordLength: {\n      type: 'number',\n      name: 'min_word_length'\n    },\n    mltFields: {\n      type: 'list',\n      name: 'mlt_fields'\n    },\n    percentTermsToMatch: {\n      type: 'number',\n      name: 'percent_terms_to_match'\n    },\n    routing: {\n      type: 'string'\n    },\n    searchFrom: {\n      type: 'number',\n      name: 'search_from'\n    },\n    searchIndices: {\n      type: 'list',\n      name: 'search_indices'\n    },\n    searchQueryHint: {\n      type: 'string',\n      name: 'search_query_hint'\n    },\n    searchScroll: {\n      type: 'string',\n      name: 'search_scroll'\n    },\n    searchSize: {\n      type: 'number',\n      name: 'search_size'\n    },\n    searchSource: {\n      type: 'string',\n      name: 'search_source'\n    },\n    searchType: {\n      type: 'string',\n      name: 'search_type'\n    },\n    searchTypes: {\n      type: 'list',\n      name: 'search_types'\n    },\n    stopWords: {\n      type: 'list',\n      name: 'stop_words'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_mlt',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [mpercolate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated to use as default\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated to use as default.\n */\napi.mpercolate = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mpercolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mpercolate',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mpercolate'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [msearch](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-multi-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n */\napi.msearch = ca({\n  params: {\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_msearch'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mtermvectors](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-multi-termvectors.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.ids - A comma-separated list of documents ids. You must define ids as parameter or set \"ids\" or \"docs\" in the request body\n * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n * @param {<<api-param-type-string,`String`>>} params.id - The id of the document.\n */\napi.mtermvectors = ca({\n  params: {\n    ids: {\n      type: 'list',\n      required: false\n    },\n    termStatistics: {\n      type: 'boolean',\n      'default': false,\n      required: false,\n      name: 'term_statistics'\n    },\n    fieldStatistics: {\n      type: 'boolean',\n      'default': true,\n      required: false,\n      name: 'field_statistics'\n    },\n    fields: {\n      type: 'list',\n      required: false\n    },\n    offsets: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    positions: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    payloads: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    preference: {\n      type: 'string',\n      required: false\n    },\n    routing: {\n      type: 'string',\n      required: false\n    },\n    parent: {\n      type: 'string',\n      required: false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mtermvectors',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mtermvectors',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mtermvectors'\n    }\n  ],\n  method: 'POST'\n});\n\napi.nodes = namespace();\n\n/**\n * Perform a [nodes.hotThreads](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-hot-threads.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.interval - The interval for the second sampling of threads\n * @param {<<api-param-type-number,`Number`>>} params.snapshots - Number of samples of thread stacktrace (default: 10)\n * @param {<<api-param-type-number,`Number`>>} params.threads - Specify the number of threads to provide information for (default: 3)\n * @param {<<api-param-type-string,`String`>>} params.type - The type to sample (default: cpu)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.nodes.prototype.hotThreads = ca({\n  params: {\n    interval: {\n      type: 'time'\n    },\n    snapshots: {\n      type: 'number'\n    },\n    threads: {\n      type: 'number'\n    },\n    type: {\n      type: 'enum',\n      options: [\n        'cpu',\n        'wait',\n        'block'\n      ]\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/hotthreads',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/hotthreads'\n    }\n  ]\n});\n\n/**\n * Perform a [nodes.info](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-info.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - A comma-separated list of metrics you wish returned. Leave empty to return all.\n */\napi.nodes.prototype.info = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/<%=metric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            'settings',\n            'os',\n            'process',\n            'jvm',\n            'thread_pool',\n            'network',\n            'transport',\n            'http',\n            'plugin'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            'settings',\n            'os',\n            'process',\n            'jvm',\n            'thread_pool',\n            'network',\n            'transport',\n            'http',\n            'plugin'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes'\n    }\n  ]\n});\n\n/**\n * Perform a [nodes.shutdown](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-shutdown.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.delay - Set the delay for the operation (default: 1s)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.exit - Exit the JVM as well (default: true)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to perform the operation on; use `_local` to perform the operation on the node you're connected to, leave empty to perform the operation on all nodes\n */\napi.nodes.prototype.shutdown = ca({\n  params: {\n    delay: {\n      type: 'time'\n    },\n    exit: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/nodes/<%=nodeId%>/_shutdown',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_shutdown'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [nodes.stats](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/cluster-nodes-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>} [params.level=node] - Return indices stats aggregated at node, index or shard level\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indexMetric - Limit the information returned for `indices` metric to the specific index metrics. Isn't used if `indices` (or `all`) metric isn't specified.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.nodes.prototype.stats = ca({\n  params: {\n    completionFields: {\n      type: 'list',\n      name: 'completion_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    fields: {\n      type: 'list'\n    },\n    groups: {\n      type: 'boolean'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    level: {\n      type: 'enum',\n      'default': 'node',\n      options: [\n        'node',\n        'indices',\n        'shards'\n      ]\n    },\n    types: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>/<%=indexMetric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'network',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        },\n        indexMetric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'filter_cache',\n            'flush',\n            'get',\n            'id_cache',\n            'indexing',\n            'merge',\n            'percolate',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'network',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats/<%=metric%>/<%=indexMetric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'network',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        },\n        indexMetric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'filter_cache',\n            'flush',\n            'get',\n            'id_cache',\n            'indexing',\n            'merge',\n            'percolate',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'network',\n            'os',\n            'process',\n            'thread_pool',\n            'transport'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats'\n    }\n  ]\n});\n\n/**\n * Perform a [percolate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to percolate the document into. Defaults to index.\n * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to percolate document into. Defaults to type.\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being percolated.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated.\n * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n */\napi.percolate = ca({\n  params: {\n    routing: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    percolateIndex: {\n      type: 'string',\n      name: 'percolate_index'\n    },\n    percolateType: {\n      type: 'string',\n      name: 'percolate_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_percolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [ping](http://www.elasticsearch.org/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.ping = ca({\n  url: {\n    fmt: '/'\n  },\n  requestTimeout: 3000,\n  method: 'HEAD'\n});\n\n/**\n * Perform a [scroll](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.scrollId - The scroll ID\n */\napi.scroll = ca({\n  params: {\n    scroll: {\n      type: 'duration'\n    },\n    scrollId: {\n      type: 'string',\n      name: 'scroll_id'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_search/scroll/<%=scrollId%>',\n      req: {\n        scrollId: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_search/scroll'\n    }\n  ],\n  paramAsBody: 'scrollId',\n  method: 'POST'\n});\n\n/**\n * Perform a [search](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return as part of a hit\n * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indicesBoost - Comma-separated list of index boosts\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition using the Query DSL (instead of using request body)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n * @param {<<api-param-type-string,`String`>>} params.suggestField - Specify which field to use for suggestions\n * @param {<<api-param-type-string,`String`>>} [params.suggestMode=missing] - Specify suggest mode\n * @param {<<api-param-type-number,`Number`>>} params.suggestSize - How many suggestions to return in response\n * @param {<<api-param-type-string,`String`>>} params.suggestText - The source text for which the suggestions should be returned\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.trackScores - Whether to calculate and return scores even if they are not used for sorting\n * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.search = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    from: {\n      type: 'number'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    indicesBoost: {\n      type: 'list',\n      name: 'indices_boost'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'duration'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    },\n    size: {\n      type: 'number'\n    },\n    sort: {\n      type: 'list'\n    },\n    source: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    stats: {\n      type: 'list'\n    },\n    suggestField: {\n      type: 'string',\n      name: 'suggest_field'\n    },\n    suggestMode: {\n      type: 'enum',\n      'default': 'missing',\n      options: [\n        'missing',\n        'popular',\n        'always'\n      ],\n      name: 'suggest_mode'\n    },\n    suggestSize: {\n      type: 'number',\n      name: 'suggest_size'\n    },\n    suggestText: {\n      type: 'text',\n      name: 'suggest_text'\n    },\n    timeout: {\n      type: 'time'\n    },\n    trackScores: {\n      type: 'boolean',\n      name: 'track_scores'\n    },\n    version: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchShards](http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-shards.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.searchShards = ca({\n  params: {\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search_shards',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search_shards',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_search_shards'\n    }\n  ],\n  method: 'POST'\n});\n\napi.snapshot = namespace();\n\n/**\n * Perform a [snapshot.create](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype.create = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_create',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.createRepository](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n */\napi.snapshot.prototype.createRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>',\n    req: {\n      repository: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.delete](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype['delete'] = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [snapshot.deleteRepository](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n */\napi.snapshot.prototype.deleteRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>',\n    req: {\n      repository: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [snapshot.get](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n */\napi.snapshot.prototype.get = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'list'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [snapshot.getRepository](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n */\napi.snapshot.prototype.getRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_snapshot/<%=repository%>',\n      req: {\n        repository: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot'\n    }\n  ]\n});\n\n/**\n * Perform a [snapshot.restore](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype.restore = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_restore',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [suggest](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/search-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition (instead of using request body)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n */\napi.suggest = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed'\n      ],\n      name: 'expand_wildcards'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    source: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_suggest',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_suggest'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [termvector](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-termvectors.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random).\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value.\n * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents.\n * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n * @param {<<api-param-type-string,`String`>>} params.id - The id of the document.\n */\napi.termvector = ca({\n  params: {\n    termStatistics: {\n      type: 'boolean',\n      'default': false,\n      required: false,\n      name: 'term_statistics'\n    },\n    fieldStatistics: {\n      type: 'boolean',\n      'default': true,\n      required: false,\n      name: 'field_statistics'\n    },\n    fields: {\n      type: 'list',\n      required: false\n    },\n    offsets: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    positions: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    payloads: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    preference: {\n      type: 'string',\n      required: false\n    },\n    routing: {\n      type: 'string',\n      required: false\n    },\n    parent: {\n      type: 'string',\n      required: false\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_termvector',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [update](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-update.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.lang - The script language (default: mvel)\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-number,`Number`>>} params.retryOnConflict - Specify how many times should the operation be retried when a conflict occurs (default: 0)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {anything} params.script - The URL-encoded script definition (instead of using request body)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.update = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    fields: {\n      type: 'list'\n    },\n    lang: {\n      type: 'string'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    retryOnConflict: {\n      type: 'number',\n      name: 'retry_on_conflict'\n    },\n    routing: {\n      type: 'string'\n    },\n    script: {},\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'duration'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_update',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [create](http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.create = ca.proxy(api.index, {\n  transform: function (params) {\n    params.op_type = 'create';\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/apis/0_90.js":"var ca = require('../client_action').factory;\nvar namespace = require('../client_action').namespaceFactory;\nvar api = module.exports = {};\n\napi._namespaces = ['cluster', 'indices'];\n\n/**\n * Perform a [bulk](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-bulk.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Explicitely set the replication type\n * @param {<<api-param-type-string,`String`>>} params.type - Default document type for items which don't provide one\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.index - Default index for items which don't provide one\n */\napi.bulk = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    type: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_bulk'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [clearScroll](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.scrollId - A comma-separated list of scroll IDs to clear\n */\napi.clearScroll = ca({\n  url: {\n    fmt: '/_search/scroll/<%=scrollId%>',\n    req: {\n      scrollId: {\n        type: 'list'\n      }\n    }\n  },\n  paramAsBody: 'scrollId',\n  method: 'DELETE'\n});\n\napi.cluster = namespace();\n\n/**\n * Perform a [cluster.getSettings](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.cluster.prototype.getSettings = ca({\n  url: {\n    fmt: '/_cluster/settings'\n  }\n});\n\n/**\n * Perform a [cluster.health](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-health.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Specify the level of detail for returned information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-number,`Number`>>} params.waitForActiveShards - Wait until the specified number of shards is active\n * @param {<<api-param-type-string,`String`>>} params.waitForNodes - Wait until the specified number of nodes is available\n * @param {<<api-param-type-number,`Number`>>} params.waitForRelocatingShards - Wait until the specified number of relocating shards is finished\n * @param {<<api-param-type-string,`String`>>} params.waitForStatus - Wait until cluster is in a specific state\n * @param {<<api-param-type-string,`String`>>} params.index - Limit the information returned to a specific index\n */\napi.cluster.prototype.health = ca({\n  params: {\n    level: {\n      type: 'enum',\n      'default': 'cluster',\n      options: [\n        'cluster',\n        'indices',\n        'shards'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    },\n    waitForActiveShards: {\n      type: 'number',\n      name: 'wait_for_active_shards'\n    },\n    waitForNodes: {\n      type: 'string',\n      name: 'wait_for_nodes'\n    },\n    waitForRelocatingShards: {\n      type: 'number',\n      name: 'wait_for_relocating_shards'\n    },\n    waitForStatus: {\n      type: 'enum',\n      'default': null,\n      options: [\n        'green',\n        'yellow',\n        'red'\n      ],\n      name: 'wait_for_status'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/health/<%=index%>',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/health'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.nodeHotThreads](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-nodes-hot-threads.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.interval - The interval for the second sampling of threads\n * @param {<<api-param-type-number,`Number`>>} params.snapshots - Number of samples of thread stacktrace (default: 10)\n * @param {<<api-param-type-number,`Number`>>} params.threads - Specify the number of threads to provide information for (default: 3)\n * @param {<<api-param-type-string,`String`>>} params.type - The type to sample (default: cpu)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.cluster.prototype.nodeHotThreads = ca({\n  params: {\n    interval: {\n      type: 'time'\n    },\n    snapshots: {\n      type: 'number'\n    },\n    threads: {\n      type: 'number'\n    },\n    type: {\n      type: 'enum',\n      options: [\n        'cpu',\n        'wait',\n        'block'\n      ]\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/hotthreads',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/hotthreads'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.nodeInfo](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-nodes-info.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.all - Return all available information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.clear - Reset the default settings\n * @param {<<api-param-type-boolean,`Boolean`>>} params.http - Return information about HTTP\n * @param {<<api-param-type-boolean,`Boolean`>>} params.jvm - Return information about the JVM\n * @param {<<api-param-type-boolean,`Boolean`>>} params.network - Return information about network\n * @param {<<api-param-type-boolean,`Boolean`>>} params.os - Return information about the operating system\n * @param {<<api-param-type-boolean,`Boolean`>>} params.plugin - Return information about plugins\n * @param {<<api-param-type-boolean,`Boolean`>>} params.process - Return information about the Elasticsearch process\n * @param {<<api-param-type-boolean,`Boolean`>>} params.settings - Return information about node settings\n * @param {<<api-param-type-boolean,`Boolean`>>} params.threadPool - Return information about the thread pool\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.transport - Return information about transport\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.cluster.prototype.nodeInfo = ca({\n  params: {\n    all: {\n      type: 'boolean'\n    },\n    clear: {\n      type: 'boolean'\n    },\n    http: {\n      type: 'boolean'\n    },\n    jvm: {\n      type: 'boolean'\n    },\n    network: {\n      type: 'boolean'\n    },\n    os: {\n      type: 'boolean'\n    },\n    plugin: {\n      type: 'boolean'\n    },\n    process: {\n      type: 'boolean'\n    },\n    settings: {\n      type: 'boolean'\n    },\n    threadPool: {\n      type: 'boolean',\n      name: 'thread_pool'\n    },\n    timeout: {\n      type: 'time'\n    },\n    transport: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.nodeShutdown](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-nodes-shutdown.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.delay - Set the delay for the operation (default: 1s)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.exit - Exit the JVM as well (default: true)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to perform the operation on; use `_local` to perform the operation on the node you're connected to, leave empty to perform the operation on all nodes\n */\napi.cluster.prototype.nodeShutdown = ca({\n  params: {\n    delay: {\n      type: 'time'\n    },\n    exit: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/nodes/<%=nodeId%>/_shutdown',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_shutdown'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [cluster.nodeStats](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-nodes-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.all - Return all available information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.clear - Reset the default level of detail\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return detailed information for, when returning the `indices` metric family (supports wildcards)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fs - Return information about the filesystem\n * @param {<<api-param-type-boolean,`Boolean`>>} params.http - Return information about HTTP\n * @param {<<api-param-type-boolean,`Boolean`>>} params.indices - Return information about indices\n * @param {<<api-param-type-boolean,`Boolean`>>} params.jvm - Return information about the JVM\n * @param {<<api-param-type-boolean,`Boolean`>>} params.network - Return information about network\n * @param {<<api-param-type-boolean,`Boolean`>>} params.os - Return information about the operating system\n * @param {<<api-param-type-boolean,`Boolean`>>} params.process - Return information about the Elasticsearch process\n * @param {<<api-param-type-boolean,`Boolean`>>} params.threadPool - Return information about the thread pool\n * @param {<<api-param-type-boolean,`Boolean`>>} params.transport - Return information about transport\n * @param {<<api-param-type-string,`String`>>} params.metricFamily - Limit the information returned to a certain metric family\n * @param {<<api-param-type-string,`String`>>} params.metric - Limit the information returned for `indices` family to a specific metric\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.cluster.prototype.nodeStats = ca({\n  params: {\n    all: {\n      type: 'boolean'\n    },\n    clear: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    fs: {\n      type: 'boolean'\n    },\n    http: {\n      type: 'boolean'\n    },\n    indices: {\n      type: 'boolean'\n    },\n    jvm: {\n      type: 'boolean'\n    },\n    network: {\n      type: 'boolean'\n    },\n    os: {\n      type: 'boolean'\n    },\n    process: {\n      type: 'boolean'\n    },\n    threadPool: {\n      type: 'boolean',\n      name: 'thread_pool'\n    },\n    transport: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.pendingTasks](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-pending.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.cluster.prototype.pendingTasks = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_cluster/pending_tasks'\n  }\n});\n\n/**\n * Perform a [cluster.putSettings](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.cluster.prototype.putSettings = ca({\n  url: {\n    fmt: '/_cluster/settings'\n  },\n  method: 'PUT'\n});\n\n/**\n * Perform a [cluster.reroute](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-reroute.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - Simulate the operation only and return the resulting state\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filterMetadata - Don't return cluster state metadata (default: false)\n */\napi.cluster.prototype.reroute = ca({\n  params: {\n    dryRun: {\n      type: 'boolean',\n      name: 'dry_run'\n    },\n    filterMetadata: {\n      type: 'boolean',\n      name: 'filter_metadata'\n    }\n  },\n  url: {\n    fmt: '/_cluster/reroute'\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [cluster.state](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/cluster-state.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filterBlocks - Do not return information about blocks\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filterIndexTemplates - Do not return information about index templates\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.filterIndices - Limit returned metadata information to specific indices\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filterMetadata - Do not return information about indices metadata\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filterNodes - Do not return information about nodes\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filterRoutingTable - Do not return information about shard allocation (`routing_table` and `routing_nodes`)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.cluster.prototype.state = ca({\n  params: {\n    filterBlocks: {\n      type: 'boolean',\n      name: 'filter_blocks'\n    },\n    filterIndexTemplates: {\n      type: 'boolean',\n      name: 'filter_index_templates'\n    },\n    filterIndices: {\n      type: 'list',\n      name: 'filter_indices'\n    },\n    filterMetadata: {\n      type: 'boolean',\n      name: 'filter_metadata'\n    },\n    filterNodes: {\n      type: 'boolean',\n      name: 'filter_nodes'\n    },\n    filterRoutingTable: {\n      type: 'boolean',\n      name: 'filter_routing_table'\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_cluster/state'\n  }\n});\n\n/**\n * Perform a [count](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-count.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.ignoreIndices=none] - When performed on multiple indices, allows to ignore `missing` ones\n * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded query definition (instead of using the request body)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n */\napi.count = ca({\n  params: {\n    ignoreIndices: {\n      type: 'enum',\n      'default': 'none',\n      options: [\n        'none',\n        'missing'\n      ],\n      name: 'ignore_indices'\n    },\n    minScore: {\n      type: 'number',\n      name: 'min_score'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    source: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_count'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [delete](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-delete.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Specific write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of parent document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi['delete'] = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteByQuery](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-delete-by-query.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-string,`String`>>} params.consistency - Specific write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-string,`String`>>} [params.ignoreIndices=none] - When performed on multiple indices, allows to ignore `missing` ones\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded query definition (instead of using the request body)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the operation; use `_all` to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the operation\n */\napi.deleteByQuery = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    ignoreIndices: {\n      type: 'enum',\n      'default': 'none',\n      options: [\n        'none',\n        'missing'\n      ],\n      name: 'ignore_indices'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    source: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  method: 'DELETE'\n});\n\n/**\n * Perform a [exists](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.exists = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [explain](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-explain.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer for the query string query\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The default field for query string query (default: _all)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded query definition (instead of using the request body)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.explain = ca({\n  params: {\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    fields: {\n      type: 'list'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    source: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_explain',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [get](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.get = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getSource](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types\n */\napi.getSource = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [index](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.percolate - Percolator queries to execute while indexing the document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.index = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    parent: {\n      type: 'string'\n    },\n    percolate: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'time'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\napi.indices = namespace();\n\n/**\n * Perform a [indices.analyze](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-analyze.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The name of the analyzer to use\n * @param {<<api-param-type-string,`String`>>} params.field - Use the analyzer configured for this field (instead of passing the analyzer name)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.filters - A comma-separated list of filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index to scope the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.preferLocal - With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)\n * @param {<<api-param-type-string,`String`>>} params.text - The text on which the analysis should be performed (when request body is not used)\n * @param {<<api-param-type-string,`String`>>} params.tokenizer - The name of the tokenizer to use for the analysis\n * @param {<<api-param-type-string,`String`>>} [params.format=detailed] - Format of the output\n */\napi.indices.prototype.analyze = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    field: {\n      type: 'string'\n    },\n    filters: {\n      type: 'list'\n    },\n    index: {\n      type: 'string'\n    },\n    preferLocal: {\n      type: 'boolean',\n      name: 'prefer_local'\n    },\n    text: {\n      type: 'string'\n    },\n    tokenizer: {\n      type: 'string'\n    },\n    format: {\n      type: 'enum',\n      'default': 'detailed',\n      options: [\n        'detailed',\n        'text'\n      ]\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_analyze',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_analyze'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.clearCache](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-clearcache.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fieldData - Clear field data\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fielddata - Clear field data\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to clear when using the `field_data` parameter (default: all)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filter - Clear filter caches\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filterCache - Clear filter caches\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filterKeys - A comma-separated list of keys to clear when using the `filter_cache` parameter (default: all)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.id - Clear ID caches for parent/child\n * @param {<<api-param-type-boolean,`Boolean`>>} params.idCache - Clear ID caches for parent/child\n * @param {<<api-param-type-string,`String`>>} [params.ignoreIndices=none] - When performed on multiple indices, allows to ignore `missing` ones\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index name to limit the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.recycler - Clear the recycler cache\n */\napi.indices.prototype.clearCache = ca({\n  params: {\n    fieldData: {\n      type: 'boolean',\n      name: 'field_data'\n    },\n    fielddata: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    filter: {\n      type: 'boolean'\n    },\n    filterCache: {\n      type: 'boolean',\n      name: 'filter_cache'\n    },\n    filterKeys: {\n      type: 'boolean',\n      name: 'filter_keys'\n    },\n    id: {\n      type: 'boolean'\n    },\n    idCache: {\n      type: 'boolean',\n      name: 'id_cache'\n    },\n    ignoreIndices: {\n      type: 'enum',\n      'default': 'none',\n      options: [\n        'none',\n        'missing'\n      ],\n      name: 'ignore_indices'\n    },\n    index: {\n      type: 'list'\n    },\n    recycler: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_cache/clear',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cache/clear'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.close](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.close = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_close',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.create](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-create-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.create = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.delete](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-delete-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to delete; use `_all` or empty string to delete all indices\n */\napi.indices.prototype['delete'] = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/'\n    }\n  ],\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteAlias](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index with an alias\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the alias to be deleted\n */\napi.indices.prototype.deleteAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_alias/<%=name%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteMapping](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-delete-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` for all indices\n * @param {<<api-param-type-string,`String`>>} params.type - The name of the document type to delete\n */\napi.indices.prototype.deleteMapping = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      type: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteTemplate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.deleteTemplate = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteWarmer](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to register warmer for; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the warmer (supports wildcards); leave empty to delete all warmers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to register warmer for; use `_all` or empty string to perform the operation on all types\n */\napi.indices.prototype.deleteWarmer = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.exists](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-get-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to check\n */\napi.indices.prototype.exists = ca({\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsAlias](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.ignoreIndices=none] - When performed on multiple indices, allows to ignore `missing` ones\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.existsAlias = ca({\n  params: {\n    ignoreIndices: {\n      type: 'enum',\n      'default': 'none',\n      options: [\n        'none',\n        'missing'\n      ],\n      name: 'ignore_indices'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsType](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-types-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.ignoreIndices=none] - When performed on multiple indices, allows to ignore `missing` ones\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` to check the types across all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to check\n */\napi.indices.prototype.existsType = ca({\n  params: {\n    ignoreIndices: {\n      type: 'enum',\n      'default': 'none',\n      options: [\n        'none',\n        'missing'\n      ],\n      name: 'ignore_indices'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      type: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.flush](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-flush.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.full - If set to true a new index writer is created and settings that have been changed related to the index writer will be refreshed. Note: if a full flush is required for a setting to take effect this will be part of the settings update process and it not required to be executed by the user. (This setting can be considered as internal)\n * @param {<<api-param-type-string,`String`>>} [params.ignoreIndices=none] - When performed on multiple indices, allows to ignore `missing` ones\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n */\napi.indices.prototype.flush = ca({\n  params: {\n    force: {\n      type: 'boolean'\n    },\n    full: {\n      type: 'boolean'\n    },\n    ignoreIndices: {\n      type: 'enum',\n      'default': 'none',\n      options: [\n        'none',\n        'missing'\n      ],\n      name: 'ignore_indices'\n    },\n    refresh: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_flush',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_flush'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.getAlias](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.ignoreIndices=none] - When performed on multiple indices, allows to ignore `missing` ones\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.getAlias = ca({\n  params: {\n    ignoreIndices: {\n      type: 'enum',\n      'default': 'none',\n      options: [\n        'none',\n        'missing'\n      ],\n      name: 'ignore_indices'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getAliases](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n */\napi.indices.prototype.getAliases = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_aliases',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_aliases'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getFieldMapping](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-get-field-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether the default mapping values should be returned as well\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.field - A comma-separated list of fields\n */\napi.indices.prototype.getFieldMapping = ca({\n  params: {\n    includeDefaults: {\n      type: 'boolean',\n      name: 'include_defaults'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mapping/field/<%=field%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        field: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping/field/<%=field%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        field: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/field/<%=field%>',\n      req: {\n        field: {\n          type: 'list'\n        }\n      }\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getMapping](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-get-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n */\napi.indices.prototype.getMapping = ca({\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mapping',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getSettings](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-get-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.getSettings = ca({\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getTemplate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.getTemplate = ca({\n  urls: [\n    {\n      fmt: '/_template/<%=name%>',\n      req: {\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_template'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getWarmer](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the warmer (supports wildcards); leave empty to get all warmers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n */\napi.indices.prototype.getWarmer = ca({\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ]\n});\n\n/**\n * Perform a [indices.open](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.open = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_open',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.optimize](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-optimize.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flush - Specify whether the index should be flushed after performing the operation (default: true)\n * @param {<<api-param-type-string,`String`>>} [params.ignoreIndices=none] - When performed on multiple indices, allows to ignore `missing` ones\n * @param {<<api-param-type-number,`Number`>>} params.maxNumSegments - The number of segments the index should be merged into (default: dynamic)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyExpungeDeletes - Specify whether the operation should only expunge deleted documents\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Specify whether the index should be refreshed after performing the operation (default: true)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForMerge - Specify whether the request should block until the merge process is finished (default: true)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.optimize = ca({\n  params: {\n    flush: {\n      type: 'boolean'\n    },\n    ignoreIndices: {\n      type: 'enum',\n      'default': 'none',\n      options: [\n        'none',\n        'missing'\n      ],\n      name: 'ignore_indices'\n    },\n    maxNumSegments: {\n      type: 'number',\n      name: 'max_num_segments'\n    },\n    onlyExpungeDeletes: {\n      type: 'boolean',\n      name: 'only_expunge_deletes'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    waitForMerge: {\n      type: 'boolean',\n      name: 'wait_for_merge'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_optimize',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_optimize'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.putAlias](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index with an alias\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the alias to be created or updated\n */\napi.indices.prototype.putAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_alias',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_alias'\n    }\n  ],\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putMapping](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-put-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreConflicts - Specify whether to ignore conflicts while updating the mapping (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>} params.type - The name of the document type\n */\napi.indices.prototype.putMapping = ca({\n  params: {\n    ignoreConflicts: {\n      type: 'boolean',\n      name: 'ignore_conflicts'\n    },\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/_mapping',\n    req: {\n      index: {\n        type: 'list'\n      },\n      type: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putSettings](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.putSettings = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putTemplate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.order - The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.putTemplate = ca({\n  params: {\n    order: {\n      type: 'number'\n    },\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putWarmer](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-warmers.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to register the warmer for; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the warmer\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types\n */\napi.indices.prototype.putWarmer = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_warmer/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.refresh](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-refresh.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.ignoreIndices=none] - When performed on multiple indices, allows to ignore `missing` ones\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.refresh = ca({\n  params: {\n    ignoreIndices: {\n      type: 'enum',\n      'default': 'none',\n      options: [\n        'none',\n        'missing'\n      ],\n      name: 'ignore_indices'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_refresh',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_refresh'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.segments](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-segments.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.ignoreIndices=none] - When performed on multiple indices, allows to ignore `missing` ones\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.segments = ca({\n  params: {\n    ignoreIndices: {\n      type: 'enum',\n      'default': 'none',\n      options: [\n        'none',\n        'missing'\n      ],\n      name: 'ignore_indices'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_segments',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_segments'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.snapshotIndex](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-gateway-snapshot.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.ignoreIndices=none] - When performed on multiple indices, allows to ignore `missing` ones\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n */\napi.indices.prototype.snapshotIndex = ca({\n  params: {\n    ignoreIndices: {\n      type: 'enum',\n      'default': 'none',\n      options: [\n        'none',\n        'missing'\n      ],\n      name: 'ignore_indices'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_gateway/snapshot',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_gateway/snapshot'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.stats](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.all - Return all available information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.clear - Reset the default level of detail\n * @param {<<api-param-type-boolean,`Boolean`>>} params.completion - Return information about completion suggester stats\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `completion` metric (supports wildcards)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.docs - Return information about indexed and deleted documents\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fielddata - Return information about field data\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return detailed information for, when returning the `search` statistics\n * @param {<<api-param-type-boolean,`Boolean`>>} params.filterCache - Return information about filter cache\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flush - Return information about flush operations\n * @param {<<api-param-type-boolean,`Boolean`>>} params.get - Return information about get operations\n * @param {<<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` statistics\n * @param {<<api-param-type-boolean,`Boolean`>>} params.idCache - Return information about ID cache\n * @param {<<api-param-type-string,`String`>>} [params.ignoreIndices=none] - When performed on multiple indices, allows to ignore `missing` ones\n * @param {<<api-param-type-boolean,`Boolean`>>} params.indexing - Return information about indexing operations\n * @param {<<api-param-type-boolean,`Boolean`>>} params.merge - Return information about merge operations\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Return information about refresh operations\n * @param {<<api-param-type-boolean,`Boolean`>>} params.search - Return information about search operations; use the `groups` parameter to include information for specific search groups\n * @param {<<api-param-type-boolean,`Boolean`>>} params.store - Return information about the size of the index\n * @param {<<api-param-type-boolean,`Boolean`>>} params.warmer - Return information about warmers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indexingTypes - A comma-separated list of document types to include in the `indexing` statistics\n * @param {<<api-param-type-string,`String`>>} params.metricFamily - Limit the information returned to a specific metric\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.searchGroups - A comma-separated list of search groups to include in the `search` statistics\n */\napi.indices.prototype.stats = ca({\n  params: {\n    all: {\n      type: 'boolean'\n    },\n    clear: {\n      type: 'boolean'\n    },\n    completion: {\n      type: 'boolean'\n    },\n    completionFields: {\n      type: 'list',\n      name: 'completion_fields'\n    },\n    docs: {\n      type: 'boolean'\n    },\n    fielddata: {\n      type: 'boolean'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    fields: {\n      type: 'list'\n    },\n    filterCache: {\n      type: 'boolean',\n      name: 'filter_cache'\n    },\n    flush: {\n      type: 'boolean'\n    },\n    get: {\n      type: 'boolean'\n    },\n    groups: {\n      type: 'boolean'\n    },\n    idCache: {\n      type: 'boolean',\n      name: 'id_cache'\n    },\n    ignoreIndices: {\n      type: 'enum',\n      'default': 'none',\n      options: [\n        'none',\n        'missing'\n      ],\n      name: 'ignore_indices'\n    },\n    indexing: {\n      type: 'boolean'\n    },\n    merge: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    search: {\n      type: 'boolean'\n    },\n    store: {\n      type: 'boolean'\n    },\n    warmer: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_stats',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_stats'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.status](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-status.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.ignoreIndices=none] - When performed on multiple indices, allows to ignore `missing` ones\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.recovery - Return information about shard recovery\n * @param {<<api-param-type-boolean,`Boolean`>>} params.snapshot - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.status = ca({\n  params: {\n    ignoreIndices: {\n      type: 'enum',\n      'default': 'none',\n      options: [\n        'none',\n        'missing'\n      ],\n      name: 'ignore_indices'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    recovery: {\n      type: 'boolean'\n    },\n    snapshot: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_status',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_status'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.updateAliases](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Request timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n */\napi.indices.prototype.updateAliases = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_aliases'\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.validateQuery](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-validate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return detailed information about the error\n * @param {<<api-param-type-string,`String`>>} [params.ignoreIndices=none] - When performed on multiple indices, allows to ignore `missing` ones\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded query definition (instead of using the request body)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n */\napi.indices.prototype.validateQuery = ca({\n  params: {\n    explain: {\n      type: 'boolean'\n    },\n    ignoreIndices: {\n      type: 'enum',\n      'default': 'none',\n      options: [\n        'none',\n        'missing'\n      ],\n      name: 'ignore_indices'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    source: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_validate/query'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [info](http://www.elasticsearch.org/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.info = ca({\n  url: {\n    fmt: '/'\n  }\n});\n\n/**\n * Perform a [mget](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-multi-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.mget = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mget'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mlt](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-more-like-this.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.boostTerms - The boost factor\n * @param {<<api-param-type-number,`Number`>>} params.maxDocFreq - The word occurrence frequency as count: words with higher occurrence in the corpus will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.maxQueryTerms - The maximum query terms to be included in the generated query\n * @param {<<api-param-type-number,`Number`>>} params.maxWordLen - The minimum length of the word: longer words will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.minDocFreq - The word occurrence frequency as count: words with lower occurrence in the corpus will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.minTermFreq - The term frequency as percent: terms with lower occurence in the source document will be ignored\n * @param {<<api-param-type-number,`Number`>>} params.minWordLen - The minimum length of the word: shorter words will be ignored\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.mltFields - Specific fields to perform the query against\n * @param {<<api-param-type-number,`Number`>>} params.percentTermsToMatch - How many terms have to match in order to consider the document a match (default: 0.3)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-number,`Number`>>} params.searchFrom - The offset from which to return results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.searchIndices - A comma-separated list of indices to perform the query against (default: the index containing the document)\n * @param {<<api-param-type-string,`String`>>} params.searchQueryHint - The search query hint\n * @param {<<api-param-type-string,`String`>>} params.searchScroll - A scroll search request definition\n * @param {<<api-param-type-number,`Number`>>} params.searchSize - The number of documents to return (default: 10)\n * @param {<<api-param-type-string,`String`>>} params.searchSource - A specific search request definition (instead of using the request body)\n * @param {<<api-param-type-string,`String`>>} params.searchType - Specific search type (eg. `dfs_then_fetch`, `count`, etc)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.searchTypes - A comma-separated list of types to perform the query against (default: the same type as the document)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stopWords - A list of stop words to be ignored\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.mlt = ca({\n  params: {\n    boostTerms: {\n      type: 'number',\n      name: 'boost_terms'\n    },\n    maxDocFreq: {\n      type: 'number',\n      name: 'max_doc_freq'\n    },\n    maxQueryTerms: {\n      type: 'number',\n      name: 'max_query_terms'\n    },\n    maxWordLen: {\n      type: 'number',\n      name: 'max_word_len'\n    },\n    minDocFreq: {\n      type: 'number',\n      name: 'min_doc_freq'\n    },\n    minTermFreq: {\n      type: 'number',\n      name: 'min_term_freq'\n    },\n    minWordLen: {\n      type: 'number',\n      name: 'min_word_len'\n    },\n    mltFields: {\n      type: 'list',\n      name: 'mlt_fields'\n    },\n    percentTermsToMatch: {\n      type: 'number',\n      name: 'percent_terms_to_match'\n    },\n    routing: {\n      type: 'string'\n    },\n    searchFrom: {\n      type: 'number',\n      name: 'search_from'\n    },\n    searchIndices: {\n      type: 'list',\n      name: 'search_indices'\n    },\n    searchQueryHint: {\n      type: 'string',\n      name: 'search_query_hint'\n    },\n    searchScroll: {\n      type: 'string',\n      name: 'search_scroll'\n    },\n    searchSize: {\n      type: 'number',\n      name: 'search_size'\n    },\n    searchSource: {\n      type: 'string',\n      name: 'search_source'\n    },\n    searchType: {\n      type: 'string',\n      name: 'search_type'\n    },\n    searchTypes: {\n      type: 'list',\n      name: 'search_types'\n    },\n    stopWords: {\n      type: 'list',\n      name: 'stop_words'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_mlt',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [msearch](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-multi-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n */\napi.msearch = ca({\n  params: {\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_msearch'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [percolate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.preferLocal - With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index with a registered percolator query\n * @param {<<api-param-type-string,`String`>>} params.type - The document type\n */\napi.percolate = ca({\n  params: {\n    preferLocal: {\n      type: 'boolean',\n      name: 'prefer_local'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/_percolate',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [ping](http://www.elasticsearch.org/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.ping = ca({\n  url: {\n    fmt: '/'\n  },\n  requestTimeout: 3000,\n  method: 'HEAD'\n});\n\n/**\n * Perform a [scroll](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.scrollId - The scroll ID\n */\napi.scroll = ca({\n  params: {\n    scroll: {\n      type: 'time'\n    },\n    scrollId: {\n      type: 'string',\n      name: 'scroll_id'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_search/scroll/<%=scrollId%>',\n      req: {\n        scrollId: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_search/scroll'\n    }\n  ],\n  paramAsBody: 'scrollId',\n  method: 'POST'\n});\n\n/**\n * Perform a [search](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return as part of a hit\n * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n * @param {<<api-param-type-string,`String`>>} [params.ignoreIndices=none] - When performed on multiple indices, allows to ignore `missing` ones\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indicesBoost - Comma-separated list of index boosts\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lowercaseExpandedTerms - Specify whether query terms should be lowercased\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition using the Query DSL (instead of using request body)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n * @param {<<api-param-type-string,`String`>>} params.suggestField - Specify which field to use for suggestions\n * @param {<<api-param-type-string,`String`>>} [params.suggestMode=missing] - Specify suggest mode\n * @param {<<api-param-type-number,`Number`>>} params.suggestSize - How many suggestions to return in response\n * @param {<<api-param-type-string,`String`>>} params.suggestText - The source text for which the suggestions should be returned\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.search = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    from: {\n      type: 'number'\n    },\n    ignoreIndices: {\n      type: 'enum',\n      'default': 'none',\n      options: [\n        'none',\n        'missing'\n      ],\n      name: 'ignore_indices'\n    },\n    indicesBoost: {\n      type: 'list',\n      name: 'indices_boost'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    lowercaseExpandedTerms: {\n      type: 'boolean',\n      name: 'lowercase_expanded_terms'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'time'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch',\n        'count',\n        'scan'\n      ],\n      name: 'search_type'\n    },\n    size: {\n      type: 'number'\n    },\n    sort: {\n      type: 'list'\n    },\n    source: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    stats: {\n      type: 'list'\n    },\n    suggestField: {\n      type: 'string',\n      name: 'suggest_field'\n    },\n    suggestMode: {\n      type: 'enum',\n      'default': 'missing',\n      options: [\n        'missing',\n        'popular',\n        'always'\n      ],\n      name: 'suggest_mode'\n    },\n    suggestSize: {\n      type: 'number',\n      name: 'suggest_size'\n    },\n    suggestText: {\n      type: 'string',\n      name: 'suggest_text'\n    },\n    timeout: {\n      type: 'time'\n    },\n    version: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [suggest](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/search-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.ignoreIndices=none] - When performed on multiple indices, allows to ignore `missing` ones\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.source - The URL-encoded request definition (instead of using request body)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n */\napi.suggest = ca({\n  params: {\n    ignoreIndices: {\n      type: 'enum',\n      'default': 'none',\n      options: [\n        'none',\n        'missing'\n      ],\n      name: 'ignore_indices'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    source: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_suggest',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_suggest'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [update](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-update.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.lang - The script language (default: mvel)\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.percolate - Perform percolation during the operation; use specific registered query name, attribute, or wildcard\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-number,`Number`>>} params.retryOnConflict - Specify how many times should the operation be retried when a conflict occurs (default: 0)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.script - The URL-encoded script definition (instead of using request body)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.update = ca({\n  params: {\n    consistency: {\n      type: 'enum',\n      options: [\n        'one',\n        'quorum',\n        'all'\n      ]\n    },\n    fields: {\n      type: 'list'\n    },\n    lang: {\n      type: 'string'\n    },\n    parent: {\n      type: 'string'\n    },\n    percolate: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    replication: {\n      type: 'enum',\n      'default': 'sync',\n      options: [\n        'sync',\n        'async'\n      ]\n    },\n    retryOnConflict: {\n      type: 'number',\n      name: 'retry_on_conflict'\n    },\n    routing: {\n      type: 'string'\n    },\n    script: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'time'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_update',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [create](http://www.elasticsearch.org/guide/en/elasticsearch/reference/0.90/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.consistency - Explicit write consistency setting for the operation\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.percolate - Percolator queries to execute while indexing the document\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the index after performing the operation\n * @param {<<api-param-type-string,`String`>>} [params.replication=sync] - Specific replication type\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.create = ca.proxy(api.index, {\n  transform: function (params) {\n    params.op_type = 'create';\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/apis/5_x.js":"var ca = require('../client_action').makeFactoryWithModifier(function (spec) {\n  return require('../utils').merge(spec, {\n    params: {\n      filterPath: {\n        type: 'list',\n        name: 'filter_path'\n      }\n    }\n  });\n});\nvar namespace = require('../client_action').namespaceFactory;\nvar api = module.exports = {};\n\napi._namespaces = ['cat', 'cluster', 'indices', 'ingest', 'nodes', 'snapshot', 'tasks'];\n\n/**\n * Perform a [bulk](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-bulk.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the bulk operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.type - Default document type for items which don't provide one\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - Default comma-separated list of fields to return in the response for updates, can be overridden on each sub-request\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or default list of fields to return, can be overridden on each sub-request\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - Default list of fields to exclude from the returned _source field, can be overridden on each sub-request\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - Default list of fields to extract and return from the _source field, can be overridden on each sub-request\n * @param {<<api-param-type-string,`String`>>} params.pipeline - The pipeline id to preprocess incoming documents with\n * @param {<<api-param-type-string,`String`>>} params.index - Default index for items which don't provide one\n */\napi.bulk = ca({\n  params: {\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    },\n    refresh: {\n      type: 'enum',\n      options: [\n        'true',\n        'false',\n        'wait_for',\n        ''\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    type: {\n      type: 'string'\n    },\n    fields: {\n      type: 'list'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    pipeline: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_bulk'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\napi.cat = namespace();\n\n/**\n * Perform a [cat.aliases](http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.cat.prototype.aliases = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/aliases/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/aliases'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.allocation](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-allocation.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information\n */\napi.cat.prototype.allocation = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'kb',\n        'm',\n        'mb',\n        'g',\n        'gb',\n        't',\n        'tb',\n        'p',\n        'pb'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/allocation/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/allocation'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.count](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-count.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.count = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/count/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/count'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.fielddata](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-fielddata.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return the fielddata size\n */\napi.cat.prototype.fielddata = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'kb',\n        'm',\n        'mb',\n        'g',\n        'gb',\n        't',\n        'tb',\n        'p',\n        'pb'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    },\n    fields: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/fielddata/<%=fields%>',\n      req: {\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/fielddata'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.health](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-health.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.ts=true] - Set to false to disable timestamping\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.health = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    ts: {\n      type: 'boolean',\n      'default': true\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/health'\n  }\n});\n\n/**\n * Perform a [cat.help](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n */\napi.cat.prototype.help = ca({\n  params: {\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    }\n  },\n  url: {\n    fmt: '/_cat'\n  }\n});\n\n/**\n * Perform a [cat.indices](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-indices.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-string,`String`>>} params.health - A health status (\"green\", \"yellow\", or \"red\" to filter only indices matching the specified health status\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.pri - Set to true to return stats only for primary shards\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.indices = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    health: {\n      type: 'enum',\n      'default': null,\n      options: [\n        'green',\n        'yellow',\n        'red'\n      ]\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    pri: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/indices/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/indices'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.master](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-master.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.master = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/master'\n  }\n});\n\n/**\n * Perform a [cat.nodeattrs](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-nodeattrs.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.nodeattrs = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/nodeattrs'\n  }\n});\n\n/**\n * Perform a [cat.nodes](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-nodes.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fullId - Return the full node ID instead of the shortened version (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.nodes = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    fullId: {\n      type: 'boolean',\n      name: 'full_id'\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/nodes'\n  }\n});\n\n/**\n * Perform a [cat.pendingTasks](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-pending-tasks.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.pendingTasks = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/pending_tasks'\n  }\n});\n\n/**\n * Perform a [cat.plugins](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-plugins.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.plugins = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/plugins'\n  }\n});\n\n/**\n * Perform a [cat.recovery](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-recovery.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.recovery = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'kb',\n        'm',\n        'mb',\n        'g',\n        'gb',\n        't',\n        'tb',\n        'p',\n        'pb'\n      ]\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/recovery/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/recovery'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.repositories](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-repositories.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.repositories = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean',\n      'default': false\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/repositories'\n  }\n});\n\n/**\n * Perform a [cat.segments](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-segments.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.segments = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/segments/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/segments'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.shards](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-shards.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.shards = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/shards/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/shards'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.snapshots](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Set to true to ignore unavailable snapshots\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - Name of repository from which to fetch the snapshot information\n */\napi.cat.prototype.snapshots = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      'default': false,\n      name: 'ignore_unavailable'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/snapshots/<%=repository%>',\n      req: {\n        repository: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/snapshots'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.tasks](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/tasks.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be returned. Leave empty to return all.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Return detailed task information (default: false)\n * @param {<<api-param-type-string,`String`>>} params.parentNode - Return tasks with specified parent node.\n * @param {<<api-param-type-number,`Number`>>} params.parentTask - Return tasks with specified parent task id. Set to -1 to return all.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.tasks = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    nodeId: {\n      type: 'list',\n      name: 'node_id'\n    },\n    actions: {\n      type: 'list'\n    },\n    detailed: {\n      type: 'boolean'\n    },\n    parentNode: {\n      type: 'string',\n      name: 'parent_node'\n    },\n    parentTask: {\n      type: 'number',\n      name: 'parent_task'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/tasks'\n  }\n});\n\n/**\n * Perform a [cat.templates](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>} params.name - A pattern that returned template names must match\n */\napi.cat.prototype.templates = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/templates/<%=name%>',\n      req: {\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/templates'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.threadPool](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-thread-pool.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-string,`String`>>} params.size - The multiplier in which to display values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.threadPoolPatterns - A comma-separated list of regular-expressions to filter the thread pools in the output\n */\napi.cat.prototype.threadPool = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    size: {\n      type: 'enum',\n      options: [\n        '',\n        'k',\n        'm',\n        'g',\n        't',\n        'p'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/thread_pool/<%=threadPoolPatterns%>',\n      req: {\n        threadPoolPatterns: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/thread_pool'\n    }\n  ]\n});\n\n/**\n * Perform a [clearScroll](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.scrollId - A comma-separated list of scroll IDs to clear\n */\napi.clearScroll = ca({\n  urls: [\n    {\n      fmt: '/_search/scroll/<%=scrollId%>',\n      req: {\n        scrollId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/scroll'\n    }\n  ],\n  paramAsBody: 'scrollId',\n  method: 'DELETE'\n});\n\napi.cluster = namespace();\n\n/**\n * Perform a [cluster.allocationExplain](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-allocation-explain.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.includeYesDecisions - Return 'YES' decisions in explanation (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDiskInfo - Return information about disk usage and shard sizes (default: false)\n */\napi.cluster.prototype.allocationExplain = ca({\n  params: {\n    includeYesDecisions: {\n      type: 'boolean',\n      name: 'include_yes_decisions'\n    },\n    includeDiskInfo: {\n      type: 'boolean',\n      name: 'include_disk_info'\n    }\n  },\n  url: {\n    fmt: '/_cluster/allocation/explain'\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [cluster.getSettings](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default clusters setting.\n */\napi.cluster.prototype.getSettings = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    },\n    includeDefaults: {\n      type: 'boolean',\n      'default': false,\n      name: 'include_defaults'\n    }\n  },\n  url: {\n    fmt: '/_cluster/settings'\n  }\n});\n\n/**\n * Perform a [cluster.health](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-health.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Specify the level of detail for returned information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Wait until the specified number of shards is active\n * @param {<<api-param-type-string,`String`>>} params.waitForNodes - Wait until the specified number of nodes is available\n * @param {<<api-param-type-string,`String`>>} params.waitForEvents - Wait until all currently queued events with the given priority are processed\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForNoRelocatingShards - Whether to wait until there are no relocating shards in the cluster\n * @param {<<api-param-type-string,`String`>>} params.waitForStatus - Wait until cluster is in a specific state\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - Limit the information returned to a specific index\n */\napi.cluster.prototype.health = ca({\n  params: {\n    level: {\n      type: 'enum',\n      'default': 'cluster',\n      options: [\n        'cluster',\n        'indices',\n        'shards'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    },\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    },\n    waitForNodes: {\n      type: 'string',\n      name: 'wait_for_nodes'\n    },\n    waitForEvents: {\n      type: 'enum',\n      options: [\n        'immediate',\n        'urgent',\n        'high',\n        'normal',\n        'low',\n        'languid'\n      ],\n      name: 'wait_for_events'\n    },\n    waitForNoRelocatingShards: {\n      type: 'boolean',\n      name: 'wait_for_no_relocating_shards'\n    },\n    waitForStatus: {\n      type: 'enum',\n      'default': null,\n      options: [\n        'green',\n        'yellow',\n        'red'\n      ],\n      name: 'wait_for_status'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/health/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/health'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.pendingTasks](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-pending.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.cluster.prototype.pendingTasks = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_cluster/pending_tasks'\n  }\n});\n\n/**\n * Perform a [cluster.putSettings](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.putSettings = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/settings'\n  },\n  method: 'PUT'\n});\n\n/**\n * Perform a [cluster.reroute](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-reroute.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - Simulate the operation only and return the resulting state\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return an explanation of why the commands can or cannot be executed\n * @param {<<api-param-type-boolean,`Boolean`>>} params.retryFailed - Retries allocation of shards that are blocked due to too many subsequent allocation failures\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics. Defaults to all but metadata\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.reroute = ca({\n  params: {\n    dryRun: {\n      type: 'boolean',\n      name: 'dry_run'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    retryFailed: {\n      type: 'boolean',\n      name: 'retry_failed'\n    },\n    metric: {\n      type: 'list',\n      options: [\n        '_all',\n        'blocks',\n        'metadata',\n        'nodes',\n        'routing_table',\n        'master_node',\n        'version'\n      ]\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/reroute'\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [cluster.state](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-state.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n */\napi.cluster.prototype.state = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/state/<%=metric%>/<%=index%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'blocks',\n            'metadata',\n            'nodes',\n            'routing_table',\n            'routing_nodes',\n            'master_node',\n            'version'\n          ]\n        },\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/state/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'blocks',\n            'metadata',\n            'nodes',\n            'routing_table',\n            'routing_nodes',\n            'master_node',\n            'version'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/state'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.stats](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.cluster.prototype.stats = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/stats/nodes/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/stats'\n    }\n  ]\n});\n\n/**\n * Perform a [count](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-count.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n */\napi.count = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    minScore: {\n      type: 'number',\n      name: 'min_score'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    lenient: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_count'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [countPercolate](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to count percolate the document into. Defaults to index.\n * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to count percolate document into. Defaults to type.\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being count percolated.\n * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n */\napi.countPercolate = ca({\n  params: {\n    routing: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    percolateIndex: {\n      type: 'string',\n      name: 'percolate_index'\n    },\n    percolateType: {\n      type: 'string',\n      name: 'percolate_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate/count',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_percolate/count',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [create](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the index operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.pipeline - The pipeline id to preprocess incoming documents with\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.create = ca({\n  params: {\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'enum',\n      options: [\n        'true',\n        'false',\n        'wait_for',\n        ''\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'time'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    },\n    pipeline: {\n      type: 'string'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_create',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [delete](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-delete.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the delete operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of parent document\n * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi['delete'] = ca({\n  params: {\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'enum',\n      options: [\n        'true',\n        'false',\n        'wait_for',\n        ''\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteByQuery](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-delete-by-query.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.conflicts=abort] - What to do when the delete-by-query hits version conflicts?\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.searchTimeout - Explicit timeout for each search request. Defaults to no timeout.\n * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the delete by query operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n * @param {<<api-param-type-number,`Number`>>} params.scrollSize - Size on the scroll request powering the update_by_query\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should the request should block until the delete-by-query is complete.\n * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle for this request in sub-requests per second. -1 means no throttle.\n * @param {<<api-param-type-number,`Number`>>} [params.slices=1] - The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.deleteByQuery = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    from: {\n      type: 'number'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    conflicts: {\n      type: 'enum',\n      'default': 'abort',\n      options: [\n        'abort',\n        'proceed'\n      ]\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'time'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'dfs_query_then_fetch'\n      ],\n      name: 'search_type'\n    },\n    searchTimeout: {\n      type: 'time',\n      name: 'search_timeout'\n    },\n    size: {\n      type: 'number'\n    },\n    sort: {\n      type: 'list'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    terminateAfter: {\n      type: 'number',\n      name: 'terminate_after'\n    },\n    stats: {\n      type: 'list'\n    },\n    version: {\n      type: 'boolean'\n    },\n    requestCache: {\n      type: 'boolean',\n      name: 'request_cache'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    timeout: {\n      type: 'time',\n      'default': '1m'\n    },\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    },\n    scrollSize: {\n      type: 'number',\n      name: 'scroll_size'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    },\n    requestsPerSecond: {\n      type: 'number',\n      'default': 0,\n      name: 'requests_per_second'\n    },\n    slices: {\n      type: 'integer',\n      'default': 1\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_delete_by_query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_delete_by_query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [deleteScript](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.deleteScript = ca({\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.deleteTemplate = ca({\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [exists](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.exists = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [explain](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-explain.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer for the query string query\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The default field for query string query (default: _all)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.explain = ca({\n  params: {\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    storedFields: {\n      type: 'list',\n      name: 'stored_fields'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_explain',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [fieldStats](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-field-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for to get field statistics for (min value, max value, and more)\n * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Defines if field stats should be returned on a per index level or on a cluster wide level\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.fieldStats = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    level: {\n      type: 'enum',\n      'default': 'cluster',\n      options: [\n        'indices',\n        'cluster'\n      ]\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_field_stats',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_field_stats'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [get](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.get = ca({\n  params: {\n    storedFields: {\n      type: 'list',\n      name: 'stored_fields'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getScript](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.getScript = ca({\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getSource](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types\n */\napi.getSource = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.getTemplate = ca({\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [index](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the index operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.pipeline - The pipeline id to preprocess incoming documents with\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.index = ca({\n  params: {\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    },\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'enum',\n      options: [\n        'true',\n        'false',\n        'wait_for',\n        ''\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'time'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    },\n    pipeline: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\napi.indices = namespace();\n\n/**\n * Perform a [indices.analyze](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-analyze.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The name of the analyzer to use\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.charFilter - A comma-separated list of character filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>} params.field - Use the analyzer configured for this field (instead of passing the analyzer name)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.filter - A comma-separated list of filters to use for the analysis\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index to scope the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.preferLocal - With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.text - The text on which the analysis should be performed (when request body is not used)\n * @param {<<api-param-type-string,`String`>>} params.tokenizer - The name of the tokenizer to use for the analysis\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - With `true`, outputs more advanced details. (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.attributes - A comma-separated list of token attributes to output, this parameter works only with `explain=true`\n * @param {<<api-param-type-string,`String`>>} [params.format=detailed] - Format of the output\n */\napi.indices.prototype.analyze = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    charFilter: {\n      type: 'list',\n      name: 'char_filter'\n    },\n    field: {\n      type: 'string'\n    },\n    filter: {\n      type: 'list'\n    },\n    index: {\n      type: 'string'\n    },\n    preferLocal: {\n      type: 'boolean',\n      name: 'prefer_local'\n    },\n    text: {\n      type: 'list'\n    },\n    tokenizer: {\n      type: 'string'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    attributes: {\n      type: 'list'\n    },\n    format: {\n      type: 'enum',\n      'default': 'detailed',\n      options: [\n        'detailed',\n        'text'\n      ]\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_analyze',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_analyze'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.clearCache](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-clearcache.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fieldData - Clear field data\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fielddata - Clear field data\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to clear when using the `field_data` parameter (default: all)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.query - Clear query caches\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index name to limit the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.recycler - Clear the recycler cache\n * @param {<<api-param-type-boolean,`Boolean`>>} params.request - Clear request cache\n */\napi.indices.prototype.clearCache = ca({\n  params: {\n    fieldData: {\n      type: 'boolean',\n      name: 'field_data'\n    },\n    fielddata: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    query: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    index: {\n      type: 'list'\n    },\n    recycler: {\n      type: 'boolean'\n    },\n    request: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_cache/clear',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cache/clear'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.close](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma separated list of indices to close\n */\napi.indices.prototype.close = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_close',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.create](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-create-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for before the operation returns.\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.updateAllTypes - Whether to update the mapping for all fields with the same name across all types or not\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.create = ca({\n  params: {\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    },\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    updateAllTypes: {\n      type: 'boolean',\n      name: 'update_all_types'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.delete](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-delete-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices\n */\napi.indices.prototype['delete'] = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteAlias](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.\n */\napi.indices.prototype.deleteAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_alias/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.deleteTemplate = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.exists](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to check\n */\napi.indices.prototype.exists = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsAlias](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.existsAlias = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': [\n        'open',\n        'closed'\n      ],\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_alias',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.existsTemplate = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsType](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-types-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` to check the types across all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to check\n */\napi.indices.prototype.existsType = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_mapping/<%=type%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      type: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.flush](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-flush.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitIfOngoing - If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. The default is true. If set to false the flush will be skipped iff if another flush operation is already running.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n */\napi.indices.prototype.flush = ca({\n  params: {\n    force: {\n      type: 'boolean'\n    },\n    waitIfOngoing: {\n      type: 'boolean',\n      name: 'wait_if_ongoing'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_flush',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_flush'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.flushSynced](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-synced-flush.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n */\napi.indices.prototype.flushSynced = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_flush/synced',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_flush/synced'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.forcemerge](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-forcemerge.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flush - Specify whether the index should be flushed after performing the operation (default: true)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.maxNumSegments - The number of segments the index should be merged into (default: dynamic)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyExpungeDeletes - Specify whether the operation should only expunge deleted documents\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForMerge - Specify whether the request should block until the merge process is finished (default: true)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.forcemerge = ca({\n  params: {\n    flush: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    maxNumSegments: {\n      type: 'number',\n      name: 'max_num_segments'\n    },\n    onlyExpungeDeletes: {\n      type: 'boolean',\n      name: 'only_expunge_deletes'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    waitForMerge: {\n      type: 'boolean',\n      name: 'wait_for_merge'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_forcemerge',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_forcemerge'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.get](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-get-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Ignore unavailable indexes (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return version and creation date values in human-readable format.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default setting for each of the indices.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.feature - A comma-separated list of features\n */\napi.indices.prototype.get = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    includeDefaults: {\n      type: 'boolean',\n      'default': false,\n      name: 'include_defaults'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=feature%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        feature: {\n          type: 'list',\n          options: [\n            '_settings',\n            '_mappings',\n            '_aliases'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getAlias](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=all] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.getAlias = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'all',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_alias',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getFieldMapping](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-get-field-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether the default mapping values should be returned as well\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields\n */\napi.indices.prototype.getFieldMapping = ca({\n  params: {\n    includeDefaults: {\n      type: 'boolean',\n      name: 'include_defaults'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>/field/<%=fields%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping/field/<%=fields%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>/field/<%=fields%>',\n      req: {\n        type: {\n          type: 'list'\n        },\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/field/<%=fields%>',\n      req: {\n        fields: {\n          type: 'list'\n        }\n      }\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getMapping](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-get-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n */\napi.indices.prototype.getMapping = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>',\n      req: {\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getSettings](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-get-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return version and creation date values in human-readable format.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default setting for each of the indices.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the settings that should be included\n */\napi.indices.prototype.getSettings = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': [\n        'open',\n        'closed'\n      ],\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    local: {\n      type: 'boolean'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    includeDefaults: {\n      type: 'boolean',\n      'default': false,\n      name: 'include_defaults'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The comma separated names of the index templates\n */\napi.indices.prototype.getTemplate = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_template/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_template'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getUpgrade](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-upgrade.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.getUpgrade = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_upgrade',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_upgrade'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.open](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma separated list of indices to open\n */\napi.indices.prototype.open = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'closed',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_open',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.putAlias](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the alias to be created or updated\n */\napi.indices.prototype.putAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_alias/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putMapping](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-put-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.updateAllTypes - Whether to update the mapping for all fields with the same name across all types or not\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.\n * @param {<<api-param-type-string,`String`>>} params.type - The name of the document type\n */\napi.indices.prototype.putMapping = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    updateAllTypes: {\n      type: 'boolean',\n      name: 'update_all_types'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>',\n      req: {\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putSettings](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.preserveExisting - Whether to update existing settings. If set to `true` existing settings on an index remain unchanged, the default is `false`\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.putSettings = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    preserveExisting: {\n      type: 'boolean',\n      name: 'preserve_existing'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.order - The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.create - Whether the index template should only be added if new or can also replace an existing one\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.putTemplate = ca({\n  params: {\n    order: {\n      type: 'number'\n    },\n    create: {\n      type: 'boolean',\n      'default': false\n    },\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.recovery](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-recovery.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Whether to display detailed information about shard recovery\n * @param {<<api-param-type-boolean,`Boolean`>>} params.activeOnly - Display only those recoveries that are currently on-going\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.recovery = ca({\n  params: {\n    detailed: {\n      type: 'boolean',\n      'default': false\n    },\n    activeOnly: {\n      type: 'boolean',\n      'default': false,\n      name: 'active_only'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_recovery',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_recovery'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.refresh](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-refresh.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Force a refresh even if not required\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.refresh = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    force: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_refresh',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_refresh'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.rollover](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-rollover-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - If set to true the rollover action will only be validated but not actually performed even if a condition matches. The default is false\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for on the newly created rollover index before the operation returns.\n * @param {<<api-param-type-string,`String`>>} params.alias - The name of the alias to rollover\n * @param {<<api-param-type-string,`String`>>} params.newIndex - The name of the rollover index\n */\napi.indices.prototype.rollover = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    dryRun: {\n      type: 'boolean',\n      name: 'dry_run'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=alias%>/_rollover/<%=newIndex%>',\n      req: {\n        alias: {\n          type: 'string'\n        },\n        newIndex: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=alias%>/_rollover',\n      req: {\n        alias: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.segments](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-segments.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Includes detailed memory usage by Lucene.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.segments = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    verbose: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_segments',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_segments'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.shardStores](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-shards-stores.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.status - A comma-separated list of statuses used to filter on shards to get store information for\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.shardStores = ca({\n  params: {\n    status: {\n      type: 'list',\n      options: [\n        'green',\n        'yellow',\n        'red',\n        'all'\n      ]\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_shard_stores',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_shard_stores'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.shrink](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-shrink-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for on the shrunken index before the operation returns.\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the source index to shrink\n * @param {<<api-param-type-string,`String`>>} params.target - The name of the target index to shrink into\n */\napi.indices.prototype.shrink = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_shrink/<%=target%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      target: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.stats](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>} [params.level=indices] - Return stats aggregated at cluster, index or shard level\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned the specific metrics.\n */\napi.indices.prototype.stats = ca({\n  params: {\n    completionFields: {\n      type: 'list',\n      name: 'completion_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    fields: {\n      type: 'list'\n    },\n    groups: {\n      type: 'list'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    level: {\n      type: 'enum',\n      'default': 'indices',\n      options: [\n        'cluster',\n        'indices',\n        'shards'\n      ]\n    },\n    types: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_stats/<%=metric%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'query_cache',\n            'flush',\n            'get',\n            'indexing',\n            'merge',\n            'percolate',\n            'request_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_stats/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'query_cache',\n            'flush',\n            'get',\n            'indexing',\n            'merge',\n            'percolate',\n            'request_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_stats',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_stats'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.updateAliases](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Request timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.indices.prototype.updateAliases = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_aliases'\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.upgrade](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-upgrade.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Specify whether the request should block until the all segments are upgraded (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyAncientSegments - If true, only ancient (an older Lucene major release) segments will be upgraded\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.upgrade = ca({\n  params: {\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      name: 'wait_for_completion'\n    },\n    onlyAncientSegments: {\n      type: 'boolean',\n      name: 'only_ancient_segments'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_upgrade',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_upgrade'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.validateQuery](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-validate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return detailed information about the error\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.rewrite - Provide a more detailed explanation showing the actual Lucene query that will be executed.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n */\napi.indices.prototype.validateQuery = ca({\n  params: {\n    explain: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    q: {\n      type: 'string'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    rewrite: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_validate/query'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [info](https://www.elastic.co/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.info = ca({\n  url: {\n    fmt: '/'\n  }\n});\n\napi.ingest = namespace();\n\n/**\n * Perform a [ingest.deletePipeline](https://www.elastic.co/guide/en/elasticsearch/plugins/5.x/ingest.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.id - Pipeline ID\n */\napi.ingest.prototype.deletePipeline = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_ingest/pipeline/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [ingest.getPipeline](https://www.elastic.co/guide/en/elasticsearch/plugins/5.x/ingest.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.id - Comma separated list of pipeline ids. Wildcards supported\n */\napi.ingest.prototype.getPipeline = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_ingest/pipeline/<%=id%>',\n      req: {\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_ingest/pipeline'\n    }\n  ]\n});\n\n/**\n * Perform a [ingest.putPipeline](https://www.elastic.co/guide/en/elasticsearch/plugins/5.x/ingest.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.id - Pipeline ID\n */\napi.ingest.prototype.putPipeline = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_ingest/pipeline/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [ingest.simulate](https://www.elastic.co/guide/en/elasticsearch/plugins/5.x/ingest.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Verbose mode. Display data output for each processor in executed pipeline\n * @param {<<api-param-type-string,`String`>>} params.id - Pipeline ID\n */\napi.ingest.prototype.simulate = ca({\n  params: {\n    verbose: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_ingest/pipeline/<%=id%>/_simulate',\n      req: {\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_ingest/pipeline/_simulate'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mget](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-multi-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.mget = ca({\n  params: {\n    storedFields: {\n      type: 'list',\n      name: 'stored_fields'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mget'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mpercolate](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated to use as default\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated to use as default.\n */\napi.mpercolate = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mpercolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mpercolate',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mpercolate'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [msearch](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-multi-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-number,`Number`>>} params.maxConcurrentSearches - Controls the maximum number of concurrent searches the multi search api will execute\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n */\napi.msearch = ca({\n  params: {\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch'\n      ],\n      name: 'search_type'\n    },\n    maxConcurrentSearches: {\n      type: 'number',\n      name: 'max_concurrent_searches'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_msearch'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [msearchTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n */\napi.msearchTemplate = ca({\n  params: {\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch'\n      ],\n      name: 'search_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_msearch/template',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_msearch/template',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_msearch/template'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mtermvectors](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-multi-termvectors.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.ids - A comma-separated list of documents ids. You must define ids as parameter or set \"ids\" or \"docs\" in the request body\n * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if requests are real-time as opposed to near-real-time (default: true).\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n */\napi.mtermvectors = ca({\n  params: {\n    ids: {\n      type: 'list',\n      required: false\n    },\n    termStatistics: {\n      type: 'boolean',\n      'default': false,\n      required: false,\n      name: 'term_statistics'\n    },\n    fieldStatistics: {\n      type: 'boolean',\n      'default': true,\n      required: false,\n      name: 'field_statistics'\n    },\n    fields: {\n      type: 'list',\n      required: false\n    },\n    offsets: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    positions: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    payloads: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    preference: {\n      type: 'string',\n      required: false\n    },\n    routing: {\n      type: 'string',\n      required: false\n    },\n    parent: {\n      type: 'string',\n      required: false\n    },\n    realtime: {\n      type: 'boolean',\n      required: false\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mtermvectors',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mtermvectors',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mtermvectors'\n    }\n  ],\n  method: 'POST'\n});\n\napi.nodes = namespace();\n\n/**\n * Perform a [nodes.hotThreads](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-nodes-hot-threads.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.interval - The interval for the second sampling of threads\n * @param {<<api-param-type-number,`Number`>>} params.snapshots - Number of samples of thread stacktrace (default: 10)\n * @param {<<api-param-type-number,`Number`>>} params.threads - Specify the number of threads to provide information for (default: 3)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreIdleThreads - Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue (default: true)\n * @param {<<api-param-type-string,`String`>>} params.type - The type to sample (default: cpu)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.nodes.prototype.hotThreads = ca({\n  params: {\n    interval: {\n      type: 'time'\n    },\n    snapshots: {\n      type: 'number'\n    },\n    threads: {\n      type: 'number'\n    },\n    ignoreIdleThreads: {\n      type: 'boolean',\n      name: 'ignore_idle_threads'\n    },\n    type: {\n      type: 'enum',\n      options: [\n        'cpu',\n        'wait',\n        'block'\n      ]\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/hotthreads',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/hotthreads'\n    }\n  ]\n});\n\n/**\n * Perform a [nodes.info](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-nodes-info.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - A comma-separated list of metrics you wish returned. Leave empty to return all.\n */\napi.nodes.prototype.info = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/<%=metric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            'settings',\n            'os',\n            'process',\n            'jvm',\n            'thread_pool',\n            'transport',\n            'http',\n            'plugins',\n            'ingest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            'settings',\n            'os',\n            'process',\n            'jvm',\n            'thread_pool',\n            'transport',\n            'http',\n            'plugins',\n            'ingest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes'\n    }\n  ]\n});\n\n/**\n * Perform a [nodes.stats](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-nodes-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>} [params.level=node] - Return indices stats aggregated at index, node or shard level\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indexMetric - Limit the information returned for `indices` metric to the specific index metrics. Isn't used if `indices` (or `all`) metric isn't specified.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.nodes.prototype.stats = ca({\n  params: {\n    completionFields: {\n      type: 'list',\n      name: 'completion_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    fields: {\n      type: 'list'\n    },\n    groups: {\n      type: 'boolean'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    level: {\n      type: 'enum',\n      'default': 'node',\n      options: [\n        'indices',\n        'node',\n        'shards'\n      ]\n    },\n    types: {\n      type: 'list'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>/<%=indexMetric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'os',\n            'process',\n            'thread_pool',\n            'transport',\n            'discovery'\n          ]\n        },\n        indexMetric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'query_cache',\n            'flush',\n            'get',\n            'indexing',\n            'merge',\n            'percolate',\n            'request_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'os',\n            'process',\n            'thread_pool',\n            'transport',\n            'discovery'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats/<%=metric%>/<%=indexMetric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'os',\n            'process',\n            'thread_pool',\n            'transport',\n            'discovery'\n          ]\n        },\n        indexMetric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'query_cache',\n            'flush',\n            'get',\n            'indexing',\n            'merge',\n            'percolate',\n            'request_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'os',\n            'process',\n            'thread_pool',\n            'transport',\n            'discovery'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats'\n    }\n  ]\n});\n\n/**\n * Perform a [percolate](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to percolate the document into. Defaults to index.\n * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to percolate document into. Defaults to type.\n * @param {<<api-param-type-string,`String`>>} params.percolateRouting - The routing value to use when percolating the existing document.\n * @param {<<api-param-type-string,`String`>>} params.percolatePreference - Which shard to prefer when executing the percolate request.\n * @param {<<api-param-type-string,`String`>>} params.percolateFormat - Return an array of matching query IDs instead of objects\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being percolated.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated.\n * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n */\napi.percolate = ca({\n  params: {\n    routing: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    percolateIndex: {\n      type: 'string',\n      name: 'percolate_index'\n    },\n    percolateType: {\n      type: 'string',\n      name: 'percolate_type'\n    },\n    percolateRouting: {\n      type: 'string',\n      name: 'percolate_routing'\n    },\n    percolatePreference: {\n      type: 'string',\n      name: 'percolate_preference'\n    },\n    percolateFormat: {\n      type: 'enum',\n      options: [\n        'ids'\n      ],\n      name: 'percolate_format'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_percolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [ping](https://www.elastic.co/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.ping = ca({\n  url: {\n    fmt: '/'\n  },\n  requestTimeout: 3000,\n  method: 'HEAD'\n});\n\n/**\n * Perform a [putScript](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.putScript = ca({\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [putTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.putTemplate = ca({\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [reindex](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-reindex.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the reindex operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should the request should block until the reindex is complete.\n * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in sub-requests per second. -1 means no throttle.\n * @param {<<api-param-type-number,`Number`>>} [params.slices=1] - The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.\n */\napi.reindex = ca({\n  params: {\n    refresh: {\n      type: 'boolean'\n    },\n    timeout: {\n      type: 'time',\n      'default': '1m'\n    },\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    },\n    requestsPerSecond: {\n      type: 'number',\n      'default': 0,\n      name: 'requests_per_second'\n    },\n    slices: {\n      type: 'integer',\n      'default': 1\n    }\n  },\n  url: {\n    fmt: '/_reindex'\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [reindexRethrottle](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-reindex.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in floating sub-requests per second. -1 means set no throttle.\n * @param {<<api-param-type-string,`String`>>} params.taskId - The task id to rethrottle\n */\napi.reindexRethrottle = ca({\n  params: {\n    requestsPerSecond: {\n      type: 'number',\n      required: true,\n      name: 'requests_per_second'\n    }\n  },\n  url: {\n    fmt: '/_reindex/<%=taskId%>/_rethrottle',\n    req: {\n      taskId: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [renderSearchTemplate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/5.x/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.id - The id of the stored search template\n */\napi.renderSearchTemplate = ca({\n  urls: [\n    {\n      fmt: '/_render/template/<%=id%>',\n      req: {\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_render/template'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [scroll](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.scrollId - The scroll ID\n */\napi.scroll = ca({\n  params: {\n    scroll: {\n      type: 'time'\n    },\n    scrollId: {\n      type: 'string',\n      name: 'scroll_id'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_search/scroll/<%=scrollId%>',\n      req: {\n        scrollId: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_search/scroll'\n    }\n  ],\n  paramAsBody: 'scrollId',\n  method: 'POST'\n});\n\n/**\n * Perform a [search](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.docvalueFields - A comma-separated list of fields to return as the docvalue representation of a field for each hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields to return as the docvalue representation of a field for each hit\n * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n * @param {<<api-param-type-string,`String`>>} params.suggestField - Specify which field to use for suggestions\n * @param {<<api-param-type-string,`String`>>} [params.suggestMode=missing] - Specify suggest mode\n * @param {<<api-param-type-number,`Number`>>} params.suggestSize - How many suggestions to return in response\n * @param {<<api-param-type-string,`String`>>} params.suggestText - The source text for which the suggestions should be returned\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.trackScores - Whether to calculate and return scores even if they are not used for sorting\n * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.search = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    storedFields: {\n      type: 'list',\n      name: 'stored_fields'\n    },\n    docvalueFields: {\n      type: 'list',\n      name: 'docvalue_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    from: {\n      type: 'number'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'time'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'dfs_query_then_fetch'\n      ],\n      name: 'search_type'\n    },\n    size: {\n      type: 'number'\n    },\n    sort: {\n      type: 'list'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    terminateAfter: {\n      type: 'number',\n      name: 'terminate_after'\n    },\n    stats: {\n      type: 'list'\n    },\n    suggestField: {\n      type: 'string',\n      name: 'suggest_field'\n    },\n    suggestMode: {\n      type: 'enum',\n      'default': 'missing',\n      options: [\n        'missing',\n        'popular',\n        'always'\n      ],\n      name: 'suggest_mode'\n    },\n    suggestSize: {\n      type: 'number',\n      name: 'suggest_size'\n    },\n    suggestText: {\n      type: 'string',\n      name: 'suggest_text'\n    },\n    timeout: {\n      type: 'time'\n    },\n    trackScores: {\n      type: 'boolean',\n      name: 'track_scores'\n    },\n    version: {\n      type: 'boolean'\n    },\n    requestCache: {\n      type: 'boolean',\n      name: 'request_cache'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchShards](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-shards.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.searchShards = ca({\n  params: {\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search_shards',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search_shards',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search_shards'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchTemplate](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n * @param {<<api-param-type-boolean,`Boolean`>>} params.profile - Specify whether to profile the query execution\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.searchTemplate = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'time'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch'\n      ],\n      name: 'search_type'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    profile: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search/template',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search/template',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/template'\n    }\n  ],\n  method: 'POST'\n});\n\napi.snapshot = namespace();\n\n/**\n * Perform a [snapshot.create](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype.create = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.createRepository](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.verify - Whether to verify the repository after creation\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n */\napi.snapshot.prototype.createRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    },\n    verify: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>',\n    req: {\n      repository: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.delete](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype['delete'] = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [snapshot.deleteRepository](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n */\napi.snapshot.prototype.deleteRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>',\n    req: {\n      repository: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [snapshot.get](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n */\napi.snapshot.prototype.get = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'list'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [snapshot.getRepository](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n */\napi.snapshot.prototype.getRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_snapshot/<%=repository%>',\n      req: {\n        repository: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot'\n    }\n  ]\n});\n\n/**\n * Perform a [snapshot.restore](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype.restore = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_restore',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.status](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n */\napi.snapshot.prototype.status = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_status',\n      req: {\n        repository: {\n          type: 'string'\n        },\n        snapshot: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot/<%=repository%>/_status',\n      req: {\n        repository: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot/_status'\n    }\n  ]\n});\n\n/**\n * Perform a [snapshot.verifyRepository](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n */\napi.snapshot.prototype.verifyRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/_verify',\n    req: {\n      repository: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [suggest](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-suggesters.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n */\napi.suggest = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_suggest',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_suggest'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\napi.tasks = namespace();\n\n/**\n * Perform a [tasks.cancel](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/tasks.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be cancelled. Leave empty to cancel all.\n * @param {<<api-param-type-string,`String`>>} params.parentNode - Cancel tasks with specified parent node.\n * @param {<<api-param-type-string,`String`>>} params.parentTask - Cancel tasks with specified parent task id (node_id:task_number). Set to -1 to cancel all.\n * @param {<<api-param-type-string,`String`>>} params.taskId - Cancel the task with specified task id (node_id:task_number)\n */\napi.tasks.prototype.cancel = ca({\n  params: {\n    nodeId: {\n      type: 'list',\n      name: 'node_id'\n    },\n    actions: {\n      type: 'list'\n    },\n    parentNode: {\n      type: 'string',\n      name: 'parent_node'\n    },\n    parentTask: {\n      type: 'string',\n      name: 'parent_task'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_tasks/<%=taskId%>/_cancel',\n      req: {\n        taskId: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_tasks/_cancel'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [tasks.get](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/tasks.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Wait for the matching tasks to complete (default: false)\n * @param {<<api-param-type-string,`String`>>} params.taskId - Return the task with specified id (node_id:task_number)\n */\napi.tasks.prototype.get = ca({\n  params: {\n    waitForCompletion: {\n      type: 'boolean',\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_tasks/<%=taskId%>',\n    req: {\n      taskId: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [tasks.list](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/tasks.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be returned. Leave empty to return all.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Return detailed task information (default: false)\n * @param {<<api-param-type-string,`String`>>} params.parentNode - Return tasks with specified parent node.\n * @param {<<api-param-type-string,`String`>>} params.parentTask - Return tasks with specified parent task id (node_id:task_number). Set to -1 to return all.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Wait for the matching tasks to complete (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.groupBy=nodes] - Group tasks by nodes or parent/child relationships\n */\napi.tasks.prototype.list = ca({\n  params: {\n    nodeId: {\n      type: 'list',\n      name: 'node_id'\n    },\n    actions: {\n      type: 'list'\n    },\n    detailed: {\n      type: 'boolean'\n    },\n    parentNode: {\n      type: 'string',\n      name: 'parent_node'\n    },\n    parentTask: {\n      type: 'string',\n      name: 'parent_task'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      name: 'wait_for_completion'\n    },\n    groupBy: {\n      type: 'enum',\n      'default': 'nodes',\n      options: [\n        'nodes',\n        'parents'\n      ],\n      name: 'group_by'\n    }\n  },\n  url: {\n    fmt: '/_tasks'\n  }\n});\n\n/**\n * Perform a [termvectors](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-termvectors.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random).\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value.\n * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if request is real-time as opposed to near-real-time (default: true).\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n * @param {<<api-param-type-string,`String`>>} params.id - The id of the document, when not specified a doc param should be supplied.\n */\napi.termvectors = ca({\n  params: {\n    termStatistics: {\n      type: 'boolean',\n      'default': false,\n      required: false,\n      name: 'term_statistics'\n    },\n    fieldStatistics: {\n      type: 'boolean',\n      'default': true,\n      required: false,\n      name: 'field_statistics'\n    },\n    fields: {\n      type: 'list',\n      required: false\n    },\n    offsets: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    positions: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    payloads: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    preference: {\n      type: 'string',\n      required: false\n    },\n    routing: {\n      type: 'string',\n      required: false\n    },\n    parent: {\n      type: 'string',\n      required: false\n    },\n    realtime: {\n      type: 'boolean',\n      required: false\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_termvectors',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_termvectors',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [update](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-update.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the update operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.lang - The script language (default: groovy)\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document. Is is only used for routing and when for the upsert request\n * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n * @param {<<api-param-type-number,`Number`>>} params.retryOnConflict - Specify how many times should the operation be retried when a conflict occurs (default: 0)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.update = ca({\n  params: {\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    },\n    fields: {\n      type: 'list'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    lang: {\n      type: 'string'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'enum',\n      options: [\n        'true',\n        'false',\n        'wait_for',\n        ''\n      ]\n    },\n    retryOnConflict: {\n      type: 'number',\n      name: 'retry_on_conflict'\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'time'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_update',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [updateByQuery](https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-update-by-query.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.conflicts=abort] - What to do when the update by query hits version conflicts?\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-string,`String`>>} params.pipeline - Ingest pipeline to set on index requests made by this action. (default: none)\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.searchTimeout - Explicit timeout for each search request. Defaults to no timeout.\n * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n * @param {<<api-param-type-boolean,`Boolean`>>} params.versionType - Should the document increment the version number (internal) on hit or not (reindex)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the update by query operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n * @param {<<api-param-type-number,`Number`>>} params.scrollSize - Size on the scroll request powering the update_by_query\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should the request should block until the update by query operation is complete.\n * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in sub-requests per second. -1 means no throttle.\n * @param {<<api-param-type-number,`Number`>>} [params.slices=1] - The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.updateByQuery = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    from: {\n      type: 'number'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    conflicts: {\n      type: 'enum',\n      'default': 'abort',\n      options: [\n        'abort',\n        'proceed'\n      ]\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    pipeline: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'time'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'dfs_query_then_fetch'\n      ],\n      name: 'search_type'\n    },\n    searchTimeout: {\n      type: 'time',\n      name: 'search_timeout'\n    },\n    size: {\n      type: 'number'\n    },\n    sort: {\n      type: 'list'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    terminateAfter: {\n      type: 'number',\n      name: 'terminate_after'\n    },\n    stats: {\n      type: 'list'\n    },\n    version: {\n      type: 'boolean'\n    },\n    versionType: {\n      type: 'boolean',\n      name: 'version_type'\n    },\n    requestCache: {\n      type: 'boolean',\n      name: 'request_cache'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    timeout: {\n      type: 'time',\n      'default': '1m'\n    },\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    },\n    scrollSize: {\n      type: 'number',\n      name: 'scroll_size'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    },\n    requestsPerSecond: {\n      type: 'number',\n      'default': 0,\n      name: 'requests_per_second'\n    },\n    slices: {\n      type: 'integer',\n      'default': 1\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_update_by_query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_update_by_query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n","/home/travis/build/npmtest/node-npmtest-elasticsearch/node_modules/elasticsearch/src/lib/apis/master.js":"var ca = require('../client_action').makeFactoryWithModifier(function (spec) {\n  return require('../utils').merge(spec, {\n    params: {\n      filterPath: {\n        type: 'list',\n        name: 'filter_path'\n      }\n    }\n  });\n});\nvar namespace = require('../client_action').namespaceFactory;\nvar api = module.exports = {};\n\napi._namespaces = ['cat', 'cluster', 'indices', 'ingest', 'nodes', 'snapshot', 'tasks'];\n\n/**\n * Perform a [bulk](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-bulk.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the bulk operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.type - Default document type for items which don't provide one\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - Default comma-separated list of fields to return in the response for updates, can be overridden on each sub-request\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or default list of fields to return, can be overridden on each sub-request\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - Default list of fields to exclude from the returned _source field, can be overridden on each sub-request\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - Default list of fields to extract and return from the _source field, can be overridden on each sub-request\n * @param {<<api-param-type-string,`String`>>} params.pipeline - The pipeline id to preprocess incoming documents with\n * @param {<<api-param-type-string,`String`>>} params.index - Default index for items which don't provide one\n */\napi.bulk = ca({\n  params: {\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    },\n    refresh: {\n      type: 'enum',\n      options: [\n        'true',\n        'false',\n        'wait_for',\n        ''\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    type: {\n      type: 'string'\n    },\n    fields: {\n      type: 'list'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    pipeline: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_bulk',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_bulk'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\napi.cat = namespace();\n\n/**\n * Perform a [cat.aliases](http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/cat.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.cat.prototype.aliases = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/aliases/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/aliases'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.allocation](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-allocation.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information\n */\napi.cat.prototype.allocation = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'kb',\n        'm',\n        'mb',\n        'g',\n        'gb',\n        't',\n        'tb',\n        'p',\n        'pb'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/allocation/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/allocation'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.count](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-count.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.count = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/count/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/count'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.fielddata](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-fielddata.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return the fielddata size\n */\napi.cat.prototype.fielddata = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'kb',\n        'm',\n        'mb',\n        'g',\n        'gb',\n        't',\n        'tb',\n        'p',\n        'pb'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    },\n    fields: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/fielddata/<%=fields%>',\n      req: {\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/fielddata'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.health](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-health.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.ts=true] - Set to false to disable timestamping\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.health = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    ts: {\n      type: 'boolean',\n      'default': true\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/health'\n  }\n});\n\n/**\n * Perform a [cat.help](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n */\napi.cat.prototype.help = ca({\n  params: {\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    }\n  },\n  url: {\n    fmt: '/_cat'\n  }\n});\n\n/**\n * Perform a [cat.indices](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-indices.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-string,`String`>>} params.health - A health status (\"green\", \"yellow\", or \"red\" to filter only indices matching the specified health status\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.pri - Set to true to return stats only for primary shards\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.indices = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'm',\n        'g'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    health: {\n      type: 'enum',\n      'default': null,\n      options: [\n        'green',\n        'yellow',\n        'red'\n      ]\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    pri: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/indices/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/indices'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.master](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-master.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.master = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/master'\n  }\n});\n\n/**\n * Perform a [cat.nodeattrs](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-nodeattrs.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.nodeattrs = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/nodeattrs'\n  }\n});\n\n/**\n * Perform a [cat.nodes](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-nodes.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fullId - Return the full node ID instead of the shortened version (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.nodes = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    fullId: {\n      type: 'boolean',\n      name: 'full_id'\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/nodes'\n  }\n});\n\n/**\n * Perform a [cat.pendingTasks](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-pending-tasks.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.pendingTasks = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/pending_tasks'\n  }\n});\n\n/**\n * Perform a [cat.plugins](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-plugins.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.plugins = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/plugins'\n  }\n});\n\n/**\n * Perform a [cat.recovery](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-recovery.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-string,`String`>>} params.bytes - The unit in which to display byte values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.recovery = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    bytes: {\n      type: 'enum',\n      options: [\n        'b',\n        'k',\n        'kb',\n        'm',\n        'mb',\n        'g',\n        'gb',\n        't',\n        'tb',\n        'p',\n        'pb'\n      ]\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/recovery/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/recovery'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.repositories](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-repositories.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.repositories = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean',\n      'default': false\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/repositories'\n  }\n});\n\n/**\n * Perform a [cat.segments](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-segments.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.segments = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/segments/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/segments'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.shards](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-shards.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to limit the returned information\n */\napi.cat.prototype.shards = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/shards/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/shards'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.snapshots](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Set to true to ignore unavailable snapshots\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - Name of repository from which to fetch the snapshot information\n */\napi.cat.prototype.snapshots = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      'default': false,\n      name: 'ignore_unavailable'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/snapshots/<%=repository%>',\n      req: {\n        repository: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/snapshots'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.tasks](http://www.elastic.co/guide/en/elasticsearch/reference/master/tasks.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be returned. Leave empty to return all.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Return detailed task information (default: false)\n * @param {<<api-param-type-string,`String`>>} params.parentNode - Return tasks with specified parent node.\n * @param {<<api-param-type-number,`Number`>>} params.parentTask - Return tasks with specified parent task id. Set to -1 to return all.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n */\napi.cat.prototype.tasks = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    nodeId: {\n      type: 'list',\n      name: 'node_id'\n    },\n    actions: {\n      type: 'list'\n    },\n    detailed: {\n      type: 'boolean'\n    },\n    parentNode: {\n      type: 'string',\n      name: 'parent_node'\n    },\n    parentTask: {\n      type: 'number',\n      name: 'parent_task'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  url: {\n    fmt: '/_cat/tasks'\n  }\n});\n\n/**\n * Perform a [cat.templates](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>} params.name - A pattern that returned template names must match\n */\napi.cat.prototype.templates = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/templates/<%=name%>',\n      req: {\n        name: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/templates'\n    }\n  ]\n});\n\n/**\n * Perform a [cat.threadPool](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-thread-pool.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.format - a short version of the Accept header, e.g. json, yaml\n * @param {<<api-param-type-string,`String`>>} params.size - The multiplier in which to display values\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.h - Comma-separated list of column names to display\n * @param {<<api-param-type-boolean,`Boolean`>>} params.help - Return help information\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.s - Comma-separated list of column names or column aliases to sort by\n * @param {<<api-param-type-boolean,`Boolean`>>} params.v - Verbose mode. Display column headers\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.threadPoolPatterns - A comma-separated list of regular-expressions to filter the thread pools in the output\n */\napi.cat.prototype.threadPool = ca({\n  params: {\n    format: {\n      type: 'string'\n    },\n    size: {\n      type: 'enum',\n      options: [\n        '',\n        'k',\n        'm',\n        'g',\n        't',\n        'p'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    h: {\n      type: 'list'\n    },\n    help: {\n      type: 'boolean',\n      'default': false\n    },\n    s: {\n      type: 'list'\n    },\n    v: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cat/thread_pool/<%=threadPoolPatterns%>',\n      req: {\n        threadPoolPatterns: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cat/thread_pool'\n    }\n  ]\n});\n\n/**\n * Perform a [clearScroll](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.scrollId - A comma-separated list of scroll IDs to clear\n */\napi.clearScroll = ca({\n  urls: [\n    {\n      fmt: '/_search/scroll/<%=scrollId%>',\n      req: {\n        scrollId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/scroll'\n    }\n  ],\n  paramAsBody: 'scrollId',\n  method: 'DELETE'\n});\n\napi.cluster = namespace();\n\n/**\n * Perform a [cluster.allocationExplain](http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-allocation-explain.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.includeYesDecisions - Return 'YES' decisions in explanation (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDiskInfo - Return information about disk usage and shard sizes (default: false)\n */\napi.cluster.prototype.allocationExplain = ca({\n  params: {\n    includeYesDecisions: {\n      type: 'boolean',\n      name: 'include_yes_decisions'\n    },\n    includeDiskInfo: {\n      type: 'boolean',\n      name: 'include_disk_info'\n    }\n  },\n  url: {\n    fmt: '/_cluster/allocation/explain'\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [cluster.getSettings](http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default clusters setting.\n */\napi.cluster.prototype.getSettings = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    },\n    includeDefaults: {\n      type: 'boolean',\n      'default': false,\n      name: 'include_defaults'\n    }\n  },\n  url: {\n    fmt: '/_cluster/settings'\n  }\n});\n\n/**\n * Perform a [cluster.health](http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-health.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Specify the level of detail for returned information\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Wait until the specified number of shards is active\n * @param {<<api-param-type-string,`String`>>} params.waitForNodes - Wait until the specified number of nodes is available\n * @param {<<api-param-type-string,`String`>>} params.waitForEvents - Wait until all currently queued events with the given priority are processed\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForNoRelocatingShards - Whether to wait until there are no relocating shards in the cluster\n * @param {<<api-param-type-string,`String`>>} params.waitForStatus - Wait until cluster is in a specific state\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - Limit the information returned to a specific index\n */\napi.cluster.prototype.health = ca({\n  params: {\n    level: {\n      type: 'enum',\n      'default': 'cluster',\n      options: [\n        'cluster',\n        'indices',\n        'shards'\n      ]\n    },\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    },\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    },\n    waitForNodes: {\n      type: 'string',\n      name: 'wait_for_nodes'\n    },\n    waitForEvents: {\n      type: 'enum',\n      options: [\n        'immediate',\n        'urgent',\n        'high',\n        'normal',\n        'low',\n        'languid'\n      ],\n      name: 'wait_for_events'\n    },\n    waitForNoRelocatingShards: {\n      type: 'boolean',\n      name: 'wait_for_no_relocating_shards'\n    },\n    waitForStatus: {\n      type: 'enum',\n      'default': null,\n      options: [\n        'green',\n        'yellow',\n        'red'\n      ],\n      name: 'wait_for_status'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/health/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/health'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.pendingTasks](http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-pending.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.cluster.prototype.pendingTasks = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_cluster/pending_tasks'\n  }\n});\n\n/**\n * Perform a [cluster.putSettings](http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.putSettings = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/settings'\n  },\n  method: 'PUT'\n});\n\n/**\n * Perform a [cluster.reroute](http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-reroute.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - Simulate the operation only and return the resulting state\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return an explanation of why the commands can or cannot be executed\n * @param {<<api-param-type-boolean,`Boolean`>>} params.retryFailed - Retries allocation of shards that are blocked due to too many subsequent allocation failures\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics. Defaults to all but metadata\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n */\napi.cluster.prototype.reroute = ca({\n  params: {\n    dryRun: {\n      type: 'boolean',\n      name: 'dry_run'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    retryFailed: {\n      type: 'boolean',\n      name: 'retry_failed'\n    },\n    metric: {\n      type: 'list',\n      options: [\n        '_all',\n        'blocks',\n        'metadata',\n        'nodes',\n        'routing_table',\n        'master_node',\n        'version'\n      ]\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_cluster/reroute'\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [cluster.state](http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-state.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n */\napi.cluster.prototype.state = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/state/<%=metric%>/<%=index%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'blocks',\n            'metadata',\n            'nodes',\n            'routing_table',\n            'routing_nodes',\n            'master_node',\n            'version'\n          ]\n        },\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/state/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'blocks',\n            'metadata',\n            'nodes',\n            'routing_table',\n            'routing_nodes',\n            'master_node',\n            'version'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/state'\n    }\n  ]\n});\n\n/**\n * Perform a [cluster.stats](http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.cluster.prototype.stats = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_cluster/stats/nodes/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cluster/stats'\n    }\n  ]\n});\n\n/**\n * Perform a [count](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.minScore - Include only documents with a specific `_score` value in the result\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to restrict the results\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of types to restrict the results\n */\napi.count = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    minScore: {\n      type: 'number',\n      name: 'min_score'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    lenient: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_count',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_count'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [countPercolate](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to count percolate the document into. Defaults to index.\n * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to count percolate document into. Defaults to type.\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being count percolated.\n * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n */\napi.countPercolate = ca({\n  params: {\n    routing: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    percolateIndex: {\n      type: 'string',\n      name: 'percolate_index'\n    },\n    percolateType: {\n      type: 'string',\n      name: 'percolate_type'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate/count',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_percolate/count',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [create](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the index operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.pipeline - The pipeline id to preprocess incoming documents with\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.create = ca({\n  params: {\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'enum',\n      options: [\n        'true',\n        'false',\n        'wait_for',\n        ''\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'time'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    },\n    pipeline: {\n      type: 'string'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_create',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [delete](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-delete.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the delete operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of parent document\n * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi['delete'] = ca({\n  params: {\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'enum',\n      options: [\n        'true',\n        'false',\n        'wait_for',\n        ''\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteByQuery](https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-delete-by-query.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.conflicts=abort] - What to do when the delete-by-query hits version conflicts?\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.searchTimeout - Explicit timeout for each search request. Defaults to no timeout.\n * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the delete by query operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n * @param {<<api-param-type-number,`Number`>>} params.scrollSize - Size on the scroll request powering the update_by_query\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should the request should block until the delete-by-query is complete.\n * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle for this request in sub-requests per second. -1 means no throttle.\n * @param {<<api-param-type-number,`Number`>>} [params.slices=1] - The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.deleteByQuery = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    from: {\n      type: 'number'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    conflicts: {\n      type: 'enum',\n      'default': 'abort',\n      options: [\n        'abort',\n        'proceed'\n      ]\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'time'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'dfs_query_then_fetch'\n      ],\n      name: 'search_type'\n    },\n    searchTimeout: {\n      type: 'time',\n      name: 'search_timeout'\n    },\n    size: {\n      type: 'number'\n    },\n    sort: {\n      type: 'list'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    terminateAfter: {\n      type: 'number',\n      name: 'terminate_after'\n    },\n    stats: {\n      type: 'list'\n    },\n    version: {\n      type: 'boolean'\n    },\n    requestCache: {\n      type: 'boolean',\n      name: 'request_cache'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    timeout: {\n      type: 'time',\n      'default': '1m'\n    },\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    },\n    scrollSize: {\n      type: 'number',\n      name: 'scroll_size'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    },\n    requestsPerSecond: {\n      type: 'number',\n      'default': 0,\n      name: 'requests_per_second'\n    },\n    slices: {\n      type: 'integer',\n      'default': 1\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_delete_by_query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_delete_by_query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [deleteScript](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.deleteScript = ca({\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [deleteTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.deleteTemplate = ca({\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [exists](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.exists = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [explain](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-explain.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer for the query string query\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The default field for query string query (default: _all)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.explain = ca({\n  params: {\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    storedFields: {\n      type: 'list',\n      name: 'stored_fields'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_explain',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [fieldStats](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for to get field statistics for (min value, max value, and more)\n * @param {<<api-param-type-string,`String`>>} [params.level=cluster] - Defines if field stats should be returned on a per index level or on a cluster wide level\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.fieldStats = ca({\n  params: {\n    fields: {\n      type: 'list'\n    },\n    level: {\n      type: 'enum',\n      'default': 'cluster',\n      options: [\n        'indices',\n        'cluster'\n      ]\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_field_stats',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_field_stats'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [get](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document (use `_all` to fetch the first document matching the ID across all types)\n */\napi.get = ca({\n  params: {\n    storedFields: {\n      type: 'list',\n      name: 'stored_fields'\n    },\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getScript](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.getScript = ca({\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getSource](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.parent - The ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - The document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document; use `_all` to fetch the first document matching the ID across all types\n */\napi.getSource = ca({\n  params: {\n    parent: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_source',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [getTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.getTemplate = ca({\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [index](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-index_.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the index operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n * @param {<<api-param-type-string,`String`>>} [params.opType=index] - Explicit operation type\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document\n * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.pipeline - The pipeline id to preprocess incoming documents with\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.index = ca({\n  params: {\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    },\n    opType: {\n      type: 'enum',\n      'default': 'index',\n      options: [\n        'index',\n        'create'\n      ],\n      name: 'op_type'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'enum',\n      options: [\n        'true',\n        'false',\n        'wait_for',\n        ''\n      ]\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'time'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    },\n    pipeline: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\napi.indices = namespace();\n\n/**\n * Perform a [indices.analyze](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index to scope the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.preferLocal - With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)\n * @param {<<api-param-type-string,`String`>>} [params.format=detailed] - Format of the output\n */\napi.indices.prototype.analyze = ca({\n  params: {\n    index: {\n      type: 'string'\n    },\n    preferLocal: {\n      type: 'boolean',\n      name: 'prefer_local'\n    },\n    format: {\n      type: 'enum',\n      'default': 'detailed',\n      options: [\n        'detailed',\n        'text'\n      ]\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_analyze',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_analyze'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.clearCache](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-clearcache.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fieldData - Clear field data\n * @param {<<api-param-type-boolean,`Boolean`>>} params.fielddata - Clear field data\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to clear when using the `field_data` parameter (default: all)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.query - Clear query caches\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index name to limit the operation\n * @param {<<api-param-type-boolean,`Boolean`>>} params.recycler - Clear the recycler cache\n * @param {<<api-param-type-boolean,`Boolean`>>} params.request - Clear request cache\n */\napi.indices.prototype.clearCache = ca({\n  params: {\n    fieldData: {\n      type: 'boolean',\n      name: 'field_data'\n    },\n    fielddata: {\n      type: 'boolean'\n    },\n    fields: {\n      type: 'list'\n    },\n    query: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    index: {\n      type: 'list'\n    },\n    recycler: {\n      type: 'boolean'\n    },\n    request: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_cache/clear',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_cache/clear'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.close](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma separated list of indices to close\n */\napi.indices.prototype.close = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_close',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.create](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-create-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for before the operation returns.\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.updateAllTypes - Whether to update the mapping for all fields with the same name across all types or not\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n */\napi.indices.prototype.create = ca({\n  params: {\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    },\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    updateAllTypes: {\n      type: 'boolean',\n      name: 'update_all_types'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.delete](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-delete-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices\n */\napi.indices.prototype['delete'] = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteAlias](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names (supports wildcards); use `_all` for all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.\n */\napi.indices.prototype.deleteAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_alias/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.deleteTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.deleteTemplate = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [indices.exists](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of indices to check\n */\napi.indices.prototype.exists = ca({\n  params: {\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsAlias](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.existsAlias = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': [\n        'open',\n        'closed'\n      ],\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_alias',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.existsTemplate = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.existsType](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-types-exists.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` to check the types across all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to check\n */\napi.indices.prototype.existsType = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_mapping/<%=type%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      type: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'HEAD'\n});\n\n/**\n * Perform a [indices.flush](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-flush.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitIfOngoing - If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. The default is true. If set to false the flush will be skipped iff if another flush operation is already running.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n */\napi.indices.prototype.flush = ca({\n  params: {\n    force: {\n      type: 'boolean'\n    },\n    waitIfOngoing: {\n      type: 'boolean',\n      name: 'wait_if_ongoing'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_flush',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_flush'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.flushSynced](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-synced-flush.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string for all indices\n */\napi.indices.prototype.flushSynced = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_flush/synced',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_flush/synced'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.forcemerge](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-forcemerge.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flush - Specify whether the index should be flushed after performing the operation (default: true)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-number,`Number`>>} params.maxNumSegments - The number of segments the index should be merged into (default: dynamic)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyExpungeDeletes - Specify whether the operation should only expunge deleted documents\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForMerge - Specify whether the request should block until the merge process is finished (default: true)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.forcemerge = ca({\n  params: {\n    flush: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    maxNumSegments: {\n      type: 'number',\n      name: 'max_num_segments'\n    },\n    onlyExpungeDeletes: {\n      type: 'boolean',\n      name: 'only_expunge_deletes'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    waitForMerge: {\n      type: 'boolean',\n      name: 'wait_for_merge'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_forcemerge',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_forcemerge'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.get](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Ignore unavailable indexes (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Ignore if a wildcard expression resolves to no concrete indices (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether wildcard expressions should get expanded to open or closed indices (default: open)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return version and creation date values in human-readable format.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default setting for each of the indices.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.feature - A comma-separated list of features\n */\napi.indices.prototype.get = ca({\n  params: {\n    local: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    includeDefaults: {\n      type: 'boolean',\n      'default': false,\n      name: 'include_defaults'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=feature%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        feature: {\n          type: 'list',\n          options: [\n            '_settings',\n            '_mappings',\n            '_aliases'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getAlias](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=all] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to filter aliases\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - A comma-separated list of alias names to return\n */\napi.indices.prototype.getAlias = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'all',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_alias/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_alias',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_alias'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getFieldMapping](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-field-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether the default mapping values should be returned as well\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields\n */\napi.indices.prototype.getFieldMapping = ca({\n  params: {\n    includeDefaults: {\n      type: 'boolean',\n      name: 'include_defaults'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>/field/<%=fields%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        },\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping/field/<%=fields%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>/field/<%=fields%>',\n      req: {\n        type: {\n          type: 'list'\n        },\n        fields: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/field/<%=fields%>',\n      req: {\n        fields: {\n          type: 'list'\n        }\n      }\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getMapping](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types\n */\napi.indices.prototype.getMapping = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mapping',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>',\n      req: {\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getSettings](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open,closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return version and creation date values in human-readable format.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.includeDefaults - Whether to return all default setting for each of the indices.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The name of the settings that should be included\n */\napi.indices.prototype.getSettings = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': [\n        'open',\n        'closed'\n      ],\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    local: {\n      type: 'boolean'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    includeDefaults: {\n      type: 'boolean',\n      'default': false,\n      name: 'include_defaults'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings/<%=name%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.name - The comma separated names of the index templates\n */\napi.indices.prototype.getTemplate = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_template/<%=name%>',\n      req: {\n        name: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_template'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.getUpgrade](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.getUpgrade = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_upgrade',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_upgrade'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.open](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-open-close.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=closed] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma separated list of indices to open\n */\napi.indices.prototype.open = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'closed',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_open',\n    req: {\n      index: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.putAlias](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the alias to be created or updated\n */\napi.indices.prototype.putAlias = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_alias/<%=name%>',\n    req: {\n      index: {\n        type: 'list'\n      },\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putMapping](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-put-mapping.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.updateAllTypes - Whether to update the mapping for all fields with the same name across all types or not\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.\n * @param {<<api-param-type-string,`String`>>} params.type - The name of the document type\n */\napi.indices.prototype.putMapping = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    updateAllTypes: {\n      type: 'boolean',\n      name: 'update_all_types'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_mapping/<%=type%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mapping/<%=type%>',\n      req: {\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putSettings](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-update-settings.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.preserveExisting - Whether to update existing settings. If set to `true` existing settings on an index remain unchanged, the default is `false`\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.putSettings = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    preserveExisting: {\n      type: 'boolean',\n      name: 'preserve_existing'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_settings',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_settings'\n    }\n  ],\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.putTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.order - The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.create - Whether the index template should only be added if new or can also replace an existing one\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-string,`String`>>} params.name - The name of the template\n */\napi.indices.prototype.putTemplate = ca({\n  params: {\n    order: {\n      type: 'number'\n    },\n    create: {\n      type: 'boolean',\n      'default': false\n    },\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    }\n  },\n  url: {\n    fmt: '/_template/<%=name%>',\n    req: {\n      name: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [indices.recovery](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-recovery.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Whether to display detailed information about shard recovery\n * @param {<<api-param-type-boolean,`Boolean`>>} params.activeOnly - Display only those recoveries that are currently on-going\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.recovery = ca({\n  params: {\n    detailed: {\n      type: 'boolean',\n      'default': false\n    },\n    activeOnly: {\n      type: 'boolean',\n      'default': false,\n      name: 'active_only'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_recovery',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_recovery'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.refresh](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-refresh.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.force - Force a refresh even if not required\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.refresh = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    force: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_refresh',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_refresh'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.rollover](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-rollover-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.dryRun - If set to true the rollover action will only be validated but not actually performed even if a condition matches. The default is false\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for on the newly created rollover index before the operation returns.\n * @param {<<api-param-type-string,`String`>>} params.alias - The name of the alias to rollover\n * @param {<<api-param-type-string,`String`>>} params.newIndex - The name of the rollover index\n */\napi.indices.prototype.rollover = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    dryRun: {\n      type: 'boolean',\n      name: 'dry_run'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=alias%>/_rollover/<%=newIndex%>',\n      req: {\n        alias: {\n          type: 'string'\n        },\n        newIndex: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=alias%>/_rollover',\n      req: {\n        alias: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.segments](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-segments.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Includes detailed memory usage by Lucene.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.segments = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    verbose: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_segments',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_segments'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.shardStores](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-shards-stores.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.status - A comma-separated list of statuses used to filter on shards to get store information for\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.shardStores = ca({\n  params: {\n    status: {\n      type: 'list',\n      options: [\n        'green',\n        'yellow',\n        'red',\n        'all'\n      ]\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_shard_stores',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_shard_stores'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.shrink](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-shrink-index.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Set the number of active shards to wait for on the shrunken index before the operation returns.\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the source index to shrink\n * @param {<<api-param-type-string,`String`>>} params.target - The name of the target index to shrink into\n */\napi.indices.prototype.shrink = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/_shrink/<%=target%>',\n    req: {\n      index: {\n        type: 'string'\n      },\n      target: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.stats](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>} [params.level=indices] - Return stats aggregated at cluster, index or shard level\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned the specific metrics.\n */\napi.indices.prototype.stats = ca({\n  params: {\n    completionFields: {\n      type: 'list',\n      name: 'completion_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    fields: {\n      type: 'list'\n    },\n    groups: {\n      type: 'list'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    level: {\n      type: 'enum',\n      'default': 'indices',\n      options: [\n        'cluster',\n        'indices',\n        'shards'\n      ]\n    },\n    types: {\n      type: 'list'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_stats/<%=metric%>',\n      req: {\n        index: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'query_cache',\n            'flush',\n            'get',\n            'indexing',\n            'merge',\n            'percolate',\n            'request_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_stats/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'query_cache',\n            'flush',\n            'get',\n            'indexing',\n            'merge',\n            'percolate',\n            'request_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_stats',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_stats'\n    }\n  ]\n});\n\n/**\n * Perform a [indices.updateAliases](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Request timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Specify timeout for connection to master\n */\napi.indices.prototype.updateAliases = ca({\n  params: {\n    timeout: {\n      type: 'time'\n    },\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_aliases'\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.upgrade](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Specify whether the request should block until the all segments are upgraded (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.onlyAncientSegments - If true, only ancient (an older Lucene major release) segments will be upgraded\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices\n */\napi.indices.prototype.upgrade = ca({\n  params: {\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      name: 'wait_for_completion'\n    },\n    onlyAncientSegments: {\n      type: 'boolean',\n      name: 'only_ancient_segments'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_upgrade',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_upgrade'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [indices.validateQuery](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Return detailed information about the error\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {anything} params.operationThreading - TODO: ?\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-boolean,`Boolean`>>} params.rewrite - Provide a more detailed explanation showing the actual Lucene query that will be executed.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types\n */\napi.indices.prototype.validateQuery = ca({\n  params: {\n    explain: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    operationThreading: {\n      name: 'operation_threading'\n    },\n    q: {\n      type: 'string'\n    },\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    rewrite: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_validate/query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_validate/query'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [info](http://www.elastic.co/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.info = ca({\n  url: {\n    fmt: '/'\n  }\n});\n\napi.ingest = namespace();\n\n/**\n * Perform a [ingest.deletePipeline](https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.id - Pipeline ID\n */\napi.ingest.prototype.deletePipeline = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_ingest/pipeline/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [ingest.getPipeline](https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.id - Comma separated list of pipeline ids. Wildcards supported\n */\napi.ingest.prototype.getPipeline = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_ingest/pipeline/<%=id%>',\n      req: {\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_ingest/pipeline'\n    }\n  ]\n});\n\n/**\n * Perform a [ingest.putPipeline](https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.id - Pipeline ID\n */\napi.ingest.prototype.putPipeline = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_ingest/pipeline/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [ingest.simulate](https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.verbose - Verbose mode. Display data output for each processor in executed pipeline\n * @param {<<api-param-type-string,`String`>>} params.id - Pipeline ID\n */\napi.ingest.prototype.simulate = ca({\n  params: {\n    verbose: {\n      type: 'boolean',\n      'default': false\n    }\n  },\n  urls: [\n    {\n      fmt: '/_ingest/pipeline/<%=id%>/_simulate',\n      req: {\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_ingest/pipeline/_simulate'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mget](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-get.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return in the response\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specify whether to perform the operation in realtime or search mode\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Refresh the shard containing the document before performing the operation\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.mget = ca({\n  params: {\n    storedFields: {\n      type: 'list',\n      name: 'stored_fields'\n    },\n    preference: {\n      type: 'string'\n    },\n    realtime: {\n      type: 'boolean'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    routing: {\n      type: 'string'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mget',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mget'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mpercolate](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being count percolated to use as default\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated to use as default.\n */\napi.mpercolate = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mpercolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mpercolate',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mpercolate'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [msearch](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-multi-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-number,`Number`>>} params.maxConcurrentSearches - Controls the maximum number of concurrent searches the multi search api will execute\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n */\napi.msearch = ca({\n  params: {\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch'\n      ],\n      name: 'search_type'\n    },\n    maxConcurrentSearches: {\n      type: 'number',\n      name: 'max_concurrent_searches'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_msearch',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_msearch'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [msearchTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to use as default\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to use as default\n */\napi.msearchTemplate = ca({\n  params: {\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch'\n      ],\n      name: 'search_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_msearch/template',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_msearch/template',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_msearch/template'\n    }\n  ],\n  needBody: true,\n  bulkBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [mtermvectors](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-termvectors.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.ids - A comma-separated list of documents ids. You must define ids as parameter or set \"ids\" or \"docs\" in the request body\n * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if requests are real-time as opposed to near-real-time (default: true).\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n */\napi.mtermvectors = ca({\n  params: {\n    ids: {\n      type: 'list',\n      required: false\n    },\n    termStatistics: {\n      type: 'boolean',\n      'default': false,\n      required: false,\n      name: 'term_statistics'\n    },\n    fieldStatistics: {\n      type: 'boolean',\n      'default': true,\n      required: false,\n      name: 'field_statistics'\n    },\n    fields: {\n      type: 'list',\n      required: false\n    },\n    offsets: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    positions: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    payloads: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    preference: {\n      type: 'string',\n      required: false\n    },\n    routing: {\n      type: 'string',\n      required: false\n    },\n    parent: {\n      type: 'string',\n      required: false\n    },\n    realtime: {\n      type: 'boolean',\n      required: false\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_mtermvectors',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_mtermvectors',\n      req: {\n        index: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_mtermvectors'\n    }\n  ],\n  method: 'POST'\n});\n\napi.nodes = namespace();\n\n/**\n * Perform a [nodes.hotThreads](http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-hot-threads.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.interval - The interval for the second sampling of threads\n * @param {<<api-param-type-number,`Number`>>} params.snapshots - Number of samples of thread stacktrace (default: 10)\n * @param {<<api-param-type-number,`Number`>>} params.threads - Specify the number of threads to provide information for (default: 3)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreIdleThreads - Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue (default: true)\n * @param {<<api-param-type-string,`String`>>} params.type - The type to sample (default: cpu)\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.nodes.prototype.hotThreads = ca({\n  params: {\n    interval: {\n      type: 'time'\n    },\n    snapshots: {\n      type: 'number'\n    },\n    threads: {\n      type: 'number'\n    },\n    ignoreIdleThreads: {\n      type: 'boolean',\n      name: 'ignore_idle_threads'\n    },\n    type: {\n      type: 'enum',\n      options: [\n        'cpu',\n        'wait',\n        'block'\n      ]\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/hotthreads',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/hotthreads'\n    }\n  ]\n});\n\n/**\n * Perform a [nodes.info](http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-info.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.flatSettings - Return settings in flat format (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - A comma-separated list of metrics you wish returned. Leave empty to return all.\n */\napi.nodes.prototype.info = ca({\n  params: {\n    flatSettings: {\n      type: 'boolean',\n      name: 'flat_settings'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/<%=metric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            'settings',\n            'os',\n            'process',\n            'jvm',\n            'thread_pool',\n            'transport',\n            'http',\n            'plugins',\n            'ingest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            'settings',\n            'os',\n            'process',\n            'jvm',\n            'thread_pool',\n            'transport',\n            'http',\n            'plugins',\n            'ingest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes'\n    }\n  ]\n});\n\n/**\n * Perform a [nodes.stats](http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-stats.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.completionFields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.groups - A comma-separated list of search groups for `search` index metric\n * @param {<<api-param-type-boolean,`Boolean`>>} params.human - Whether to return time and byte values in human-readable format.\n * @param {<<api-param-type-string,`String`>>} [params.level=node] - Return indices stats aggregated at index, node or shard level\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.types - A comma-separated list of document types for the `indexing` index metric\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.metric - Limit the information returned to the specified metrics\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.indexMetric - Limit the information returned for `indices` metric to the specific index metrics. Isn't used if `indices` (or `all`) metric isn't specified.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n */\napi.nodes.prototype.stats = ca({\n  params: {\n    completionFields: {\n      type: 'list',\n      name: 'completion_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    fields: {\n      type: 'list'\n    },\n    groups: {\n      type: 'boolean'\n    },\n    human: {\n      type: 'boolean',\n      'default': false\n    },\n    level: {\n      type: 'enum',\n      'default': 'node',\n      options: [\n        'indices',\n        'node',\n        'shards'\n      ]\n    },\n    types: {\n      type: 'list'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>/<%=indexMetric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'os',\n            'process',\n            'thread_pool',\n            'transport',\n            'discovery'\n          ]\n        },\n        indexMetric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'query_cache',\n            'flush',\n            'get',\n            'indexing',\n            'merge',\n            'percolate',\n            'request_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats/<%=metric%>',\n      req: {\n        nodeId: {\n          type: 'list'\n        },\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'os',\n            'process',\n            'thread_pool',\n            'transport',\n            'discovery'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats/<%=metric%>/<%=indexMetric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'os',\n            'process',\n            'thread_pool',\n            'transport',\n            'discovery'\n          ]\n        },\n        indexMetric: {\n          type: 'list',\n          options: [\n            '_all',\n            'completion',\n            'docs',\n            'fielddata',\n            'query_cache',\n            'flush',\n            'get',\n            'indexing',\n            'merge',\n            'percolate',\n            'request_cache',\n            'refresh',\n            'search',\n            'segments',\n            'store',\n            'warmer',\n            'suggest'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/<%=nodeId%>/stats',\n      req: {\n        nodeId: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats/<%=metric%>',\n      req: {\n        metric: {\n          type: 'list',\n          options: [\n            '_all',\n            'breaker',\n            'fs',\n            'http',\n            'indices',\n            'jvm',\n            'os',\n            'process',\n            'thread_pool',\n            'transport',\n            'discovery'\n          ]\n        }\n      }\n    },\n    {\n      fmt: '/_nodes/stats'\n    }\n  ]\n});\n\n/**\n * Perform a [percolate](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.percolateIndex - The index to percolate the document into. Defaults to index.\n * @param {<<api-param-type-string,`String`>>} params.percolateType - The type to percolate document into. Defaults to type.\n * @param {<<api-param-type-string,`String`>>} params.percolateRouting - The routing value to use when percolating the existing document.\n * @param {<<api-param-type-string,`String`>>} params.percolatePreference - Which shard to prefer when executing the percolate request.\n * @param {<<api-param-type-string,`String`>>} params.percolateFormat - Return an array of matching query IDs instead of objects\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index of the document being percolated.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document being percolated.\n * @param {<<api-param-type-string,`String`>>} params.id - Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster.\n */\napi.percolate = ca({\n  params: {\n    routing: {\n      type: 'list'\n    },\n    preference: {\n      type: 'string'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    percolateIndex: {\n      type: 'string',\n      name: 'percolate_index'\n    },\n    percolateType: {\n      type: 'string',\n      name: 'percolate_type'\n    },\n    percolateRouting: {\n      type: 'string',\n      name: 'percolate_routing'\n    },\n    percolatePreference: {\n      type: 'string',\n      name: 'percolate_preference'\n    },\n    percolateFormat: {\n      type: 'enum',\n      options: [\n        'ids'\n      ],\n      name: 'percolate_format'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_percolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_percolate',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [ping](http://www.elastic.co/guide/) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n */\napi.ping = ca({\n  url: {\n    fmt: '/'\n  },\n  requestTimeout: 3000,\n  method: 'HEAD'\n});\n\n/**\n * Perform a [putScript](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.id - Script ID\n * @param {<<api-param-type-string,`String`>>} params.lang - Script language\n */\napi.putScript = ca({\n  url: {\n    fmt: '/_scripts/<%=lang%>/<%=id%>',\n    req: {\n      lang: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [putTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.id - Template ID\n */\napi.putTemplate = ca({\n  url: {\n    fmt: '/_search/template/<%=id%>',\n    req: {\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'PUT'\n});\n\n/**\n * Perform a [reindex](https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-reindex.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the reindex operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should the request should block until the reindex is complete.\n * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in sub-requests per second. -1 means no throttle.\n * @param {<<api-param-type-number,`Number`>>} [params.slices=1] - The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.\n */\napi.reindex = ca({\n  params: {\n    refresh: {\n      type: 'boolean'\n    },\n    timeout: {\n      type: 'time',\n      'default': '1m'\n    },\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    },\n    requestsPerSecond: {\n      type: 'number',\n      'default': 0,\n      name: 'requests_per_second'\n    },\n    slices: {\n      type: 'integer',\n      'default': 1\n    }\n  },\n  url: {\n    fmt: '/_reindex'\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [reindexRethrottle](https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-reindex.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in floating sub-requests per second. -1 means set no throttle.\n * @param {<<api-param-type-string,`String`>>} params.taskId - The task id to rethrottle\n */\napi.reindexRethrottle = ca({\n  params: {\n    requestsPerSecond: {\n      type: 'number',\n      required: true,\n      name: 'requests_per_second'\n    }\n  },\n  url: {\n    fmt: '/_reindex/<%=taskId%>/_rethrottle',\n    req: {\n      taskId: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [renderSearchTemplate](http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.id - The id of the stored search template\n */\napi.renderSearchTemplate = ca({\n  urls: [\n    {\n      fmt: '/_render/template/<%=id%>',\n      req: {\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_render/template'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [scroll](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-request-scroll.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.scrollId - The scroll ID\n */\napi.scroll = ca({\n  params: {\n    scroll: {\n      type: 'time'\n    },\n    scrollId: {\n      type: 'string',\n      name: 'scroll_id'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_search/scroll/<%=scrollId%>',\n      req: {\n        scrollId: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_search/scroll'\n    }\n  ],\n  paramAsBody: 'scrollId',\n  method: 'POST'\n});\n\n/**\n * Perform a [search](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.storedFields - A comma-separated list of stored fields to return as part of a hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.docvalueFields - A comma-separated list of fields to return as the docvalue representation of a field for each hit\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fielddataFields - A comma-separated list of fields to return as the docvalue representation of a field for each hit\n * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n * @param {<<api-param-type-string,`String`>>} params.suggestField - Specify which field to use for suggestions\n * @param {<<api-param-type-string,`String`>>} [params.suggestMode=missing] - Specify suggest mode\n * @param {<<api-param-type-number,`Number`>>} params.suggestSize - How many suggestions to return in response\n * @param {<<api-param-type-string,`String`>>} params.suggestText - The source text for which the suggestions should be returned\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.trackScores - Whether to calculate and return scores even if they are not used for sorting\n * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.search = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    storedFields: {\n      type: 'list',\n      name: 'stored_fields'\n    },\n    docvalueFields: {\n      type: 'list',\n      name: 'docvalue_fields'\n    },\n    fielddataFields: {\n      type: 'list',\n      name: 'fielddata_fields'\n    },\n    from: {\n      type: 'number'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'time'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'dfs_query_then_fetch'\n      ],\n      name: 'search_type'\n    },\n    size: {\n      type: 'number'\n    },\n    sort: {\n      type: 'list'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    terminateAfter: {\n      type: 'number',\n      name: 'terminate_after'\n    },\n    stats: {\n      type: 'list'\n    },\n    suggestField: {\n      type: 'string',\n      name: 'suggest_field'\n    },\n    suggestMode: {\n      type: 'enum',\n      'default': 'missing',\n      options: [\n        'missing',\n        'popular',\n        'always'\n      ],\n      name: 'suggest_mode'\n    },\n    suggestSize: {\n      type: 'number',\n      name: 'suggest_size'\n    },\n    suggestText: {\n      type: 'string',\n      name: 'suggest_text'\n    },\n    timeout: {\n      type: 'time'\n    },\n    trackScores: {\n      type: 'boolean',\n      name: 'track_scores'\n    },\n    version: {\n      type: 'boolean'\n    },\n    requestCache: {\n      type: 'boolean',\n      name: 'request_cache'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchShards](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.searchShards = ca({\n  params: {\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    },\n    local: {\n      type: 'boolean'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search_shards',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search_shards',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search_shards'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [searchTemplate](http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-boolean,`Boolean`>>} params.explain - Specify whether to return detailed information about score computation as part of a hit\n * @param {<<api-param-type-boolean,`Boolean`>>} params.profile - Specify whether to profile the query execution\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.searchTemplate = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'time'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'query_and_fetch',\n        'dfs_query_then_fetch',\n        'dfs_query_and_fetch'\n      ],\n      name: 'search_type'\n    },\n    explain: {\n      type: 'boolean'\n    },\n    profile: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_search/template',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_search/template',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_search/template'\n    }\n  ],\n  method: 'POST'\n});\n\napi.snapshot = namespace();\n\n/**\n * Perform a [snapshot.create](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype.create = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.createRepository](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-boolean,`Boolean`>>} params.verify - Whether to verify the repository after creation\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n */\napi.snapshot.prototype.createRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    },\n    verify: {\n      type: 'boolean'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>',\n    req: {\n      repository: {\n        type: 'string'\n      }\n    }\n  },\n  needBody: true,\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.delete](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype['delete'] = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [snapshot.deleteRepository](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n */\napi.snapshot.prototype.deleteRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>',\n    req: {\n      repository: {\n        type: 'list'\n      }\n    }\n  },\n  method: 'DELETE'\n});\n\n/**\n * Perform a [snapshot.get](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n */\napi.snapshot.prototype.get = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'list'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [snapshot.getRepository](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.local - Return local information, do not retrieve the state from master node (default: false)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.repository - A comma-separated list of repository names\n */\napi.snapshot.prototype.getRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    local: {\n      type: 'boolean'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_snapshot/<%=repository%>',\n      req: {\n        repository: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot'\n    }\n  ]\n});\n\n/**\n * Perform a [snapshot.restore](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should this request wait until the operation has completed before returning\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>} params.snapshot - A snapshot name\n */\napi.snapshot.prototype.restore = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_restore',\n    req: {\n      repository: {\n        type: 'string'\n      },\n      snapshot: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [snapshot.status](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.snapshot - A comma-separated list of snapshot names\n */\napi.snapshot.prototype.status = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_snapshot/<%=repository%>/<%=snapshot%>/_status',\n      req: {\n        repository: {\n          type: 'string'\n        },\n        snapshot: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot/<%=repository%>/_status',\n      req: {\n        repository: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_snapshot/_status'\n    }\n  ]\n});\n\n/**\n * Perform a [snapshot.verifyRepository](http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.masterTimeout - Explicit operation timeout for connection to master node\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-string,`String`>>} params.repository - A repository name\n */\napi.snapshot.prototype.verifyRepository = ca({\n  params: {\n    masterTimeout: {\n      type: 'time',\n      name: 'master_timeout'\n    },\n    timeout: {\n      type: 'time'\n    }\n  },\n  url: {\n    fmt: '/_snapshot/<%=repository%>/_verify',\n    req: {\n      repository: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [suggest](http://www.elastic.co/guide/en/elasticsearch/reference/master/search-suggesters.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices\n */\napi.suggest = ca({\n  params: {\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    preference: {\n      type: 'string'\n    },\n    routing: {\n      type: 'string'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/_suggest',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/_suggest'\n    }\n  ],\n  needBody: true,\n  method: 'POST'\n});\n\napi.tasks = namespace();\n\n/**\n * Perform a [tasks.cancel](http://www.elastic.co/guide/en/elasticsearch/reference/master/tasks.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be cancelled. Leave empty to cancel all.\n * @param {<<api-param-type-string,`String`>>} params.parentNode - Cancel tasks with specified parent node.\n * @param {<<api-param-type-string,`String`>>} params.parentTask - Cancel tasks with specified parent task id (node_id:task_number). Set to -1 to cancel all.\n * @param {<<api-param-type-string,`String`>>} params.taskId - Cancel the task with specified task id (node_id:task_number)\n */\napi.tasks.prototype.cancel = ca({\n  params: {\n    nodeId: {\n      type: 'list',\n      name: 'node_id'\n    },\n    actions: {\n      type: 'list'\n    },\n    parentNode: {\n      type: 'string',\n      name: 'parent_node'\n    },\n    parentTask: {\n      type: 'string',\n      name: 'parent_task'\n    }\n  },\n  urls: [\n    {\n      fmt: '/_tasks/<%=taskId%>/_cancel',\n      req: {\n        taskId: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/_tasks/_cancel'\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [tasks.get](http://www.elastic.co/guide/en/elasticsearch/reference/master/tasks.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Wait for the matching tasks to complete (default: false)\n * @param {<<api-param-type-string,`String`>>} params.taskId - Return the task with specified id (node_id:task_number)\n */\napi.tasks.prototype.get = ca({\n  params: {\n    waitForCompletion: {\n      type: 'boolean',\n      name: 'wait_for_completion'\n    }\n  },\n  url: {\n    fmt: '/_tasks/<%=taskId%>',\n    req: {\n      taskId: {\n        type: 'string'\n      }\n    }\n  }\n});\n\n/**\n * Perform a [tasks.list](http://www.elastic.co/guide/en/elasticsearch/reference/master/tasks.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.nodeId - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.actions - A comma-separated list of actions that should be returned. Leave empty to return all.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.detailed - Return detailed task information (default: false)\n * @param {<<api-param-type-string,`String`>>} params.parentNode - Return tasks with specified parent node.\n * @param {<<api-param-type-string,`String`>>} params.parentTask - Return tasks with specified parent task id (node_id:task_number). Set to -1 to return all.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Wait for the matching tasks to complete (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.groupBy=nodes] - Group tasks by nodes or parent/child relationships\n */\napi.tasks.prototype.list = ca({\n  params: {\n    nodeId: {\n      type: 'list',\n      name: 'node_id'\n    },\n    actions: {\n      type: 'list'\n    },\n    detailed: {\n      type: 'boolean'\n    },\n    parentNode: {\n      type: 'string',\n      name: 'parent_node'\n    },\n    parentTask: {\n      type: 'string',\n      name: 'parent_task'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      name: 'wait_for_completion'\n    },\n    groupBy: {\n      type: 'enum',\n      'default': 'nodes',\n      options: [\n        'nodes',\n        'parents'\n      ],\n      name: 'group_by'\n    }\n  },\n  url: {\n    fmt: '/_tasks'\n  }\n});\n\n/**\n * Perform a [termvectors](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-boolean,`Boolean`>>} params.termStatistics - Specifies if total term frequency and document frequency should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.fieldStatistics=true] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.offsets=true] - Specifies if term offsets should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.positions=true] - Specifies if term positions should be returned.\n * @param {<<api-param-type-boolean,`Boolean`>>} [params.payloads=true] - Specifies if term payloads should be returned.\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random).\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value.\n * @param {<<api-param-type-string,`String`>>} params.parent - Parent id of documents.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.realtime - Specifies if request is real-time as opposed to near-real-time (default: true).\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.index - The index in which the document resides.\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document.\n * @param {<<api-param-type-string,`String`>>} params.id - The id of the document, when not specified a doc param should be supplied.\n */\napi.termvectors = ca({\n  params: {\n    termStatistics: {\n      type: 'boolean',\n      'default': false,\n      required: false,\n      name: 'term_statistics'\n    },\n    fieldStatistics: {\n      type: 'boolean',\n      'default': true,\n      required: false,\n      name: 'field_statistics'\n    },\n    fields: {\n      type: 'list',\n      required: false\n    },\n    offsets: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    positions: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    payloads: {\n      type: 'boolean',\n      'default': true,\n      required: false\n    },\n    preference: {\n      type: 'string',\n      required: false\n    },\n    routing: {\n      type: 'string',\n      required: false\n    },\n    parent: {\n      type: 'string',\n      required: false\n    },\n    realtime: {\n      type: 'boolean',\n      required: false\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'external',\n        'external_gte',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/<%=id%>/_termvectors',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        },\n        id: {\n          type: 'string'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/<%=type%>/_termvectors',\n      req: {\n        index: {\n          type: 'string'\n        },\n        type: {\n          type: 'string'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n\n/**\n * Perform a [update](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-update.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the update operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.fields - A comma-separated list of fields to return in the response\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-string,`String`>>} params.lang - The script language (default: groovy)\n * @param {<<api-param-type-string,`String`>>} params.parent - ID of the parent document. Is is only used for routing and when for the upsert request\n * @param {<<api-param-type-string,`String`>>} params.refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n * @param {<<api-param-type-number,`Number`>>} params.retryOnConflict - Specify how many times should the operation be retried when a conflict occurs (default: 0)\n * @param {<<api-param-type-string,`String`>>} params.routing - Specific routing value\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timeout - Explicit operation timeout\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.timestamp - Explicit timestamp for the document\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.ttl - Expiration time for the document\n * @param {<<api-param-type-number,`Number`>>} params.version - Explicit version number for concurrency control\n * @param {<<api-param-type-string,`String`>>} params.versionType - Specific version type\n * @param {<<api-param-type-string,`String`>>} params.id - Document ID\n * @param {<<api-param-type-string,`String`>>} params.index - The name of the index\n * @param {<<api-param-type-string,`String`>>} params.type - The type of the document\n */\napi.update = ca({\n  params: {\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    },\n    fields: {\n      type: 'list'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    lang: {\n      type: 'string'\n    },\n    parent: {\n      type: 'string'\n    },\n    refresh: {\n      type: 'enum',\n      options: [\n        'true',\n        'false',\n        'wait_for',\n        ''\n      ]\n    },\n    retryOnConflict: {\n      type: 'number',\n      name: 'retry_on_conflict'\n    },\n    routing: {\n      type: 'string'\n    },\n    timeout: {\n      type: 'time'\n    },\n    timestamp: {\n      type: 'time'\n    },\n    ttl: {\n      type: 'time'\n    },\n    version: {\n      type: 'number'\n    },\n    versionType: {\n      type: 'enum',\n      options: [\n        'internal',\n        'force'\n      ],\n      name: 'version_type'\n    }\n  },\n  url: {\n    fmt: '/<%=index%>/<%=type%>/<%=id%>/_update',\n    req: {\n      index: {\n        type: 'string'\n      },\n      type: {\n        type: 'string'\n      },\n      id: {\n        type: 'string'\n      }\n    }\n  },\n  method: 'POST'\n});\n\n/**\n * Perform a [updateByQuery](https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-update-by-query.html) request\n *\n * @param {Object} params - An object with parameters used to carry out this action\n * @param {<<api-param-type-string,`String`>>} params.analyzer - The analyzer to use for the query string\n * @param {<<api-param-type-boolean,`Boolean`>>} params.analyzeWildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {<<api-param-type-string,`String`>>} [params.defaultOperator=OR] - The default operator for query string query (AND or OR)\n * @param {<<api-param-type-string,`String`>>} params.df - The field to use as default where no field prefix is given in the query string\n * @param {<<api-param-type-number,`Number`>>} params.from - Starting offset (default: 0)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.ignoreUnavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.allowNoIndices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {<<api-param-type-string,`String`>>} [params.conflicts=abort] - What to do when the update by query hits version conflicts?\n * @param {<<api-param-type-string,`String`>>} [params.expandWildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n * @param {<<api-param-type-boolean,`Boolean`>>} params.lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {<<api-param-type-string,`String`>>} params.pipeline - Ingest pipeline to set on index requests made by this action. (default: none)\n * @param {<<api-param-type-string,`String`>>} params.preference - Specify the node or shard the operation should be performed on (default: random)\n * @param {<<api-param-type-string,`String`>>} params.q - Query in the Lucene query string syntax\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.routing - A comma-separated list of specific routing values\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {<<api-param-type-string,`String`>>} params.searchType - Search operation type\n * @param {<<api-param-type-duration-string,`DurationString`>>} params.searchTimeout - Explicit timeout for each search request. Defaults to no timeout.\n * @param {<<api-param-type-number,`Number`>>} params.size - Number of hits to return (default: 10)\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.sort - A comma-separated list of <field>:<direction> pairs\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._source - True or false to return the _source field or not, or a list of fields to return\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceExclude - A list of fields to exclude from the returned _source field\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params._sourceInclude - A list of fields to extract and return from the _source field\n * @param {<<api-param-type-number,`Number`>>} params.terminateAfter - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.stats - Specific 'tag' of the request for logging and statistical purposes\n * @param {<<api-param-type-boolean,`Boolean`>>} params.version - Specify whether to return document version as part of a hit\n * @param {<<api-param-type-boolean,`Boolean`>>} params.versionType - Should the document increment the version number (internal) on hit or not (reindex)\n * @param {<<api-param-type-boolean,`Boolean`>>} params.requestCache - Specify if request cache should be used for this request or not, defaults to index level setting\n * @param {<<api-param-type-boolean,`Boolean`>>} params.refresh - Should the effected indexes be refreshed?\n * @param {<<api-param-type-duration-string,`DurationString`>>} [params.timeout=1m] - Time each individual bulk request should wait for shards that are unavailable.\n * @param {<<api-param-type-string,`String`>>} params.waitForActiveShards - Sets the number of shard copies that must be active before proceeding with the update by query operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n * @param {<<api-param-type-number,`Number`>>} params.scrollSize - Size on the scroll request powering the update_by_query\n * @param {<<api-param-type-boolean,`Boolean`>>} params.waitForCompletion - Should the request should block until the update by query operation is complete.\n * @param {<<api-param-type-number,`Number`>>} params.requestsPerSecond - The throttle to set on this request in sub-requests per second. -1 means no throttle.\n * @param {<<api-param-type-number,`Number`>>} [params.slices=1] - The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {<<api-param-type-string,`String`>>, <<api-param-type-string-array,`String[]`>>, <<api-param-type-boolean,`Boolean`>>} params.type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n */\napi.updateByQuery = ca({\n  params: {\n    analyzer: {\n      type: 'string'\n    },\n    analyzeWildcard: {\n      type: 'boolean',\n      name: 'analyze_wildcard'\n    },\n    defaultOperator: {\n      type: 'enum',\n      'default': 'OR',\n      options: [\n        'AND',\n        'OR'\n      ],\n      name: 'default_operator'\n    },\n    df: {\n      type: 'string'\n    },\n    from: {\n      type: 'number'\n    },\n    ignoreUnavailable: {\n      type: 'boolean',\n      name: 'ignore_unavailable'\n    },\n    allowNoIndices: {\n      type: 'boolean',\n      name: 'allow_no_indices'\n    },\n    conflicts: {\n      type: 'enum',\n      'default': 'abort',\n      options: [\n        'abort',\n        'proceed'\n      ]\n    },\n    expandWildcards: {\n      type: 'enum',\n      'default': 'open',\n      options: [\n        'open',\n        'closed',\n        'none',\n        'all'\n      ],\n      name: 'expand_wildcards'\n    },\n    lenient: {\n      type: 'boolean'\n    },\n    pipeline: {\n      type: 'string'\n    },\n    preference: {\n      type: 'string'\n    },\n    q: {\n      type: 'string'\n    },\n    routing: {\n      type: 'list'\n    },\n    scroll: {\n      type: 'time'\n    },\n    searchType: {\n      type: 'enum',\n      options: [\n        'query_then_fetch',\n        'dfs_query_then_fetch'\n      ],\n      name: 'search_type'\n    },\n    searchTimeout: {\n      type: 'time',\n      name: 'search_timeout'\n    },\n    size: {\n      type: 'number'\n    },\n    sort: {\n      type: 'list'\n    },\n    _source: {\n      type: 'list'\n    },\n    _sourceExclude: {\n      type: 'list',\n      name: '_source_exclude'\n    },\n    _sourceInclude: {\n      type: 'list',\n      name: '_source_include'\n    },\n    terminateAfter: {\n      type: 'number',\n      name: 'terminate_after'\n    },\n    stats: {\n      type: 'list'\n    },\n    version: {\n      type: 'boolean'\n    },\n    versionType: {\n      type: 'boolean',\n      name: 'version_type'\n    },\n    requestCache: {\n      type: 'boolean',\n      name: 'request_cache'\n    },\n    refresh: {\n      type: 'boolean'\n    },\n    timeout: {\n      type: 'time',\n      'default': '1m'\n    },\n    waitForActiveShards: {\n      type: 'string',\n      name: 'wait_for_active_shards'\n    },\n    scrollSize: {\n      type: 'number',\n      name: 'scroll_size'\n    },\n    waitForCompletion: {\n      type: 'boolean',\n      'default': false,\n      name: 'wait_for_completion'\n    },\n    requestsPerSecond: {\n      type: 'number',\n      'default': 0,\n      name: 'requests_per_second'\n    },\n    slices: {\n      type: 'integer',\n      'default': 1\n    }\n  },\n  urls: [\n    {\n      fmt: '/<%=index%>/<%=type%>/_update_by_query',\n      req: {\n        index: {\n          type: 'list'\n        },\n        type: {\n          type: 'list'\n        }\n      }\n    },\n    {\n      fmt: '/<%=index%>/_update_by_query',\n      req: {\n        index: {\n          type: 'list'\n        }\n      }\n    }\n  ],\n  method: 'POST'\n});\n"}